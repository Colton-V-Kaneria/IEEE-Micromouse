
Macrorat_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08006fb8  08006fb8  00016fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007364  08007364  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08007364  08007364  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007364  08007364  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007364  08007364  00017364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800736c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001d8  08007544  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08007544  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a56c  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd8  00000000  00000000  0002a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000931  00000000  00000000  0002d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cfa  00000000  00000000  0002dab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca1a  00000000  00000000  000467ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f7b1  00000000  00000000  000531c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004194  00000000  00000000  000e2978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e6b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f9c 	.word	0x08006f9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006f9c 	.word	0x08006f9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b7a:	2afd      	cmp	r2, #253	; 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	; 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	; 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	; 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_f2iz>:
 8000dc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dcc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dd0:	d30f      	bcc.n	8000df2 <__aeabi_f2iz+0x2a>
 8000dd2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dda:	d90d      	bls.n	8000df8 <__aeabi_f2iz+0x30>
 8000ddc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000de4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000de8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dec:	bf18      	it	ne
 8000dee:	4240      	negne	r0, r0
 8000df0:	4770      	bx	lr
 8000df2:	f04f 0000 	mov.w	r0, #0
 8000df6:	4770      	bx	lr
 8000df8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_f2iz+0x3a>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d105      	bne.n	8000e0e <__aeabi_f2iz+0x46>
 8000e02:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e0c:	4770      	bx	lr
 8000e0e:	f04f 0000 	mov.w	r0, #0
 8000e12:	4770      	bx	lr

08000e14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d013      	beq.n	8000e54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00b      	beq.n	8000e54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e3c:	e000      	b.n	8000e40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f9      	beq.n	8000e3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <calc_v_batt>:

	return sum / 15;
}

float calc_v_batt()
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	ADC1_Select_CH1();
 8000e64:	f000 fc2e 	bl	80016c4 <ADC1_Select_CH1>

	HAL_ADC_Start(&hadc1);
 8000e68:	4819      	ldr	r0, [pc, #100]	; (8000ed0 <calc_v_batt+0x70>)
 8000e6a:	f001 f805 	bl	8001e78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e72:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <calc_v_batt+0x70>)
 8000e74:	f001 f8da 	bl	800202c <HAL_ADC_PollForConversion>
	battery_reading = HAL_ADC_GetValue(&hadc1);
 8000e78:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <calc_v_batt+0x70>)
 8000e7a:	f001 f9dd 	bl	8002238 <HAL_ADC_GetValue>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <calc_v_batt+0x74>)
 8000e84:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000e86:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <calc_v_batt+0x70>)
 8000e88:	f001 f8a4 	bl	8001fd4 <HAL_ADC_Stop>

	// multiply by ratio to convert to V, then multiply by 3
    return battery_reading * v_ratio * 3;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <calc_v_batt+0x74>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fab7 	bl	8000404 <__aeabi_i2d>
 8000e96:	a30c      	add	r3, pc, #48	; (adr r3, 8000ec8 <calc_v_batt+0x68>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fb1c 	bl	80004d8 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <calc_v_batt+0x78>)
 8000eae:	f7ff fb13 	bl	80004d8 <__aeabi_dmul>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fde5 	bl	8000a88 <__aeabi_d2f>
 8000ebe:	4603      	mov	r3, r0
//	v_meter = measure_battery(BATTERY);
//	fl_v_meter = (float)(v_meter)/1206;
//	fl_batt_volt = (float)(v_meter*3)/1206;
    //batt volt obtained through voltage division

}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	97635e74 	.word	0x97635e74
 8000ecc:	3f4adea8 	.word	0x3f4adea8
 8000ed0:	200001f4 	.word	0x200001f4
 8000ed4:	20000324 	.word	0x20000324
 8000ed8:	40080000 	.word	0x40080000

08000edc <calc_PWM>:

int calc_PWM(float voltage)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	v_batt = calc_v_batt();
 8000ee4:	f7ff ffbc 	bl	8000e60 <calc_v_batt>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <calc_PWM+0x40>)
 8000eec:	6013      	str	r3, [r2, #0]
	x = voltage;
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <calc_PWM+0x44>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6013      	str	r3, [r2, #0]
	return (voltage/v_batt)*2047;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <calc_PWM+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fec8 	bl	8000c90 <__aeabi_fdiv>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <calc_PWM+0x48>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe0f 	bl	8000b28 <__aeabi_fmul>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5b 	bl	8000dc8 <__aeabi_f2iz>
 8000f12:	4603      	mov	r3, r0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000328 	.word	0x20000328
 8000f20:	20000000 	.word	0x20000000
 8000f24:	44ffe000 	.word	0x44ffe000

08000f28 <calc_distance>:

int calc_distance()
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	return (d_L + d_R)/2;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <calc_distance+0x1c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <calc_distance+0x20>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	0fda      	lsrs	r2, r3, #31
 8000f38:	4413      	add	r3, r2
 8000f3a:	105b      	asrs	r3, r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000304 	.word	0x20000304
 8000f48:	20000308 	.word	0x20000308
 8000f4c:	00000000 	.word	0x00000000

08000f50 <calc_angle>:

int calc_angle()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	int angle = (int)((d_R - d_L)/(2.0 * RW) * (180.0/M_PI)) % 360;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <calc_angle+0x90>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <calc_angle+0x94>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa4f 	bl	8000404 <__aeabi_i2d>
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <calc_angle+0x98>)
 8000f6c:	f7ff fbde 	bl	800072c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	a317      	add	r3, pc, #92	; (adr r3, 8000fd8 <calc_angle+0x88>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff faab 	bl	80004d8 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fd55 	bl	8000a38 <__aeabi_d2iz>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <calc_angle+0x9c>)
 8000f92:	fb82 1203 	smull	r1, r2, r2, r3
 8000f96:	441a      	add	r2, r3
 8000f98:	1211      	asrs	r1, r2, #8
 8000f9a:	17da      	asrs	r2, r3, #31
 8000f9c:	1a8a      	subs	r2, r1, r2
 8000f9e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000fa2:	fb01 f202 	mul.w	r2, r1, r2
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	607b      	str	r3, [r7, #4]

	// These next statements ensure the result is between -180 and 180
	if (angle > 180)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2bb4      	cmp	r3, #180	; 0xb4
 8000fae:	dd04      	ble.n	8000fba <calc_angle+0x6a>
	{
		angle -= 360;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	e007      	b.n	8000fca <calc_angle+0x7a>
	}
	else if (angle < -180)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8000fc0:	da03      	bge.n	8000fca <calc_angle+0x7a>
	{
		angle += 360;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fc8:	607b      	str	r3, [r7, #4]
	}

	return angle;
 8000fca:	687b      	ldr	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	1a63c1f8 	.word	0x1a63c1f8
 8000fdc:	404ca5dc 	.word	0x404ca5dc
 8000fe0:	20000308 	.word	0x20000308
 8000fe4:	20000304 	.word	0x20000304
 8000fe8:	40548000 	.word	0x40548000
 8000fec:	b60b60b7 	.word	0xb60b60b7

08000ff0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	// this is the left encoder timer
	if (htim->Instance == TIM3) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a44      	ldr	r2, [pc, #272]	; (8001110 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d13b      	bne.n	800107a <HAL_TIM_IC_CaptureCallback+0x8a>
		//enc_left = __HAL_TIM_GET_COUNTER(htim);
		raw_count_left = __HAL_TIM_GET_COUNTER(htim);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b42      	ldr	r3, [pc, #264]	; (8001114 <HAL_TIM_IC_CaptureCallback+0x124>)
 800100c:	801a      	strh	r2, [r3, #0]
		enc_left -= (int16_t)(raw_count_left - prev_count_left);
 800100e:	4b42      	ldr	r3, [pc, #264]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a40      	ldr	r2, [pc, #256]	; (8001114 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001014:	8811      	ldrh	r1, [r2, #0]
 8001016:	4a41      	ldr	r2, [pc, #260]	; (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001018:	8812      	ldrh	r2, [r2, #0]
 800101a:	1a8a      	subs	r2, r1, r2
 800101c:	b292      	uxth	r2, r2
 800101e:	b212      	sxth	r2, r2
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	4a3d      	ldr	r2, [pc, #244]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001024:	6013      	str	r3, [r2, #0]
		d_L = (enc_left / 360.0) * (M_PI * diameter);
 8001026:	4b3c      	ldr	r3, [pc, #240]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f9ea 	bl	8000404 <__aeabi_i2d>
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001036:	f7ff fb79 	bl	800072c <__aeabi_ddiv>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	a331      	add	r3, pc, #196	; (adr r3, 8001108 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fa46 	bl	80004d8 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fcf0 	bl	8000a38 <__aeabi_d2iz>
 8001058:	4603      	mov	r3, r0
 800105a:	4a32      	ldr	r2, [pc, #200]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x134>)
 800105c:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();	// updates distance whenever d_L changes
 800105e:	f7ff ff63 	bl	8000f28 <calc_distance>
 8001062:	4603      	mov	r3, r0
 8001064:	4a30      	ldr	r2, [pc, #192]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001066:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 8001068:	f7ff ff72 	bl	8000f50 <calc_angle>
 800106c:	4603      	mov	r3, r0
 800106e:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001070:	6013      	str	r3, [r2, #0]

		prev_count_left = raw_count_left;
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001074:	881a      	ldrh	r2, [r3, #0]
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001078:	801a      	strh	r2, [r3, #0]
	}
	if (htim->Instance == TIM4) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d13b      	bne.n	80010fc <HAL_TIM_IC_CaptureCallback+0x10c>
		//enc_right = __HAL_TIM_GET_COUNTER(htim);
		raw_count_right = __HAL_TIM_GET_COUNTER(htim);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <HAL_TIM_IC_CaptureCallback+0x144>)
 800108e:	801a      	strh	r2, [r3, #0]
		enc_right -= (int16_t)(raw_count_right - prev_count_right);
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001096:	8811      	ldrh	r1, [r2, #0]
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	1a8a      	subs	r2, r1, r2
 800109e:	b292      	uxth	r2, r2
 80010a0:	b212      	sxth	r2, r2
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	4a24      	ldr	r2, [pc, #144]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x148>)
 80010a6:	6013      	str	r3, [r2, #0]
		d_R = (enc_right / 360.0) * (M_PI * diameter);
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x148>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9a9 	bl	8000404 <__aeabi_i2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010b8:	f7ff fb38 	bl	800072c <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	a310      	add	r3, pc, #64	; (adr r3, 8001108 <HAL_TIM_IC_CaptureCallback+0x118>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fa05 	bl	80004d8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fcaf 	bl	8000a38 <__aeabi_d2iz>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a18      	ldr	r2, [pc, #96]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x150>)
 80010de:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();
 80010e0:	f7ff ff22 	bl	8000f28 <calc_distance>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010e8:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 80010ea:	f7ff ff31 	bl	8000f50 <calc_angle>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010f2:	6013      	str	r3, [r2, #0]

		prev_count_right = raw_count_right;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_TIM_IC_CaptureCallback+0x144>)
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80010fa:	801a      	strh	r2, [r3, #0]
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	f3af 8000 	nop.w
 8001108:	2ee64e81 	.word	0x2ee64e81
 800110c:	4059eb0b 	.word	0x4059eb0b
 8001110:	40000400 	.word	0x40000400
 8001114:	20000314 	.word	0x20000314
 8001118:	200002fc 	.word	0x200002fc
 800111c:	20000318 	.word	0x20000318
 8001120:	40768000 	.word	0x40768000
 8001124:	20000304 	.word	0x20000304
 8001128:	2000030c 	.word	0x2000030c
 800112c:	20000310 	.word	0x20000310
 8001130:	40000800 	.word	0x40000800
 8001134:	20000316 	.word	0x20000316
 8001138:	20000300 	.word	0x20000300
 800113c:	2000031a 	.word	0x2000031a
 8001140:	20000308 	.word	0x20000308

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f000 fd5c 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f878 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 fa3a 	bl	80015c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001154:	f000 f90e 	bl	8001374 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001158:	f000 f8ce 	bl	80012f8 <MX_ADC1_Init>
  MX_TIM3_Init();
 800115c:	f000 f98c 	bl	8001478 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001160:	f000 f9de 	bl	8001520 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116a:	482d      	ldr	r0, [pc, #180]	; (8001220 <main+0xdc>)
 800116c:	f001 fc96 	bl	8002a9c <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001170:	2108      	movs	r1, #8
 8001172:	482c      	ldr	r0, [pc, #176]	; (8001224 <main+0xe0>)
 8001174:	f002 faba 	bl	80036ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001178:	210c      	movs	r1, #12
 800117a:	482a      	ldr	r0, [pc, #168]	; (8001224 <main+0xe0>)
 800117c:	f002 fab6 	bl	80036ec <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001180:	213c      	movs	r1, #60	; 0x3c
 8001182:	4829      	ldr	r0, [pc, #164]	; (8001228 <main+0xe4>)
 8001184:	f002 fbf6 	bl	8003974 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001188:	213c      	movs	r1, #60	; 0x3c
 800118a:	4828      	ldr	r0, [pc, #160]	; (800122c <main+0xe8>)
 800118c:	f002 fbf2 	bl	8003974 <HAL_TIM_Encoder_Start_IT>

  //HAL_Delay(10000);
  //kickstart_motors();

  motor_PWM = calc_PWM(base_v_motor);
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <main+0xec>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fea1 	bl	8000edc <calc_PWM>
 800119a:	4603      	mov	r3, r0
 800119c:	4a25      	ldr	r2, [pc, #148]	; (8001234 <main+0xf0>)
 800119e:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	4824      	ldr	r0, [pc, #144]	; (8001238 <main+0xf4>)
 80011a8:	f001 fc78 	bl	8002a9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b2:	481b      	ldr	r0, [pc, #108]	; (8001220 <main+0xdc>)
 80011b4:	f001 fc72 	bl	8002a9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <main+0xdc>)
 80011c0:	f001 fc6c 	bl	8002a9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	4815      	ldr	r0, [pc, #84]	; (8001220 <main+0xdc>)
 80011cc:	f001 fc66 	bl	8002a9c <HAL_GPIO_WritePin>

  TIM2->CCR4 = motor_PWM;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <main+0xf0>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR3 = motor_PWM;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <main+0xf0>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 if (d_center >= 1000)
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <main+0xf8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ec:	dbfa      	blt.n	80011e4 <main+0xa0>
	 {
		HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f4:	4810      	ldr	r0, [pc, #64]	; (8001238 <main+0xf4>)
 80011f6:	f001 fc51 	bl	8002a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <main+0xdc>)
 8001202:	f001 fc4b 	bl	8002a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <main+0xdc>)
 800120e:	f001 fc45 	bl	8002a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	4801      	ldr	r0, [pc, #4]	; (8001220 <main+0xdc>)
 800121a:	f001 fc3f 	bl	8002a9c <HAL_GPIO_WritePin>
	 if (d_center >= 1000)
 800121e:	e7e1      	b.n	80011e4 <main+0xa0>
 8001220:	40010c00 	.word	0x40010c00
 8001224:	20000224 	.word	0x20000224
 8001228:	2000026c 	.word	0x2000026c
 800122c:	200002b4 	.word	0x200002b4
 8001230:	2000031c 	.word	0x2000031c
 8001234:	20000320 	.word	0x20000320
 8001238:	40010800 	.word	0x40010800
 800123c:	2000030c 	.word	0x2000030c

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124a:	2228      	movs	r2, #40	; 0x28
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f003 ff61 	bl	8005116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800128c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fc18 	bl	8002acc <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012a2:	f000 fa3d 	bl	8001720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80012b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	2102      	movs	r1, #2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fe83 	bl	8002fd0 <HAL_RCC_ClockConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d0:	f000 fa26 	bl	8001720 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012d4:	2302      	movs	r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fff0 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012ea:	f000 fa19 	bl	8001720 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_ADC1_Init+0x74>)
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <MX_ADC1_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_ADC1_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_ADC1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_ADC1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_ADC1_Init+0x74>)
 8001322:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001326:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_ADC1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_ADC1_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_ADC1_Init+0x74>)
 8001336:	f000 fcc7 	bl	8001cc8 <HAL_ADC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 f9ee 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001344:	2309      	movs	r3, #9
 8001346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001348:	2301      	movs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC1_Init+0x74>)
 8001356:	f000 ff7b 	bl	8002250 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001360:	f000 f9de 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200001f4 	.word	0x200001f4
 8001370:	40012400 	.word	0x40012400

08001374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	; 0x38
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_TIM2_Init+0x100>)
 80013a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MX_TIM2_Init+0x100>)
 80013ae:	2248      	movs	r2, #72	; 0x48
 80013b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <MX_TIM2_Init+0x100>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <MX_TIM2_Init+0x100>)
 80013ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_TIM2_Init+0x100>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <MX_TIM2_Init+0x100>)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013cc:	4829      	ldr	r0, [pc, #164]	; (8001474 <MX_TIM2_Init+0x100>)
 80013ce:	f002 f8e5 	bl	800359c <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013d8:	f000 f9a2 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4822      	ldr	r0, [pc, #136]	; (8001474 <MX_TIM2_Init+0x100>)
 80013ea:	f002 fd3b 	bl	8003e64 <HAL_TIM_ConfigClockSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013f4:	f000 f994 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013f8:	481e      	ldr	r0, [pc, #120]	; (8001474 <MX_TIM2_Init+0x100>)
 80013fa:	f002 f91e 	bl	800363a <HAL_TIM_PWM_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001404:	f000 f98c 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	4619      	mov	r1, r3
 8001416:	4817      	ldr	r0, [pc, #92]	; (8001474 <MX_TIM2_Init+0x100>)
 8001418:	f003 f8aa 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001422:	f000 f97d 	bl	8001720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001426:	2360      	movs	r3, #96	; 0x60
 8001428:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1024;
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2208      	movs	r2, #8
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM2_Init+0x100>)
 8001440:	f002 fc4e 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800144a:	f000 f969 	bl	8001720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	220c      	movs	r2, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM2_Init+0x100>)
 8001456:	f002 fc43 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001460:	f000 f95e 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM2_Init+0x100>)
 8001466:	f000 fa87 	bl	8001978 <HAL_TIM_MspPostInit>

}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	; 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000224 	.word	0x20000224

08001478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fe45 	bl	8005116 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_TIM3_Init+0xa0>)
 8001496:	4a21      	ldr	r2, [pc, #132]	; (800151c <MX_TIM3_Init+0xa4>)
 8001498:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_TIM3_Init+0xa0>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_TIM3_Init+0xa0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_TIM3_Init+0xa0>)
 80014a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_TIM3_Init+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_TIM3_Init+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ba:	2303      	movs	r3, #3
 80014bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d2:	2301      	movs	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <MX_TIM3_Init+0xa0>)
 80014e6:	f002 f9a3 	bl	8003830 <HAL_TIM_Encoder_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014f0:	f000 f916 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_TIM3_Init+0xa0>)
 8001502:	f003 f835 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800150c:	f000 f908 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	3730      	adds	r7, #48	; 0x30
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000026c 	.word	0x2000026c
 800151c:	40000400 	.word	0x40000400

08001520 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	2224      	movs	r2, #36	; 0x24
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fdf1 	bl	8005116 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_TIM4_Init+0xa0>)
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <MX_TIM4_Init+0xa4>)
 8001540:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_TIM4_Init+0xa0>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_TIM4_Init+0xa0>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MX_TIM4_Init+0xa0>)
 8001550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001554:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_TIM4_Init+0xa0>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_TIM4_Init+0xa0>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001562:	2303      	movs	r3, #3
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001566:	2302      	movs	r3, #2
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800156a:	2301      	movs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800157a:	2301      	movs	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_TIM4_Init+0xa0>)
 800158e:	f002 f94f 	bl	8003830 <HAL_TIM_Encoder_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 f8c2 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_TIM4_Init+0xa0>)
 80015aa:	f002 ffe1 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015b4:	f000 f8b4 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200002b4 	.word	0x200002b4
 80015c4:	40000800 	.word	0x40000800

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <MX_GPIO_Init+0xb8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <MX_GPIO_Init+0xb8>)
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <MX_GPIO_Init+0xb8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_GPIO_Init+0xb8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <MX_GPIO_Init+0xb8>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_GPIO_Init+0xb8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <MX_GPIO_Init+0xb8>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <MX_GPIO_Init+0xb8>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MX_GPIO_Init+0xb8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_BWD_Pin
 8001624:	2200      	movs	r2, #0
 8001626:	f64f 5120 	movw	r1, #64800	; 0xfd20
 800162a:	4816      	ldr	r0, [pc, #88]	; (8001684 <MX_GPIO_Init+0xbc>)
 800162c:	f001 fa36 	bl	8002a9c <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_FWD_Pin|EMIT_FR_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <MX_GPIO_Init+0xc0>)
 8001638:	f001 fa30 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_BWD_Pin
                           ML_BWD_Pin MR_FWD_Pin EMIT_FR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_BWD_Pin
 800163c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001640:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_FWD_Pin|EMIT_FR_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2302      	movs	r3, #2
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4619      	mov	r1, r3
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <MX_GPIO_Init+0xbc>)
 8001656:	f001 f89d 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ML_FWD_Pin */
  GPIO_InitStruct.Pin = ML_FWD_Pin;
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2302      	movs	r3, #2
 800166a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_GPIO_Init+0xc0>)
 8001674:	f001 f88e 	bl	8002794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	40010c00 	.word	0x40010c00
 8001688:	40010800 	.word	0x40010800

0800168c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e009      	b.n	80016b2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	60ba      	str	r2, [r7, #8]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbb4 	bl	8000e14 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbf1      	blt.n	800169e <_write+0x12>
  }
  return len;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <ADC1_Select_CH1>:

static void ADC1_Select_CH1(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d8:	2301      	movs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80016dc:	2301      	movs	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <ADC1_Select_CH1+0x38>)
 80016e6:	f000 fdb3 	bl	8002250 <HAL_ADC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <ADC1_Select_CH1+0x30>
	{
		Error_Handler();
 80016f0:	f000 f816 	bl	8001720 <Error_Handler>
	}
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200001f4 	.word	0x200001f4

08001700 <HAL_TIM_PeriodElapsedCallback>:
	{
		Error_Handler();
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
//		TIM2->CCR3 = new_PWM;
//
//		prev_d_center = d_center;
	}

	time_count++;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	2000032c 	.word	0x2000032c

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001728:	e7fe      	b.n	8001728 <Error_Handler+0x8>
	...

0800172c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_MspInit+0x5c>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_MspInit+0x5c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_MspInit+0x5c>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x5c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_MspInit+0x5c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_MspInit+0x5c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_MspInit+0x60>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_MspInit+0x60>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000

08001790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_ADC_MspInit+0x98>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d137      	bne.n	8001820 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_ADC_MspInit+0x9c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_METER_Pin|RECIV_FR_Pin|RECIV_R_Pin;
 80017f8:	2332      	movs	r3, #50	; 0x32
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fc:	2303      	movs	r3, #3
 80017fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	4619      	mov	r1, r3
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <HAL_ADC_MspInit+0xa0>)
 8001808:	f000 ffc4 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 800180c:	2303      	movs	r3, #3
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001810:	2303      	movs	r3, #3
 8001812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	4619      	mov	r1, r3
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <HAL_ADC_MspInit+0xa4>)
 800181c:	f000 ffba 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40012400 	.word	0x40012400
 800182c:	40021000 	.word	0x40021000
 8001830:	40010800 	.word	0x40010800
 8001834:	40010c00 	.word	0x40010c00

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d113      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_TIM_Base_MspInit+0x44>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <HAL_TIM_Base_MspInit+0x44>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_TIM_Base_MspInit+0x44>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	201c      	movs	r0, #28
 8001868:	f000 ff5d 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186c:	201c      	movs	r0, #28
 800186e:	f000 ff76 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HAL_TIM_Encoder_MspInit+0xe4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d12c      	bne.n	80018fa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	61d3      	str	r3, [r2, #28]
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 80018d0:	23c0      	movs	r3, #192	; 0xc0
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4822      	ldr	r0, [pc, #136]	; (800196c <HAL_TIM_Encoder_MspInit+0xec>)
 80018e4:	f000 ff56 	bl	8002794 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	201d      	movs	r0, #29
 80018ee:	f000 ff1a 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f2:	201d      	movs	r0, #29
 80018f4:	f000 ff33 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018f8:	e030      	b.n	800195c <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d12b      	bne.n	800195c <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	61d3      	str	r3, [r2, #28]
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_TIM_Encoder_MspInit+0xe8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	480b      	ldr	r0, [pc, #44]	; (8001974 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001948:	f000 ff24 	bl	8002794 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	201e      	movs	r0, #30
 8001952:	f000 fee8 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001956:	201e      	movs	r0, #30
 8001958:	f000 ff01 	bl	800275e <HAL_NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40000400 	.word	0x40000400
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800
 8001970:	40000800 	.word	0x40000800
 8001974:	40010c00 	.word	0x40010c00

08001978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001996:	d117      	bne.n	80019c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_TIM_MspPostInit+0x58>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <HAL_TIM_MspPostInit+0x58>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_TIM_MspPostInit+0x58>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 80019b0:	230c      	movs	r3, #12
 80019b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4619      	mov	r1, r3
 80019c2:	4804      	ldr	r0, [pc, #16]	; (80019d4 <HAL_TIM_MspPostInit+0x5c>)
 80019c4:	f000 fee6 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010800 	.word	0x40010800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1e:	f000 f937 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM2_IRQHandler+0x10>)
 8001a2e:	f002 f84f 	bl	8003ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000224 	.word	0x20000224

08001a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM3_IRQHandler+0x10>)
 8001a42:	f002 f845 	bl	8003ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000026c 	.word	0x2000026c

08001a50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM4_IRQHandler+0x10>)
 8001a56:	f002 f83b 	bl	8003ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002b4 	.word	0x200002b4

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <_kill>:

int _kill(int pid, int sig)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7c:	f003 fb9e 	bl	80051bc <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2216      	movs	r2, #22
 8001a84:	601a      	str	r2, [r3, #0]
  return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_exit>:

void _exit (int status)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffe7 	bl	8001a72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa4:	e7fe      	b.n	8001aa4 <_exit+0x12>

08001aa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e00a      	b.n	8001ace <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab8:	f3af 8000 	nop.w
 8001abc:	4601      	mov	r1, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60ba      	str	r2, [r7, #8]
 8001ac4:	b2ca      	uxtb	r2, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf0      	blt.n	8001ab8 <_read+0x12>
  }

  return len;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b06:	605a      	str	r2, [r3, #4]
  return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <_isatty>:

int _isatty(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f003 fb24 	bl	80051bc <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20005000 	.word	0x20005000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	20000330 	.word	0x20000330
 8001ba8:	20000488 	.word	0x20000488

08001bac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb8:	f7ff fff8 	bl	8001bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bbe:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bd4:	4c09      	ldr	r4, [pc, #36]	; (8001bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be2:	f003 faf1 	bl	80051c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be6:	f7ff faad 	bl	8001144 <main>
  bx lr
 8001bea:	4770      	bx	lr
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001bf4:	0800736c 	.word	0x0800736c
  ldr r2, =_sbss
 8001bf8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001bfc:	20000484 	.word	0x20000484

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_Init+0x28>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_Init+0x28>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 fd7b 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fd84 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fd93 	bl	800277a <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 fd5b 	bl	8002726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000004 	.word	0x20000004
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	20000008 	.word	0x20000008

08001c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x1c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_IncTick+0x20>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	2000000c 	.word	0x2000000c
 8001cb0:	20000334 	.word	0x20000334

08001cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_GetTick+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000334 	.word	0x20000334

08001cc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0be      	b.n	8001e68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fd42 	bl	8001790 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fbf1 	bl	80024f4 <ADC_ConversionStop_Disable>
 8001d12:	4603      	mov	r3, r0
 8001d14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 8099 	bne.w	8001e56 <HAL_ADC_Init+0x18e>
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8095 	bne.w	8001e56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d34:	f023 0302 	bic.w	r3, r3, #2
 8001d38:	f043 0202 	orr.w	r2, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7b1b      	ldrb	r3, [r3, #12]
 8001d4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d60:	d003      	beq.n	8001d6a <HAL_ADC_Init+0xa2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_ADC_Init+0xa8>
 8001d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_Init+0xaa>
 8001d70:	2300      	movs	r3, #0
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7d1b      	ldrb	r3, [r3, #20]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d119      	bne.n	8001db4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7b1b      	ldrb	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	035a      	lsls	r2, r3, #13
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e00b      	b.n	8001db4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_ADC_Init+0x1a8>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de4:	d003      	beq.n	8001dee <HAL_ADC_Init+0x126>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d104      	bne.n	8001df8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_ADC_Init+0x1ac>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d10b      	bne.n	8001e34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e32:	e018      	b.n	8001e66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f023 0312 	bic.w	r3, r3, #18
 8001e3c:	f043 0210 	orr.w	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e54:	e007      	b.n	8001e66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	ffe1f7fd 	.word	0xffe1f7fd
 8001e74:	ff1f0efe 	.word	0xff1f0efe

08001e78 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Start+0x1a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e098      	b.n	8001fc4 <HAL_ADC_Start+0x14c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fad0 	bl	8002440 <ADC_Enable>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 8087 	bne.w	8001fba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <HAL_ADC_Start+0x154>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d105      	bne.n	8001ed6 <HAL_ADC_Start+0x5e>
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_ADC_Start+0x158>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d115      	bne.n	8001f02 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d026      	beq.n	8001f3e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f00:	e01d      	b.n	8001f3e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <HAL_ADC_Start+0x158>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_Start+0xaa>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <HAL_ADC_Start+0x154>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10d      	bne.n	8001f3e <HAL_ADC_Start+0xc6>
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_ADC_Start+0x158>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f023 0206 	bic.w	r2, r3, #6
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f56:	e002      	b.n	8001f5e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0202 	mvn.w	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f7a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f7e:	d113      	bne.n	8001fa8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_ADC_Start+0x154>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d105      	bne.n	8001f96 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_ADC_Start+0x158>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	e00c      	b.n	8001fc2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e003      	b.n	8001fc2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40012800 	.word	0x40012800
 8001fd0:	40012400 	.word	0x40012400

08001fd4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Stop+0x1a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e01a      	b.n	8002024 <HAL_ADC_Stop+0x50>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fa7c 	bl	80024f4 <ADC_ConversionStop_Disable>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002042:	f7ff fe37 	bl	8001cb4 <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f043 0220 	orr.w	r2, r3, #32
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0d3      	b.n	8002216 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d131      	bne.n	80020e0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d12a      	bne.n	80020e0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800208a:	e021      	b.n	80020d0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d01d      	beq.n	80020d0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_ADC_PollForConversion+0x7e>
 800209a:	f7ff fe0b 	bl	8001cb4 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d212      	bcs.n	80020d0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0a2      	b.n	8002216 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0d6      	beq.n	800208c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020de:	e070      	b.n	80021c2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_ADC_PollForConversion+0x1f4>)
 80020e2:	681c      	ldr	r4, [r3, #0]
 80020e4:	2002      	movs	r0, #2
 80020e6:	f001 f9a3 	bl	8003430 <HAL_RCCEx_GetPeriphCLKFreq>
 80020ea:	4603      	mov	r3, r0
 80020ec:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_ADC_PollForConversion+0x1f8>)
 80020f8:	400b      	ands	r3, r1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_ADC_PollForConversion+0x104>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68d9      	ldr	r1, [r3, #12]
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_ADC_PollForConversion+0x1fc>)
 8002106:	400b      	ands	r3, r1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d111      	bne.n	8002130 <HAL_ADC_PollForConversion+0x104>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6919      	ldr	r1, [r3, #16]
 8002112:	4b46      	ldr	r3, [pc, #280]	; (800222c <HAL_ADC_PollForConversion+0x200>)
 8002114:	400b      	ands	r3, r1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_ADC_PollForConversion+0x100>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68d9      	ldr	r1, [r3, #12]
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_ADC_PollForConversion+0x204>)
 8002122:	400b      	ands	r3, r1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_PollForConversion+0x100>
 8002128:	2314      	movs	r3, #20
 800212a:	e020      	b.n	800216e <HAL_ADC_PollForConversion+0x142>
 800212c:	2329      	movs	r3, #41	; 0x29
 800212e:	e01e      	b.n	800216e <HAL_ADC_PollForConversion+0x142>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6919      	ldr	r1, [r3, #16]
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_ADC_PollForConversion+0x200>)
 8002138:	400b      	ands	r3, r1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_ADC_PollForConversion+0x120>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	4b3a      	ldr	r3, [pc, #232]	; (8002230 <HAL_ADC_PollForConversion+0x204>)
 8002146:	400b      	ands	r3, r1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_ADC_PollForConversion+0x13c>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_ADC_PollForConversion+0x208>)
 8002154:	400b      	ands	r3, r1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_ADC_PollForConversion+0x140>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68d9      	ldr	r1, [r3, #12]
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_ADC_PollForConversion+0x208>)
 8002162:	400b      	ands	r3, r1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_ADC_PollForConversion+0x140>
 8002168:	2354      	movs	r3, #84	; 0x54
 800216a:	e000      	b.n	800216e <HAL_ADC_PollForConversion+0x142>
 800216c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002174:	e021      	b.n	80021ba <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d01a      	beq.n	80021b4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_ADC_PollForConversion+0x168>
 8002184:	f7ff fd96 	bl	8001cb4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d20f      	bcs.n	80021b4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d90b      	bls.n	80021b4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f043 0204 	orr.w	r2, r3, #4
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e030      	b.n	8002216 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d8d9      	bhi.n	8002176 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0212 	mvn.w	r2, #18
 80021ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021e6:	d115      	bne.n	8002214 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d111      	bne.n	8002214 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd90      	pop	{r4, r7, pc}
 800221e:	bf00      	nop
 8002220:	20000004 	.word	0x20000004
 8002224:	24924924 	.word	0x24924924
 8002228:	00924924 	.word	0x00924924
 800222c:	12492492 	.word	0x12492492
 8002230:	00492492 	.word	0x00492492
 8002234:	00249249 	.word	0x00249249

08002238 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x20>
 800226c:	2302      	movs	r3, #2
 800226e:	e0dc      	b.n	800242a <HAL_ADC_ConfigChannel+0x1da>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b06      	cmp	r3, #6
 800227e:	d81c      	bhi.n	80022ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	3b05      	subs	r3, #5
 8002292:	221f      	movs	r2, #31
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	4019      	ands	r1, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b05      	subs	r3, #5
 80022ac:	fa00 f203 	lsl.w	r2, r0, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
 80022b8:	e03c      	b.n	8002334 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d81c      	bhi.n	80022fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b23      	subs	r3, #35	; 0x23
 80022d4:	221f      	movs	r2, #31
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	4019      	ands	r1, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	3b23      	subs	r3, #35	; 0x23
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
 80022fa:	e01b      	b.n	8002334 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b41      	subs	r3, #65	; 0x41
 800230e:	221f      	movs	r2, #31
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	4019      	ands	r1, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	3b41      	subs	r3, #65	; 0x41
 8002328:	fa00 f203 	lsl.w	r2, r0, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b09      	cmp	r3, #9
 800233a:	d91c      	bls.n	8002376 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	3b1e      	subs	r3, #30
 800234e:	2207      	movs	r2, #7
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	4019      	ands	r1, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6898      	ldr	r0, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	3b1e      	subs	r3, #30
 8002368:	fa00 f203 	lsl.w	r2, r0, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	e019      	b.n	80023aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6919      	ldr	r1, [r3, #16]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	2207      	movs	r2, #7
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	4019      	ands	r1, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6898      	ldr	r0, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	fa00 f203 	lsl.w	r2, r0, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d003      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023b6:	2b11      	cmp	r3, #17
 80023b8:	d132      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_ADC_ConfigChannel+0x1e4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d125      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d126      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d11a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_ADC_ConfigChannel+0x1e8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_ADC_ConfigChannel+0x1ec>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	0c9a      	lsrs	r2, r3, #18
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002400:	e002      	b.n	8002408 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3b01      	subs	r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f9      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x1b2>
 800240e:	e007      	b.n	8002420 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40012400 	.word	0x40012400
 8002438:	20000004 	.word	0x20000004
 800243c:	431bde83 	.word	0x431bde83

08002440 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d040      	beq.n	80024e0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <ADC_Enable+0xac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <ADC_Enable+0xb0>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	0c9b      	lsrs	r3, r3, #18
 800247a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800247c:	e002      	b.n	8002484 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3b01      	subs	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f9      	bne.n	800247e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800248a:	f7ff fc13 	bl	8001cb4 <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002490:	e01f      	b.n	80024d2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002492:	f7ff fc0f 	bl	8001cb4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d918      	bls.n	80024d2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d011      	beq.n	80024d2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d1d8      	bne.n	8002492 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000004 	.word	0x20000004
 80024f0:	431bde83 	.word	0x431bde83

080024f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d12e      	bne.n	800256c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800251e:	f7ff fbc9 	bl	8001cb4 <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002524:	e01b      	b.n	800255e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002526:	f7ff fbc5 	bl	8001cb4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d914      	bls.n	800255e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10d      	bne.n	800255e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e007      	b.n	800256e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d0dc      	beq.n	8002526 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <__NVIC_SetPriorityGrouping>:
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4906      	ldr	r1, [pc, #24]	; (8002610 <__NVIC_EnableIRQ+0x34>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <SysTick_Config>:
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f7ff ff90 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff2d 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff42 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff90 	bl	8002668 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5f 	bl	8002614 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff35 	bl	80025dc <__NVIC_EnableIRQ>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ffa2 	bl	80026cc <SysTick_Config>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b08b      	sub	sp, #44	; 0x2c
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a6:	e169      	b.n	8002a7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027a8:	2201      	movs	r2, #1
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 8158 	bne.w	8002a76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a9a      	ldr	r2, [pc, #616]	; (8002a34 <HAL_GPIO_Init+0x2a0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d05e      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027d0:	4a98      	ldr	r2, [pc, #608]	; (8002a34 <HAL_GPIO_Init+0x2a0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d875      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027d6:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <HAL_GPIO_Init+0x2a4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d058      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027dc:	4a96      	ldr	r2, [pc, #600]	; (8002a38 <HAL_GPIO_Init+0x2a4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d86f      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027e2:	4a96      	ldr	r2, [pc, #600]	; (8002a3c <HAL_GPIO_Init+0x2a8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d052      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027e8:	4a94      	ldr	r2, [pc, #592]	; (8002a3c <HAL_GPIO_Init+0x2a8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d869      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027ee:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <HAL_GPIO_Init+0x2ac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04c      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027f4:	4a92      	ldr	r2, [pc, #584]	; (8002a40 <HAL_GPIO_Init+0x2ac>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d863      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027fa:	4a92      	ldr	r2, [pc, #584]	; (8002a44 <HAL_GPIO_Init+0x2b0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d046      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 8002800:	4a90      	ldr	r2, [pc, #576]	; (8002a44 <HAL_GPIO_Init+0x2b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d85d      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 8002806:	2b12      	cmp	r3, #18
 8002808:	d82a      	bhi.n	8002860 <HAL_GPIO_Init+0xcc>
 800280a:	2b12      	cmp	r3, #18
 800280c:	d859      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 800280e:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <HAL_GPIO_Init+0x80>)
 8002810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002814:	0800288f 	.word	0x0800288f
 8002818:	08002869 	.word	0x08002869
 800281c:	0800287b 	.word	0x0800287b
 8002820:	080028bd 	.word	0x080028bd
 8002824:	080028c3 	.word	0x080028c3
 8002828:	080028c3 	.word	0x080028c3
 800282c:	080028c3 	.word	0x080028c3
 8002830:	080028c3 	.word	0x080028c3
 8002834:	080028c3 	.word	0x080028c3
 8002838:	080028c3 	.word	0x080028c3
 800283c:	080028c3 	.word	0x080028c3
 8002840:	080028c3 	.word	0x080028c3
 8002844:	080028c3 	.word	0x080028c3
 8002848:	080028c3 	.word	0x080028c3
 800284c:	080028c3 	.word	0x080028c3
 8002850:	080028c3 	.word	0x080028c3
 8002854:	080028c3 	.word	0x080028c3
 8002858:	08002871 	.word	0x08002871
 800285c:	08002885 	.word	0x08002885
 8002860:	4a79      	ldr	r2, [pc, #484]	; (8002a48 <HAL_GPIO_Init+0x2b4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002866:	e02c      	b.n	80028c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	623b      	str	r3, [r7, #32]
          break;
 800286e:	e029      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e024      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	3308      	adds	r3, #8
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e01f      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	330c      	adds	r3, #12
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e01a      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002896:	2304      	movs	r3, #4
 8002898:	623b      	str	r3, [r7, #32]
          break;
 800289a:	e013      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a4:	2308      	movs	r3, #8
 80028a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	611a      	str	r2, [r3, #16]
          break;
 80028ae:	e009      	b.n	80028c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b0:	2308      	movs	r3, #8
 80028b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	615a      	str	r2, [r3, #20]
          break;
 80028ba:	e003      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
          break;
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          break;
 80028c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2bff      	cmp	r3, #255	; 0xff
 80028c8:	d801      	bhi.n	80028ce <HAL_GPIO_Init+0x13a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	e001      	b.n	80028d2 <HAL_GPIO_Init+0x13e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2bff      	cmp	r3, #255	; 0xff
 80028d8:	d802      	bhi.n	80028e0 <HAL_GPIO_Init+0x14c>
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	e002      	b.n	80028e6 <HAL_GPIO_Init+0x152>
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3b08      	subs	r3, #8
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	210f      	movs	r1, #15
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	431a      	orrs	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80b1 	beq.w	8002a76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002914:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800292c:	4a48      	ldr	r2, [pc, #288]	; (8002a50 <HAL_GPIO_Init+0x2bc>)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <HAL_GPIO_Init+0x2c0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_GPIO_Init+0x1ec>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <HAL_GPIO_Init+0x2c4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00d      	beq.n	800297c <HAL_GPIO_Init+0x1e8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3d      	ldr	r2, [pc, #244]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_GPIO_Init+0x1e0>
 8002970:	2303      	movs	r3, #3
 8002972:	e006      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002974:	2304      	movs	r3, #4
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002978:	2302      	movs	r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002980:	2300      	movs	r3, #0
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002992:	492f      	ldr	r1, [pc, #188]	; (8002a50 <HAL_GPIO_Init+0x2bc>)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	492c      	ldr	r1, [pc, #176]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4928      	ldr	r1, [pc, #160]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	4922      	ldr	r1, [pc, #136]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60cb      	str	r3, [r1, #12]
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	491e      	ldr	r1, [pc, #120]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4918      	ldr	r1, [pc, #96]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	4914      	ldr	r1, [pc, #80]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d021      	beq.n	8002a68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	490e      	ldr	r1, [pc, #56]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e021      	b.n	8002a76 <HAL_GPIO_Init+0x2e2>
 8002a32:	bf00      	nop
 8002a34:	10320000 	.word	0x10320000
 8002a38:	10310000 	.word	0x10310000
 8002a3c:	10220000 	.word	0x10220000
 8002a40:	10210000 	.word	0x10210000
 8002a44:	10120000 	.word	0x10120000
 8002a48:	10110000 	.word	0x10110000
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40010800 	.word	0x40010800
 8002a58:	40010c00 	.word	0x40010c00
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	3301      	adds	r3, #1
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f ae8e 	bne.w	80027a8 <HAL_GPIO_Init+0x14>
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	372c      	adds	r7, #44	; 0x2c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ab8:	e003      	b.n	8002ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e272      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8087 	beq.w	8002bfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aec:	4b92      	ldr	r3, [pc, #584]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d00c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af8:	4b8f      	ldr	r3, [pc, #572]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d112      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5e>
 8002b04:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d10b      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b12:	4b89      	ldr	r3, [pc, #548]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d06c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x12c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d168      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e24c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x76>
 8002b34:	4b80      	ldr	r3, [pc, #512]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a7f      	ldr	r2, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e02e      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x98>
 8002b4a:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7a      	ldr	r2, [pc, #488]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0xbc>
 8002b6e:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a71      	ldr	r2, [pc, #452]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6e      	ldr	r2, [pc, #440]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f884 	bl	8001cb4 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7ff f880 	bl	8001cb4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e200      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xe4>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f870 	bl	8001cb4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f86c 	bl	8001cb4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1ec      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x10c>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d11c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x18c>
 8002c1e:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x176>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1c0      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4939      	ldr	r1, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	e03a      	b.n	8002cce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7ff f825 	bl	8001cb4 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7ff f821 	bl	8001cb4 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1a1      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4927      	ldr	r1, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f804 	bl	8001cb4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7ff f800 	bl	8001cb4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e180      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03a      	beq.n	8002d50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d019      	beq.n	8002d16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe ffe4 	bl	8001cb4 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe ffe0 	bl	8001cb4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e160      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f000 faba 	bl	8003288 <RCC_Delay>
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe ffca 	bl	8001cb4 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d22:	e00f      	b.n	8002d44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fe ffc6 	bl	8001cb4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d908      	bls.n	8002d44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e146      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	42420000 	.word	0x42420000
 8002d40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b92      	ldr	r3, [pc, #584]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e9      	bne.n	8002d24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80a6 	beq.w	8002eaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b8b      	ldr	r3, [pc, #556]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4a87      	ldr	r2, [pc, #540]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	61d3      	str	r3, [r2, #28]
 8002d7a:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b82      	ldr	r3, [pc, #520]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b7f      	ldr	r3, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7e      	ldr	r2, [pc, #504]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fe ff87 	bl	8001cb4 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fe ff83 	bl	8001cb4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b64      	cmp	r3, #100	; 0x64
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e103      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x312>
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4a6e      	ldr	r2, [pc, #440]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6213      	str	r3, [r2, #32]
 8002ddc:	e02d      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x334>
 8002de6:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6213      	str	r3, [r2, #32]
 8002df2:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4a66      	ldr	r2, [pc, #408]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6213      	str	r3, [r2, #32]
 8002dfe:	e01c      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d10c      	bne.n	8002e22 <HAL_RCC_OscConfig+0x356>
 8002e08:	4b61      	ldr	r3, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a60      	ldr	r2, [pc, #384]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	4b5e      	ldr	r3, [pc, #376]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a5d      	ldr	r2, [pc, #372]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	e00b      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002e22:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	6213      	str	r3, [r2, #32]
 8002e2e:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a57      	ldr	r2, [pc, #348]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fe ff37 	bl	8001cb4 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe ff33 	bl	8001cb4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0b1      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ee      	beq.n	8002e4a <HAL_RCC_OscConfig+0x37e>
 8002e6c:	e014      	b.n	8002e98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe ff21 	bl	8001cb4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe ff1d 	bl	8001cb4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e09b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ee      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a3b      	ldr	r2, [pc, #236]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8087 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d061      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d146      	bne.n	8002f56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fef1 	bl	8001cb4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe feed 	bl	8001cb4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e06d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d108      	bne.n	8002f10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4921      	ldr	r1, [pc, #132]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a19      	ldr	r1, [r3, #32]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	430b      	orrs	r3, r1
 8002f22:	491b      	ldr	r1, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x4cc>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fec1 	bl	8001cb4 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe febd 	bl	8001cb4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e03d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46a>
 8002f54:	e035      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe feaa 	bl	8001cb4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe fea6 	bl	8001cb4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e026      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x498>
 8002f82:	e01e      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e019      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
 8002f98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x500>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0d0      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4965      	ldr	r1, [pc, #404]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800304e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d040      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e073      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06b      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4936      	ldr	r1, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7fe fdf8 	bl	8001cb4 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fe fdf4 	bl	8001cb4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e053      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d210      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4922      	ldr	r1, [pc, #136]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f821 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003162:	4602      	mov	r2, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	490a      	ldr	r1, [pc, #40]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1cc>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x1d0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fd56 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40021000 	.word	0x40021000
 8003198:	08006fb8 	.word	0x08006fb8
 800319c:	20000004 	.word	0x20000004
 80031a0:	20000008 	.word	0x20000008

080031a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_RCC_GetSysClockFreq+0x94>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x30>
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d003      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x36>
 80031d2:	e027      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_RCC_GetSysClockFreq+0x98>)
 80031d6:	613b      	str	r3, [r7, #16]
      break;
 80031d8:	e027      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	0c9b      	lsrs	r3, r3, #18
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_GetSysClockFreq+0x94>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	0c5b      	lsrs	r3, r3, #17
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <HAL_RCC_GetSysClockFreq+0x98>)
 8003206:	fb03 f202 	mul.w	r2, r3, r2
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e004      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	613b      	str	r3, [r7, #16]
      break;
 8003222:	e002      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetSysClockFreq+0x98>)
 8003226:	613b      	str	r3, [r7, #16]
      break;
 8003228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800322a:	693b      	ldr	r3, [r7, #16]
}
 800322c:	4618      	mov	r0, r3
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	007a1200 	.word	0x007a1200
 8003240:	08006fd0 	.word	0x08006fd0
 8003244:	08006fe0 	.word	0x08006fe0
 8003248:	003d0900 	.word	0x003d0900

0800324c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003250:	4b02      	ldr	r3, [pc, #8]	; (800325c <HAL_RCC_GetHCLKFreq+0x10>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff fff2 	bl	800324c <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	0adb      	lsrs	r3, r3, #11
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	08006fc8 	.word	0x08006fc8

08003288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <RCC_Delay+0x34>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <RCC_Delay+0x38>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0a5b      	lsrs	r3, r3, #9
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032a4:	bf00      	nop
  }
  while (Delay --);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	60fa      	str	r2, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f9      	bne.n	80032a4 <RCC_Delay+0x1c>
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	20000004 	.word	0x20000004
 80032c0:	10624dd3 	.word	0x10624dd3

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d07d      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e4:	4b4f      	ldr	r3, [pc, #316]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	4a4b      	ldr	r2, [pc, #300]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fa:	61d3      	str	r3, [r2, #28]
 80032fc:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003308:	2301      	movs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	4b46      	ldr	r3, [pc, #280]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d118      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a42      	ldr	r2, [pc, #264]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003324:	f7fe fcc6 	bl	8001cb4 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	e008      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332c:	f7fe fcc2 	bl	8001cb4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e06d      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800334a:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02e      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d027      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003370:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003372:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003378:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800337e:	4a29      	ldr	r2, [pc, #164]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7fe fc91 	bl	8001cb4 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	e00a      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fe fc8d 	bl	8001cb4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e036      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ee      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4917      	ldr	r1, [pc, #92]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4a13      	ldr	r2, [pc, #76]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	490b      	ldr	r1, [pc, #44]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	4904      	ldr	r1, [pc, #16]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	40007000 	.word	0x40007000
 800342c:	42420440 	.word	0x42420440

08003430 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b10      	cmp	r3, #16
 8003456:	f200 808a 	bhi.w	800356e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d045      	beq.n	80034ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d075      	beq.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003466:	e082      	b.n	800356e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003468:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800346e:	4b45      	ldr	r3, [pc, #276]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d07b      	beq.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0c9b      	lsrs	r3, r3, #18
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	4a41      	ldr	r2, [pc, #260]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d015      	beq.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	0c5b      	lsrs	r3, r3, #17
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	4a3b      	ldr	r2, [pc, #236]	; (800358c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80034ac:	4a38      	ldr	r2, [pc, #224]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e004      	b.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4a34      	ldr	r2, [pc, #208]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034c8:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d4:	d102      	bne.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	61bb      	str	r3, [r7, #24]
      break;
 80034da:	e04a      	b.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
      break;
 80034ea:	e042      	b.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fc:	d108      	bne.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e01f      	b.n	8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351a:	d109      	bne.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800351c:	4b19      	ldr	r3, [pc, #100]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003528:	f649 4340 	movw	r3, #40000	; 0x9c40
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e00f      	b.n	8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800353a:	d11c      	bne.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d016      	beq.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003548:	f24f 4324 	movw	r3, #62500	; 0xf424
 800354c:	61bb      	str	r3, [r7, #24]
      break;
 800354e:	e012      	b.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003550:	e011      	b.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003552:	f7ff fe85 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	0b9b      	lsrs	r3, r3, #14
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	3301      	adds	r3, #1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	61bb      	str	r3, [r7, #24]
      break;
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003576:	bf00      	nop
    }
  }
  return (frequency);
 8003578:	69bb      	ldr	r3, [r7, #24]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	08006fe4 	.word	0x08006fe4
 800358c:	08006ff4 	.word	0x08006ff4
 8003590:	007a1200 	.word	0x007a1200
 8003594:	003d0900 	.word	0x003d0900
 8003598:	aaaaaaab 	.word	0xaaaaaaab

0800359c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e041      	b.n	8003632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe f938 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f000 fd24 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e041      	b.n	80036d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f839 	bl	80036d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f000 fcd5 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_TIM_PWM_Start+0x24>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e022      	b.n	8003756 <HAL_TIM_PWM_Start+0x6a>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b04      	cmp	r3, #4
 8003714:	d109      	bne.n	800372a <HAL_TIM_PWM_Start+0x3e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e015      	b.n	8003756 <HAL_TIM_PWM_Start+0x6a>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d109      	bne.n	8003744 <HAL_TIM_PWM_Start+0x58>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e008      	b.n	8003756 <HAL_TIM_PWM_Start+0x6a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e05e      	b.n	800381c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <HAL_TIM_PWM_Start+0x82>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376c:	e013      	b.n	8003796 <HAL_TIM_PWM_Start+0xaa>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Start+0x92>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800377c:	e00b      	b.n	8003796 <HAL_TIM_PWM_Start+0xaa>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d104      	bne.n	800378e <HAL_TIM_PWM_Start+0xa2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800378c:	e003      	b.n	8003796 <HAL_TIM_PWM_Start+0xaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2201      	movs	r2, #1
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fec2 	bl	8004528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_TIM_PWM_Start+0x138>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d107      	bne.n	80037be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_TIM_PWM_Start+0x138>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIM_PWM_Start+0xfa>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d009      	beq.n	80037e6 <HAL_TIM_PWM_Start+0xfa>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <HAL_TIM_PWM_Start+0x13c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIM_PWM_Start+0xfa>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a12      	ldr	r2, [pc, #72]	; (800382c <HAL_TIM_PWM_Start+0x140>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d111      	bne.n	800380a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d010      	beq.n	800381a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	e007      	b.n	800381a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800

08003830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e093      	b.n	800396c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fe f811 	bl	8001880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003874:	f023 0307 	bic.w	r3, r3, #7
 8003878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 fbcf 	bl	8004028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	4313      	orrs	r3, r2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038d0:	f023 030c 	bic.w	r3, r3, #12
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	4313      	orrs	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	011a      	lsls	r2, r3, #4
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	031b      	lsls	r3, r3, #12
 8003900:	4313      	orrs	r3, r2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003984:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800398c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003994:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800399c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d110      	bne.n	80039c6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039aa:	7b7b      	ldrb	r3, [r7, #13]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d001      	beq.n	80039b4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e089      	b.n	8003ac8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c4:	e031      	b.n	8003a2a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d110      	bne.n	80039ee <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039cc:	7bbb      	ldrb	r3, [r7, #14]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039d2:	7b3b      	ldrb	r3, [r7, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d001      	beq.n	80039dc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e075      	b.n	8003ac8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ec:	e01d      	b.n	8003a2a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d108      	bne.n	8003a06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039fa:	7b7b      	ldrb	r3, [r7, #13]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a00:	7b3b      	ldrb	r3, [r7, #12]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d001      	beq.n	8003a0a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e05e      	b.n	8003ac8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d010      	beq.n	8003a58 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003a36:	e01f      	b.n	8003a78 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd71 	bl	8004528 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0202 	orr.w	r2, r2, #2
 8003a54:	60da      	str	r2, [r3, #12]
      break;
 8003a56:	e02e      	b.n	8003ab6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2104      	movs	r1, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fd61 	bl	8004528 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0204 	orr.w	r2, r2, #4
 8003a74:	60da      	str	r2, [r3, #12]
      break;
 8003a76:	e01e      	b.n	8003ab6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fd51 	bl	8004528 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fd4a 	bl	8004528 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0202 	orr.w	r2, r2, #2
 8003aa2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0204 	orr.w	r2, r2, #4
 8003ab2:	60da      	str	r2, [r3, #12]
      break;
 8003ab4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0202 	mvn.w	r2, #2
 8003afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd fa6c 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa69 	bl	8003ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fa6f 	bl	8004004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0204 	mvn.w	r2, #4
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2202      	movs	r2, #2
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fa42 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa3f 	bl	8003ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fa45 	bl	8004004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0208 	mvn.w	r2, #8
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd fa18 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa15 	bl	8003ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fa1b 	bl	8004004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0210 	mvn.w	r2, #16
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd f9ee 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f9eb 	bl	8003ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f9f1 	bl	8004004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0201 	mvn.w	r2, #1
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd fd56 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	2b80      	cmp	r3, #128	; 0x80
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fcdf 	bl	800463e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9b5 	bl	8004016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0220 	mvn.w	r2, #32
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fcaa 	bl	800462c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e0ae      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	f200 809f 	bhi.w	8003e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08003e4d 	.word	0x08003e4d
 8003d1c:	08003e4d 	.word	0x08003e4d
 8003d20:	08003e4d 	.word	0x08003e4d
 8003d24:	08003d89 	.word	0x08003d89
 8003d28:	08003e4d 	.word	0x08003e4d
 8003d2c:	08003e4d 	.word	0x08003e4d
 8003d30:	08003e4d 	.word	0x08003e4d
 8003d34:	08003dcb 	.word	0x08003dcb
 8003d38:	08003e4d 	.word	0x08003e4d
 8003d3c:	08003e4d 	.word	0x08003e4d
 8003d40:	08003e4d 	.word	0x08003e4d
 8003d44:	08003e0b 	.word	0x08003e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f9cc 	bl	80040ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0204 	bic.w	r2, r2, #4
 8003d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6999      	ldr	r1, [r3, #24]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	619a      	str	r2, [r3, #24]
      break;
 8003d86:	e064      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fa12 	bl	80041b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6999      	ldr	r1, [r3, #24]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	021a      	lsls	r2, r3, #8
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	619a      	str	r2, [r3, #24]
      break;
 8003dc8:	e043      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fa5b 	bl	800428c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0208 	orr.w	r2, r2, #8
 8003de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0204 	bic.w	r2, r2, #4
 8003df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69d9      	ldr	r1, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	61da      	str	r2, [r3, #28]
      break;
 8003e08:	e023      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 faa5 	bl	8004360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69d9      	ldr	r1, [r3, #28]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	61da      	str	r2, [r3, #28]
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0b4      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x186>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb8:	d03e      	beq.n	8003f38 <HAL_TIM_ConfigClockSource+0xd4>
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebe:	f200 8087 	bhi.w	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec6:	f000 8086 	beq.w	8003fd6 <HAL_TIM_ConfigClockSource+0x172>
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ece:	d87f      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b70      	cmp	r3, #112	; 0x70
 8003ed2:	d01a      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xa6>
 8003ed4:	2b70      	cmp	r3, #112	; 0x70
 8003ed6:	d87b      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b60      	cmp	r3, #96	; 0x60
 8003eda:	d050      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x11a>
 8003edc:	2b60      	cmp	r3, #96	; 0x60
 8003ede:	d877      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b50      	cmp	r3, #80	; 0x50
 8003ee2:	d03c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ee4:	2b50      	cmp	r3, #80	; 0x50
 8003ee6:	d873      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d058      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x13a>
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d86f      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b30      	cmp	r3, #48	; 0x30
 8003ef2:	d064      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003ef4:	2b30      	cmp	r3, #48	; 0x30
 8003ef6:	d86b      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d060      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d867      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d05c      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d05a      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	e062      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f1a:	f000 fae6 	bl	80044ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	609a      	str	r2, [r3, #8]
      break;
 8003f36:	e04f      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f48:	f000 facf 	bl	80044ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f5a:	609a      	str	r2, [r3, #8]
      break;
 8003f5c:	e03c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fa46 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2150      	movs	r1, #80	; 0x50
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fa9d 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e02c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 fa64 	bl	8004458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2160      	movs	r1, #96	; 0x60
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fa8d 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e01c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 fa26 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2140      	movs	r1, #64	; 0x40
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fa7d 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e00c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f000 fa74 	bl	80044b6 <TIM_ITRx_SetConfig>
      break;
 8003fce:	e003      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd4:	e000      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <TIM_Base_SetConfig+0xb8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_Base_SetConfig+0x30>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d007      	beq.n	8004058 <TIM_Base_SetConfig+0x30>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <TIM_Base_SetConfig+0xbc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_Base_SetConfig+0x30>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <TIM_Base_SetConfig+0xc0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <TIM_Base_SetConfig+0xb8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0x62>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0x62>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <TIM_Base_SetConfig+0xbc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0x62>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <TIM_Base_SetConfig+0xc0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <TIM_Base_SetConfig+0xb8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d103      	bne.n	80040d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	615a      	str	r2, [r3, #20]
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800

080040ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f023 0201 	bic.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0302 	bic.w	r3, r3, #2
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10c      	bne.n	8004162 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0308 	bic.w	r3, r3, #8
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00

080041b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 0210 	bic.w	r2, r3, #16
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <TIM_OC2_SetConfig+0xd0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10d      	bne.n	8004234 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <TIM_OC2_SetConfig+0xd0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d113      	bne.n	8004264 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	40012c00 	.word	0x40012c00

0800428c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1d      	ldr	r2, [pc, #116]	; (800435c <TIM_OC3_SetConfig+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10d      	bne.n	8004306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <TIM_OC3_SetConfig+0xd0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d113      	bne.n	8004336 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	621a      	str	r2, [r3, #32]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40012c00 	.word	0x40012c00

08004360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a0f      	ldr	r2, [pc, #60]	; (80043f8 <TIM_OC4_SetConfig+0x98>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d109      	bne.n	80043d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	40012c00 	.word	0x40012c00

080043fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 030a 	bic.w	r3, r3, #10
 8004438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0210 	bic.w	r2, r3, #16
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	031b      	lsls	r3, r3, #12
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004494:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f043 0307 	orr.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b087      	sub	sp, #28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	021a      	lsls	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	431a      	orrs	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	609a      	str	r2, [r3, #8]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	2201      	movs	r2, #1
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	43db      	mvns	r3, r3
 800454a:	401a      	ands	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	431a      	orrs	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004584:	2302      	movs	r3, #2
 8004586:	e046      	b.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a16      	ldr	r2, [pc, #88]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d009      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a12      	ldr	r2, [pc, #72]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a10      	ldr	r2, [pc, #64]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10c      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800

0800462c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <__cvt>:
 8004650:	2b00      	cmp	r3, #0
 8004652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004656:	461f      	mov	r7, r3
 8004658:	bfbb      	ittet	lt
 800465a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800465e:	461f      	movlt	r7, r3
 8004660:	2300      	movge	r3, #0
 8004662:	232d      	movlt	r3, #45	; 0x2d
 8004664:	b088      	sub	sp, #32
 8004666:	4614      	mov	r4, r2
 8004668:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800466a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800466c:	7013      	strb	r3, [r2, #0]
 800466e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004670:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004674:	f023 0820 	bic.w	r8, r3, #32
 8004678:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800467c:	d005      	beq.n	800468a <__cvt+0x3a>
 800467e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004682:	d100      	bne.n	8004686 <__cvt+0x36>
 8004684:	3501      	adds	r5, #1
 8004686:	2302      	movs	r3, #2
 8004688:	e000      	b.n	800468c <__cvt+0x3c>
 800468a:	2303      	movs	r3, #3
 800468c:	aa07      	add	r2, sp, #28
 800468e:	9204      	str	r2, [sp, #16]
 8004690:	aa06      	add	r2, sp, #24
 8004692:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004696:	e9cd 3500 	strd	r3, r5, [sp]
 800469a:	4622      	mov	r2, r4
 800469c:	463b      	mov	r3, r7
 800469e:	f000 fe53 	bl	8005348 <_dtoa_r>
 80046a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046a6:	4606      	mov	r6, r0
 80046a8:	d102      	bne.n	80046b0 <__cvt+0x60>
 80046aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046ac:	07db      	lsls	r3, r3, #31
 80046ae:	d522      	bpl.n	80046f6 <__cvt+0xa6>
 80046b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046b4:	eb06 0905 	add.w	r9, r6, r5
 80046b8:	d110      	bne.n	80046dc <__cvt+0x8c>
 80046ba:	7833      	ldrb	r3, [r6, #0]
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d10a      	bne.n	80046d6 <__cvt+0x86>
 80046c0:	2200      	movs	r2, #0
 80046c2:	2300      	movs	r3, #0
 80046c4:	4620      	mov	r0, r4
 80046c6:	4639      	mov	r1, r7
 80046c8:	f7fc f96e 	bl	80009a8 <__aeabi_dcmpeq>
 80046cc:	b918      	cbnz	r0, 80046d6 <__cvt+0x86>
 80046ce:	f1c5 0501 	rsb	r5, r5, #1
 80046d2:	f8ca 5000 	str.w	r5, [sl]
 80046d6:	f8da 3000 	ldr.w	r3, [sl]
 80046da:	4499      	add	r9, r3
 80046dc:	2200      	movs	r2, #0
 80046de:	2300      	movs	r3, #0
 80046e0:	4620      	mov	r0, r4
 80046e2:	4639      	mov	r1, r7
 80046e4:	f7fc f960 	bl	80009a8 <__aeabi_dcmpeq>
 80046e8:	b108      	cbz	r0, 80046ee <__cvt+0x9e>
 80046ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80046ee:	2230      	movs	r2, #48	; 0x30
 80046f0:	9b07      	ldr	r3, [sp, #28]
 80046f2:	454b      	cmp	r3, r9
 80046f4:	d307      	bcc.n	8004706 <__cvt+0xb6>
 80046f6:	4630      	mov	r0, r6
 80046f8:	9b07      	ldr	r3, [sp, #28]
 80046fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046fc:	1b9b      	subs	r3, r3, r6
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	b008      	add	sp, #32
 8004702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	9107      	str	r1, [sp, #28]
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e7f0      	b.n	80046f0 <__cvt+0xa0>

0800470e <__exponent>:
 800470e:	4603      	mov	r3, r0
 8004710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004712:	2900      	cmp	r1, #0
 8004714:	f803 2b02 	strb.w	r2, [r3], #2
 8004718:	bfb6      	itet	lt
 800471a:	222d      	movlt	r2, #45	; 0x2d
 800471c:	222b      	movge	r2, #43	; 0x2b
 800471e:	4249      	neglt	r1, r1
 8004720:	2909      	cmp	r1, #9
 8004722:	7042      	strb	r2, [r0, #1]
 8004724:	dd2a      	ble.n	800477c <__exponent+0x6e>
 8004726:	f10d 0207 	add.w	r2, sp, #7
 800472a:	4617      	mov	r7, r2
 800472c:	260a      	movs	r6, #10
 800472e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004732:	4694      	mov	ip, r2
 8004734:	fb06 1415 	mls	r4, r6, r5, r1
 8004738:	3430      	adds	r4, #48	; 0x30
 800473a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800473e:	460c      	mov	r4, r1
 8004740:	2c63      	cmp	r4, #99	; 0x63
 8004742:	4629      	mov	r1, r5
 8004744:	f102 32ff 	add.w	r2, r2, #4294967295
 8004748:	dcf1      	bgt.n	800472e <__exponent+0x20>
 800474a:	3130      	adds	r1, #48	; 0x30
 800474c:	f1ac 0402 	sub.w	r4, ip, #2
 8004750:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004754:	4622      	mov	r2, r4
 8004756:	1c41      	adds	r1, r0, #1
 8004758:	42ba      	cmp	r2, r7
 800475a:	d30a      	bcc.n	8004772 <__exponent+0x64>
 800475c:	f10d 0209 	add.w	r2, sp, #9
 8004760:	eba2 020c 	sub.w	r2, r2, ip
 8004764:	42bc      	cmp	r4, r7
 8004766:	bf88      	it	hi
 8004768:	2200      	movhi	r2, #0
 800476a:	4413      	add	r3, r2
 800476c:	1a18      	subs	r0, r3, r0
 800476e:	b003      	add	sp, #12
 8004770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004772:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004776:	f801 5f01 	strb.w	r5, [r1, #1]!
 800477a:	e7ed      	b.n	8004758 <__exponent+0x4a>
 800477c:	2330      	movs	r3, #48	; 0x30
 800477e:	3130      	adds	r1, #48	; 0x30
 8004780:	7083      	strb	r3, [r0, #2]
 8004782:	70c1      	strb	r1, [r0, #3]
 8004784:	1d03      	adds	r3, r0, #4
 8004786:	e7f1      	b.n	800476c <__exponent+0x5e>

08004788 <_printf_float>:
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	b091      	sub	sp, #68	; 0x44
 800478e:	460c      	mov	r4, r1
 8004790:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004794:	4616      	mov	r6, r2
 8004796:	461f      	mov	r7, r3
 8004798:	4605      	mov	r5, r0
 800479a:	f000 fcc5 	bl	8005128 <_localeconv_r>
 800479e:	6803      	ldr	r3, [r0, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	9309      	str	r3, [sp, #36]	; 0x24
 80047a4:	f7fb fcd4 	bl	8000150 <strlen>
 80047a8:	2300      	movs	r3, #0
 80047aa:	930e      	str	r3, [sp, #56]	; 0x38
 80047ac:	f8d8 3000 	ldr.w	r3, [r8]
 80047b0:	900a      	str	r0, [sp, #40]	; 0x28
 80047b2:	3307      	adds	r3, #7
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	f103 0208 	add.w	r2, r3, #8
 80047bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80047c0:	f8d4 b000 	ldr.w	fp, [r4]
 80047c4:	f8c8 2000 	str.w	r2, [r8]
 80047c8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80047cc:	4652      	mov	r2, sl
 80047ce:	4643      	mov	r3, r8
 80047d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047d4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80047d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80047da:	f04f 32ff 	mov.w	r2, #4294967295
 80047de:	4650      	mov	r0, sl
 80047e0:	4b9c      	ldr	r3, [pc, #624]	; (8004a54 <_printf_float+0x2cc>)
 80047e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047e4:	f7fc f912 	bl	8000a0c <__aeabi_dcmpun>
 80047e8:	bb70      	cbnz	r0, 8004848 <_printf_float+0xc0>
 80047ea:	f04f 32ff 	mov.w	r2, #4294967295
 80047ee:	4650      	mov	r0, sl
 80047f0:	4b98      	ldr	r3, [pc, #608]	; (8004a54 <_printf_float+0x2cc>)
 80047f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047f4:	f7fc f8ec 	bl	80009d0 <__aeabi_dcmple>
 80047f8:	bb30      	cbnz	r0, 8004848 <_printf_float+0xc0>
 80047fa:	2200      	movs	r2, #0
 80047fc:	2300      	movs	r3, #0
 80047fe:	4650      	mov	r0, sl
 8004800:	4641      	mov	r1, r8
 8004802:	f7fc f8db 	bl	80009bc <__aeabi_dcmplt>
 8004806:	b110      	cbz	r0, 800480e <_printf_float+0x86>
 8004808:	232d      	movs	r3, #45	; 0x2d
 800480a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800480e:	4a92      	ldr	r2, [pc, #584]	; (8004a58 <_printf_float+0x2d0>)
 8004810:	4b92      	ldr	r3, [pc, #584]	; (8004a5c <_printf_float+0x2d4>)
 8004812:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004816:	bf94      	ite	ls
 8004818:	4690      	movls	r8, r2
 800481a:	4698      	movhi	r8, r3
 800481c:	2303      	movs	r3, #3
 800481e:	f04f 0a00 	mov.w	sl, #0
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	f02b 0304 	bic.w	r3, fp, #4
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	4633      	mov	r3, r6
 800482c:	4621      	mov	r1, r4
 800482e:	4628      	mov	r0, r5
 8004830:	9700      	str	r7, [sp, #0]
 8004832:	aa0f      	add	r2, sp, #60	; 0x3c
 8004834:	f000 f9d6 	bl	8004be4 <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	f040 8090 	bne.w	800495e <_printf_float+0x1d6>
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	b011      	add	sp, #68	; 0x44
 8004844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004848:	4652      	mov	r2, sl
 800484a:	4643      	mov	r3, r8
 800484c:	4650      	mov	r0, sl
 800484e:	4641      	mov	r1, r8
 8004850:	f7fc f8dc 	bl	8000a0c <__aeabi_dcmpun>
 8004854:	b148      	cbz	r0, 800486a <_printf_float+0xe2>
 8004856:	f1b8 0f00 	cmp.w	r8, #0
 800485a:	bfb8      	it	lt
 800485c:	232d      	movlt	r3, #45	; 0x2d
 800485e:	4a80      	ldr	r2, [pc, #512]	; (8004a60 <_printf_float+0x2d8>)
 8004860:	bfb8      	it	lt
 8004862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004866:	4b7f      	ldr	r3, [pc, #508]	; (8004a64 <_printf_float+0x2dc>)
 8004868:	e7d3      	b.n	8004812 <_printf_float+0x8a>
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	d142      	bne.n	80048fa <_printf_float+0x172>
 8004874:	2306      	movs	r3, #6
 8004876:	6063      	str	r3, [r4, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	aa0e      	add	r2, sp, #56	; 0x38
 800487e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004882:	aa0d      	add	r2, sp, #52	; 0x34
 8004884:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004888:	9203      	str	r2, [sp, #12]
 800488a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800488e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	4652      	mov	r2, sl
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	4628      	mov	r0, r5
 800489c:	4643      	mov	r3, r8
 800489e:	910b      	str	r1, [sp, #44]	; 0x2c
 80048a0:	f7ff fed6 	bl	8004650 <__cvt>
 80048a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048a6:	4680      	mov	r8, r0
 80048a8:	2947      	cmp	r1, #71	; 0x47
 80048aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048ac:	d108      	bne.n	80048c0 <_printf_float+0x138>
 80048ae:	1cc8      	adds	r0, r1, #3
 80048b0:	db02      	blt.n	80048b8 <_printf_float+0x130>
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	4299      	cmp	r1, r3
 80048b6:	dd40      	ble.n	800493a <_printf_float+0x1b2>
 80048b8:	f1a9 0902 	sub.w	r9, r9, #2
 80048bc:	fa5f f989 	uxtb.w	r9, r9
 80048c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048c4:	d81f      	bhi.n	8004906 <_printf_float+0x17e>
 80048c6:	464a      	mov	r2, r9
 80048c8:	3901      	subs	r1, #1
 80048ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048ce:	910d      	str	r1, [sp, #52]	; 0x34
 80048d0:	f7ff ff1d 	bl	800470e <__exponent>
 80048d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048d6:	4682      	mov	sl, r0
 80048d8:	1813      	adds	r3, r2, r0
 80048da:	2a01      	cmp	r2, #1
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	dc02      	bgt.n	80048e6 <_printf_float+0x15e>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	07d2      	lsls	r2, r2, #31
 80048e4:	d501      	bpl.n	80048ea <_printf_float+0x162>
 80048e6:	3301      	adds	r3, #1
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d09b      	beq.n	800482a <_printf_float+0xa2>
 80048f2:	232d      	movs	r3, #45	; 0x2d
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f8:	e797      	b.n	800482a <_printf_float+0xa2>
 80048fa:	2947      	cmp	r1, #71	; 0x47
 80048fc:	d1bc      	bne.n	8004878 <_printf_float+0xf0>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ba      	bne.n	8004878 <_printf_float+0xf0>
 8004902:	2301      	movs	r3, #1
 8004904:	e7b7      	b.n	8004876 <_printf_float+0xee>
 8004906:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800490a:	d118      	bne.n	800493e <_printf_float+0x1b6>
 800490c:	2900      	cmp	r1, #0
 800490e:	6863      	ldr	r3, [r4, #4]
 8004910:	dd0b      	ble.n	800492a <_printf_float+0x1a2>
 8004912:	6121      	str	r1, [r4, #16]
 8004914:	b913      	cbnz	r3, 800491c <_printf_float+0x194>
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	07d0      	lsls	r0, r2, #31
 800491a:	d502      	bpl.n	8004922 <_printf_float+0x19a>
 800491c:	3301      	adds	r3, #1
 800491e:	440b      	add	r3, r1
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	f04f 0a00 	mov.w	sl, #0
 8004926:	65a1      	str	r1, [r4, #88]	; 0x58
 8004928:	e7df      	b.n	80048ea <_printf_float+0x162>
 800492a:	b913      	cbnz	r3, 8004932 <_printf_float+0x1aa>
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	07d2      	lsls	r2, r2, #31
 8004930:	d501      	bpl.n	8004936 <_printf_float+0x1ae>
 8004932:	3302      	adds	r3, #2
 8004934:	e7f4      	b.n	8004920 <_printf_float+0x198>
 8004936:	2301      	movs	r3, #1
 8004938:	e7f2      	b.n	8004920 <_printf_float+0x198>
 800493a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800493e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004940:	4299      	cmp	r1, r3
 8004942:	db05      	blt.n	8004950 <_printf_float+0x1c8>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	6121      	str	r1, [r4, #16]
 8004948:	07d8      	lsls	r0, r3, #31
 800494a:	d5ea      	bpl.n	8004922 <_printf_float+0x19a>
 800494c:	1c4b      	adds	r3, r1, #1
 800494e:	e7e7      	b.n	8004920 <_printf_float+0x198>
 8004950:	2900      	cmp	r1, #0
 8004952:	bfcc      	ite	gt
 8004954:	2201      	movgt	r2, #1
 8004956:	f1c1 0202 	rsble	r2, r1, #2
 800495a:	4413      	add	r3, r2
 800495c:	e7e0      	b.n	8004920 <_printf_float+0x198>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	055a      	lsls	r2, r3, #21
 8004962:	d407      	bmi.n	8004974 <_printf_float+0x1ec>
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	4642      	mov	r2, r8
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	d12b      	bne.n	80049ca <_printf_float+0x242>
 8004972:	e764      	b.n	800483e <_printf_float+0xb6>
 8004974:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004978:	f240 80dd 	bls.w	8004b36 <_printf_float+0x3ae>
 800497c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004980:	2200      	movs	r2, #0
 8004982:	2300      	movs	r3, #0
 8004984:	f7fc f810 	bl	80009a8 <__aeabi_dcmpeq>
 8004988:	2800      	cmp	r0, #0
 800498a:	d033      	beq.n	80049f4 <_printf_float+0x26c>
 800498c:	2301      	movs	r3, #1
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	4a35      	ldr	r2, [pc, #212]	; (8004a68 <_printf_float+0x2e0>)
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af51 	beq.w	800483e <_printf_float+0xb6>
 800499c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049a0:	429a      	cmp	r2, r3
 80049a2:	db02      	blt.n	80049aa <_printf_float+0x222>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	07d8      	lsls	r0, r3, #31
 80049a8:	d50f      	bpl.n	80049ca <_printf_float+0x242>
 80049aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049ae:	4631      	mov	r1, r6
 80049b0:	4628      	mov	r0, r5
 80049b2:	47b8      	blx	r7
 80049b4:	3001      	adds	r0, #1
 80049b6:	f43f af42 	beq.w	800483e <_printf_float+0xb6>
 80049ba:	f04f 0800 	mov.w	r8, #0
 80049be:	f104 091a 	add.w	r9, r4, #26
 80049c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c4:	3b01      	subs	r3, #1
 80049c6:	4543      	cmp	r3, r8
 80049c8:	dc09      	bgt.n	80049de <_printf_float+0x256>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	079b      	lsls	r3, r3, #30
 80049ce:	f100 8104 	bmi.w	8004bda <_printf_float+0x452>
 80049d2:	68e0      	ldr	r0, [r4, #12]
 80049d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049d6:	4298      	cmp	r0, r3
 80049d8:	bfb8      	it	lt
 80049da:	4618      	movlt	r0, r3
 80049dc:	e731      	b.n	8004842 <_printf_float+0xba>
 80049de:	2301      	movs	r3, #1
 80049e0:	464a      	mov	r2, r9
 80049e2:	4631      	mov	r1, r6
 80049e4:	4628      	mov	r0, r5
 80049e6:	47b8      	blx	r7
 80049e8:	3001      	adds	r0, #1
 80049ea:	f43f af28 	beq.w	800483e <_printf_float+0xb6>
 80049ee:	f108 0801 	add.w	r8, r8, #1
 80049f2:	e7e6      	b.n	80049c2 <_printf_float+0x23a>
 80049f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dc38      	bgt.n	8004a6c <_printf_float+0x2e4>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <_printf_float+0x2e0>)
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	f43f af1a 	beq.w	800483e <_printf_float+0xb6>
 8004a0a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	d102      	bne.n	8004a18 <_printf_float+0x290>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	07d9      	lsls	r1, r3, #31
 8004a16:	d5d8      	bpl.n	80049ca <_printf_float+0x242>
 8004a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b8      	blx	r7
 8004a22:	3001      	adds	r0, #1
 8004a24:	f43f af0b 	beq.w	800483e <_printf_float+0xb6>
 8004a28:	f04f 0900 	mov.w	r9, #0
 8004a2c:	f104 0a1a 	add.w	sl, r4, #26
 8004a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a32:	425b      	negs	r3, r3
 8004a34:	454b      	cmp	r3, r9
 8004a36:	dc01      	bgt.n	8004a3c <_printf_float+0x2b4>
 8004a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3a:	e794      	b.n	8004966 <_printf_float+0x1de>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4652      	mov	r2, sl
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	f43f aef9 	beq.w	800483e <_printf_float+0xb6>
 8004a4c:	f109 0901 	add.w	r9, r9, #1
 8004a50:	e7ee      	b.n	8004a30 <_printf_float+0x2a8>
 8004a52:	bf00      	nop
 8004a54:	7fefffff 	.word	0x7fefffff
 8004a58:	08006ff6 	.word	0x08006ff6
 8004a5c:	08006ffa 	.word	0x08006ffa
 8004a60:	08006ffe 	.word	0x08006ffe
 8004a64:	08007002 	.word	0x08007002
 8004a68:	08007006 	.word	0x08007006
 8004a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a70:	429a      	cmp	r2, r3
 8004a72:	bfa8      	it	ge
 8004a74:	461a      	movge	r2, r3
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	4691      	mov	r9, r2
 8004a7a:	dc37      	bgt.n	8004aec <_printf_float+0x364>
 8004a7c:	f04f 0b00 	mov.w	fp, #0
 8004a80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a84:	f104 021a 	add.w	r2, r4, #26
 8004a88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a8c:	ebaa 0309 	sub.w	r3, sl, r9
 8004a90:	455b      	cmp	r3, fp
 8004a92:	dc33      	bgt.n	8004afc <_printf_float+0x374>
 8004a94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	db3b      	blt.n	8004b14 <_printf_float+0x38c>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	07da      	lsls	r2, r3, #31
 8004aa0:	d438      	bmi.n	8004b14 <_printf_float+0x38c>
 8004aa2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004aa6:	eba2 0903 	sub.w	r9, r2, r3
 8004aaa:	eba2 020a 	sub.w	r2, r2, sl
 8004aae:	4591      	cmp	r9, r2
 8004ab0:	bfa8      	it	ge
 8004ab2:	4691      	movge	r9, r2
 8004ab4:	f1b9 0f00 	cmp.w	r9, #0
 8004ab8:	dc34      	bgt.n	8004b24 <_printf_float+0x39c>
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ac2:	f104 0a1a 	add.w	sl, r4, #26
 8004ac6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	eba3 0309 	sub.w	r3, r3, r9
 8004ad0:	4543      	cmp	r3, r8
 8004ad2:	f77f af7a 	ble.w	80049ca <_printf_float+0x242>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4631      	mov	r1, r6
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b8      	blx	r7
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f43f aeac 	beq.w	800483e <_printf_float+0xb6>
 8004ae6:	f108 0801 	add.w	r8, r8, #1
 8004aea:	e7ec      	b.n	8004ac6 <_printf_float+0x33e>
 8004aec:	4613      	mov	r3, r2
 8004aee:	4631      	mov	r1, r6
 8004af0:	4642      	mov	r2, r8
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	d1c0      	bne.n	8004a7c <_printf_float+0x2f4>
 8004afa:	e6a0      	b.n	800483e <_printf_float+0xb6>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4631      	mov	r1, r6
 8004b00:	4628      	mov	r0, r5
 8004b02:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f43f ae99 	beq.w	800483e <_printf_float+0xb6>
 8004b0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b0e:	f10b 0b01 	add.w	fp, fp, #1
 8004b12:	e7b9      	b.n	8004a88 <_printf_float+0x300>
 8004b14:	4631      	mov	r1, r6
 8004b16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d1bf      	bne.n	8004aa2 <_printf_float+0x31a>
 8004b22:	e68c      	b.n	800483e <_printf_float+0xb6>
 8004b24:	464b      	mov	r3, r9
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	eb08 020a 	add.w	r2, r8, sl
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	d1c2      	bne.n	8004aba <_printf_float+0x332>
 8004b34:	e683      	b.n	800483e <_printf_float+0xb6>
 8004b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b38:	2a01      	cmp	r2, #1
 8004b3a:	dc01      	bgt.n	8004b40 <_printf_float+0x3b8>
 8004b3c:	07db      	lsls	r3, r3, #31
 8004b3e:	d539      	bpl.n	8004bb4 <_printf_float+0x42c>
 8004b40:	2301      	movs	r3, #1
 8004b42:	4642      	mov	r2, r8
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f ae77 	beq.w	800483e <_printf_float+0xb6>
 8004b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	f43f ae6f 	beq.w	800483e <_printf_float+0xb6>
 8004b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b64:	2200      	movs	r2, #0
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004b6c:	f7fb ff1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004b70:	b9d8      	cbnz	r0, 8004baa <_printf_float+0x422>
 8004b72:	f109 33ff 	add.w	r3, r9, #4294967295
 8004b76:	f108 0201 	add.w	r2, r8, #1
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	47b8      	blx	r7
 8004b80:	3001      	adds	r0, #1
 8004b82:	d10e      	bne.n	8004ba2 <_printf_float+0x41a>
 8004b84:	e65b      	b.n	800483e <_printf_float+0xb6>
 8004b86:	2301      	movs	r3, #1
 8004b88:	464a      	mov	r2, r9
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	47b8      	blx	r7
 8004b90:	3001      	adds	r0, #1
 8004b92:	f43f ae54 	beq.w	800483e <_printf_float+0xb6>
 8004b96:	f108 0801 	add.w	r8, r8, #1
 8004b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	4543      	cmp	r3, r8
 8004ba0:	dcf1      	bgt.n	8004b86 <_printf_float+0x3fe>
 8004ba2:	4653      	mov	r3, sl
 8004ba4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ba8:	e6de      	b.n	8004968 <_printf_float+0x1e0>
 8004baa:	f04f 0800 	mov.w	r8, #0
 8004bae:	f104 091a 	add.w	r9, r4, #26
 8004bb2:	e7f2      	b.n	8004b9a <_printf_float+0x412>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	e7df      	b.n	8004b7a <_printf_float+0x3f2>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	464a      	mov	r2, r9
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b8      	blx	r7
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f43f ae3a 	beq.w	800483e <_printf_float+0xb6>
 8004bca:	f108 0801 	add.w	r8, r8, #1
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004bd2:	1a5b      	subs	r3, r3, r1
 8004bd4:	4543      	cmp	r3, r8
 8004bd6:	dcf0      	bgt.n	8004bba <_printf_float+0x432>
 8004bd8:	e6fb      	b.n	80049d2 <_printf_float+0x24a>
 8004bda:	f04f 0800 	mov.w	r8, #0
 8004bde:	f104 0919 	add.w	r9, r4, #25
 8004be2:	e7f4      	b.n	8004bce <_printf_float+0x446>

08004be4 <_printf_common>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	4616      	mov	r6, r2
 8004bea:	4699      	mov	r9, r3
 8004bec:	688a      	ldr	r2, [r1, #8]
 8004bee:	690b      	ldr	r3, [r1, #16]
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	bfb8      	it	lt
 8004bf6:	4613      	movlt	r3, r2
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bfe:	460c      	mov	r4, r1
 8004c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c04:	b10a      	cbz	r2, 8004c0a <_printf_common+0x26>
 8004c06:	3301      	adds	r3, #1
 8004c08:	6033      	str	r3, [r6, #0]
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	0699      	lsls	r1, r3, #26
 8004c0e:	bf42      	ittt	mi
 8004c10:	6833      	ldrmi	r3, [r6, #0]
 8004c12:	3302      	addmi	r3, #2
 8004c14:	6033      	strmi	r3, [r6, #0]
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	f015 0506 	ands.w	r5, r5, #6
 8004c1c:	d106      	bne.n	8004c2c <_printf_common+0x48>
 8004c1e:	f104 0a19 	add.w	sl, r4, #25
 8004c22:	68e3      	ldr	r3, [r4, #12]
 8004c24:	6832      	ldr	r2, [r6, #0]
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	42ab      	cmp	r3, r5
 8004c2a:	dc2b      	bgt.n	8004c84 <_printf_common+0xa0>
 8004c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c30:	1e13      	subs	r3, r2, #0
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	bf18      	it	ne
 8004c36:	2301      	movne	r3, #1
 8004c38:	0692      	lsls	r2, r2, #26
 8004c3a:	d430      	bmi.n	8004c9e <_printf_common+0xba>
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d023      	beq.n	8004c92 <_printf_common+0xae>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	6922      	ldr	r2, [r4, #16]
 8004c4e:	f003 0306 	and.w	r3, r3, #6
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf14      	ite	ne
 8004c56:	2500      	movne	r5, #0
 8004c58:	6833      	ldreq	r3, [r6, #0]
 8004c5a:	f04f 0600 	mov.w	r6, #0
 8004c5e:	bf08      	it	eq
 8004c60:	68e5      	ldreq	r5, [r4, #12]
 8004c62:	f104 041a 	add.w	r4, r4, #26
 8004c66:	bf08      	it	eq
 8004c68:	1aed      	subeq	r5, r5, r3
 8004c6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c6e:	bf08      	it	eq
 8004c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bfc4      	itt	gt
 8004c78:	1a9b      	subgt	r3, r3, r2
 8004c7a:	18ed      	addgt	r5, r5, r3
 8004c7c:	42b5      	cmp	r5, r6
 8004c7e:	d11a      	bne.n	8004cb6 <_printf_common+0xd2>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e008      	b.n	8004c96 <_printf_common+0xb2>
 8004c84:	2301      	movs	r3, #1
 8004c86:	4652      	mov	r2, sl
 8004c88:	4649      	mov	r1, r9
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c0      	blx	r8
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d103      	bne.n	8004c9a <_printf_common+0xb6>
 8004c92:	f04f 30ff 	mov.w	r0, #4294967295
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9a:	3501      	adds	r5, #1
 8004c9c:	e7c1      	b.n	8004c22 <_printf_common+0x3e>
 8004c9e:	2030      	movs	r0, #48	; 0x30
 8004ca0:	18e1      	adds	r1, r4, r3
 8004ca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cac:	4422      	add	r2, r4
 8004cae:	3302      	adds	r3, #2
 8004cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cb4:	e7c2      	b.n	8004c3c <_printf_common+0x58>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	47c0      	blx	r8
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d0e6      	beq.n	8004c92 <_printf_common+0xae>
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	e7d9      	b.n	8004c7c <_printf_common+0x98>

08004cc8 <_printf_i>:
 8004cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	7e0f      	ldrb	r7, [r1, #24]
 8004cce:	4691      	mov	r9, r2
 8004cd0:	2f78      	cmp	r7, #120	; 0x78
 8004cd2:	4680      	mov	r8, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	469a      	mov	sl, r3
 8004cd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cde:	d807      	bhi.n	8004cf0 <_printf_i+0x28>
 8004ce0:	2f62      	cmp	r7, #98	; 0x62
 8004ce2:	d80a      	bhi.n	8004cfa <_printf_i+0x32>
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	f000 80d5 	beq.w	8004e94 <_printf_i+0x1cc>
 8004cea:	2f58      	cmp	r7, #88	; 0x58
 8004cec:	f000 80c1 	beq.w	8004e72 <_printf_i+0x1aa>
 8004cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cf8:	e03a      	b.n	8004d70 <_printf_i+0xa8>
 8004cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cfe:	2b15      	cmp	r3, #21
 8004d00:	d8f6      	bhi.n	8004cf0 <_printf_i+0x28>
 8004d02:	a101      	add	r1, pc, #4	; (adr r1, 8004d08 <_printf_i+0x40>)
 8004d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d08:	08004d61 	.word	0x08004d61
 8004d0c:	08004d75 	.word	0x08004d75
 8004d10:	08004cf1 	.word	0x08004cf1
 8004d14:	08004cf1 	.word	0x08004cf1
 8004d18:	08004cf1 	.word	0x08004cf1
 8004d1c:	08004cf1 	.word	0x08004cf1
 8004d20:	08004d75 	.word	0x08004d75
 8004d24:	08004cf1 	.word	0x08004cf1
 8004d28:	08004cf1 	.word	0x08004cf1
 8004d2c:	08004cf1 	.word	0x08004cf1
 8004d30:	08004cf1 	.word	0x08004cf1
 8004d34:	08004e7b 	.word	0x08004e7b
 8004d38:	08004da1 	.word	0x08004da1
 8004d3c:	08004e35 	.word	0x08004e35
 8004d40:	08004cf1 	.word	0x08004cf1
 8004d44:	08004cf1 	.word	0x08004cf1
 8004d48:	08004e9d 	.word	0x08004e9d
 8004d4c:	08004cf1 	.word	0x08004cf1
 8004d50:	08004da1 	.word	0x08004da1
 8004d54:	08004cf1 	.word	0x08004cf1
 8004d58:	08004cf1 	.word	0x08004cf1
 8004d5c:	08004e3d 	.word	0x08004e3d
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	602a      	str	r2, [r5, #0]
 8004d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0a0      	b.n	8004eb6 <_printf_i+0x1ee>
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	682b      	ldr	r3, [r5, #0]
 8004d78:	0607      	lsls	r7, r0, #24
 8004d7a:	f103 0104 	add.w	r1, r3, #4
 8004d7e:	6029      	str	r1, [r5, #0]
 8004d80:	d501      	bpl.n	8004d86 <_printf_i+0xbe>
 8004d82:	681e      	ldr	r6, [r3, #0]
 8004d84:	e003      	b.n	8004d8e <_printf_i+0xc6>
 8004d86:	0646      	lsls	r6, r0, #25
 8004d88:	d5fb      	bpl.n	8004d82 <_printf_i+0xba>
 8004d8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	da03      	bge.n	8004d9a <_printf_i+0xd2>
 8004d92:	232d      	movs	r3, #45	; 0x2d
 8004d94:	4276      	negs	r6, r6
 8004d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	4859      	ldr	r0, [pc, #356]	; (8004f04 <_printf_i+0x23c>)
 8004d9e:	e012      	b.n	8004dc6 <_printf_i+0xfe>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	6820      	ldr	r0, [r4, #0]
 8004da4:	1d19      	adds	r1, r3, #4
 8004da6:	6029      	str	r1, [r5, #0]
 8004da8:	0605      	lsls	r5, r0, #24
 8004daa:	d501      	bpl.n	8004db0 <_printf_i+0xe8>
 8004dac:	681e      	ldr	r6, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <_printf_i+0xee>
 8004db0:	0641      	lsls	r1, r0, #25
 8004db2:	d5fb      	bpl.n	8004dac <_printf_i+0xe4>
 8004db4:	881e      	ldrh	r6, [r3, #0]
 8004db6:	2f6f      	cmp	r7, #111	; 0x6f
 8004db8:	bf0c      	ite	eq
 8004dba:	2308      	moveq	r3, #8
 8004dbc:	230a      	movne	r3, #10
 8004dbe:	4851      	ldr	r0, [pc, #324]	; (8004f04 <_printf_i+0x23c>)
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dc6:	6865      	ldr	r5, [r4, #4]
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	bfa8      	it	ge
 8004dcc:	6821      	ldrge	r1, [r4, #0]
 8004dce:	60a5      	str	r5, [r4, #8]
 8004dd0:	bfa4      	itt	ge
 8004dd2:	f021 0104 	bicge.w	r1, r1, #4
 8004dd6:	6021      	strge	r1, [r4, #0]
 8004dd8:	b90e      	cbnz	r6, 8004dde <_printf_i+0x116>
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	d04b      	beq.n	8004e76 <_printf_i+0x1ae>
 8004dde:	4615      	mov	r5, r2
 8004de0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004de4:	fb03 6711 	mls	r7, r3, r1, r6
 8004de8:	5dc7      	ldrb	r7, [r0, r7]
 8004dea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dee:	4637      	mov	r7, r6
 8004df0:	42bb      	cmp	r3, r7
 8004df2:	460e      	mov	r6, r1
 8004df4:	d9f4      	bls.n	8004de0 <_printf_i+0x118>
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d10b      	bne.n	8004e12 <_printf_i+0x14a>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	07de      	lsls	r6, r3, #31
 8004dfe:	d508      	bpl.n	8004e12 <_printf_i+0x14a>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	6861      	ldr	r1, [r4, #4]
 8004e04:	4299      	cmp	r1, r3
 8004e06:	bfde      	ittt	le
 8004e08:	2330      	movle	r3, #48	; 0x30
 8004e0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e12:	1b52      	subs	r2, r2, r5
 8004e14:	6122      	str	r2, [r4, #16]
 8004e16:	464b      	mov	r3, r9
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	f8cd a000 	str.w	sl, [sp]
 8004e20:	aa03      	add	r2, sp, #12
 8004e22:	f7ff fedf 	bl	8004be4 <_printf_common>
 8004e26:	3001      	adds	r0, #1
 8004e28:	d14a      	bne.n	8004ec0 <_printf_i+0x1f8>
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2e:	b004      	add	sp, #16
 8004e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	f043 0320 	orr.w	r3, r3, #32
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	2778      	movs	r7, #120	; 0x78
 8004e3e:	4832      	ldr	r0, [pc, #200]	; (8004f08 <_printf_i+0x240>)
 8004e40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	6829      	ldr	r1, [r5, #0]
 8004e48:	061f      	lsls	r7, r3, #24
 8004e4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e4e:	d402      	bmi.n	8004e56 <_printf_i+0x18e>
 8004e50:	065f      	lsls	r7, r3, #25
 8004e52:	bf48      	it	mi
 8004e54:	b2b6      	uxthmi	r6, r6
 8004e56:	07df      	lsls	r7, r3, #31
 8004e58:	bf48      	it	mi
 8004e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e5e:	6029      	str	r1, [r5, #0]
 8004e60:	bf48      	it	mi
 8004e62:	6023      	strmi	r3, [r4, #0]
 8004e64:	b91e      	cbnz	r6, 8004e6e <_printf_i+0x1a6>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f023 0320 	bic.w	r3, r3, #32
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	2310      	movs	r3, #16
 8004e70:	e7a6      	b.n	8004dc0 <_printf_i+0xf8>
 8004e72:	4824      	ldr	r0, [pc, #144]	; (8004f04 <_printf_i+0x23c>)
 8004e74:	e7e4      	b.n	8004e40 <_printf_i+0x178>
 8004e76:	4615      	mov	r5, r2
 8004e78:	e7bd      	b.n	8004df6 <_printf_i+0x12e>
 8004e7a:	682b      	ldr	r3, [r5, #0]
 8004e7c:	6826      	ldr	r6, [r4, #0]
 8004e7e:	1d18      	adds	r0, r3, #4
 8004e80:	6961      	ldr	r1, [r4, #20]
 8004e82:	6028      	str	r0, [r5, #0]
 8004e84:	0635      	lsls	r5, r6, #24
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	d501      	bpl.n	8004e8e <_printf_i+0x1c6>
 8004e8a:	6019      	str	r1, [r3, #0]
 8004e8c:	e002      	b.n	8004e94 <_printf_i+0x1cc>
 8004e8e:	0670      	lsls	r0, r6, #25
 8004e90:	d5fb      	bpl.n	8004e8a <_printf_i+0x1c2>
 8004e92:	8019      	strh	r1, [r3, #0]
 8004e94:	2300      	movs	r3, #0
 8004e96:	4615      	mov	r5, r2
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	e7bc      	b.n	8004e16 <_printf_i+0x14e>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	1d1a      	adds	r2, r3, #4
 8004ea2:	602a      	str	r2, [r5, #0]
 8004ea4:	681d      	ldr	r5, [r3, #0]
 8004ea6:	6862      	ldr	r2, [r4, #4]
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f000 f9b4 	bl	8005216 <memchr>
 8004eae:	b108      	cbz	r0, 8004eb4 <_printf_i+0x1ec>
 8004eb0:	1b40      	subs	r0, r0, r5
 8004eb2:	6060      	str	r0, [r4, #4]
 8004eb4:	6863      	ldr	r3, [r4, #4]
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebe:	e7aa      	b.n	8004e16 <_printf_i+0x14e>
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	4640      	mov	r0, r8
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	47d0      	blx	sl
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d0ad      	beq.n	8004e2a <_printf_i+0x162>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	079b      	lsls	r3, r3, #30
 8004ed2:	d413      	bmi.n	8004efc <_printf_i+0x234>
 8004ed4:	68e0      	ldr	r0, [r4, #12]
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	4298      	cmp	r0, r3
 8004eda:	bfb8      	it	lt
 8004edc:	4618      	movlt	r0, r3
 8004ede:	e7a6      	b.n	8004e2e <_printf_i+0x166>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4632      	mov	r2, r6
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	47d0      	blx	sl
 8004eea:	3001      	adds	r0, #1
 8004eec:	d09d      	beq.n	8004e2a <_printf_i+0x162>
 8004eee:	3501      	adds	r5, #1
 8004ef0:	68e3      	ldr	r3, [r4, #12]
 8004ef2:	9903      	ldr	r1, [sp, #12]
 8004ef4:	1a5b      	subs	r3, r3, r1
 8004ef6:	42ab      	cmp	r3, r5
 8004ef8:	dcf2      	bgt.n	8004ee0 <_printf_i+0x218>
 8004efa:	e7eb      	b.n	8004ed4 <_printf_i+0x20c>
 8004efc:	2500      	movs	r5, #0
 8004efe:	f104 0619 	add.w	r6, r4, #25
 8004f02:	e7f5      	b.n	8004ef0 <_printf_i+0x228>
 8004f04:	08007008 	.word	0x08007008
 8004f08:	08007019 	.word	0x08007019

08004f0c <std>:
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	4604      	mov	r4, r0
 8004f12:	e9c0 3300 	strd	r3, r3, [r0]
 8004f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f1a:	6083      	str	r3, [r0, #8]
 8004f1c:	8181      	strh	r1, [r0, #12]
 8004f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f20:	81c2      	strh	r2, [r0, #14]
 8004f22:	6183      	str	r3, [r0, #24]
 8004f24:	4619      	mov	r1, r3
 8004f26:	2208      	movs	r2, #8
 8004f28:	305c      	adds	r0, #92	; 0x5c
 8004f2a:	f000 f8f4 	bl	8005116 <memset>
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <std+0x58>)
 8004f30:	6224      	str	r4, [r4, #32]
 8004f32:	6263      	str	r3, [r4, #36]	; 0x24
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <std+0x5c>)
 8004f36:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <std+0x60>)
 8004f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <std+0x64>)
 8004f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <std+0x68>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d006      	beq.n	8004f54 <std+0x48>
 8004f46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f4a:	4294      	cmp	r4, r2
 8004f4c:	d002      	beq.n	8004f54 <std+0x48>
 8004f4e:	33d0      	adds	r3, #208	; 0xd0
 8004f50:	429c      	cmp	r4, r3
 8004f52:	d105      	bne.n	8004f60 <std+0x54>
 8004f54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5c:	f000 b958 	b.w	8005210 <__retarget_lock_init_recursive>
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	bf00      	nop
 8004f64:	08005091 	.word	0x08005091
 8004f68:	080050b3 	.word	0x080050b3
 8004f6c:	080050eb 	.word	0x080050eb
 8004f70:	0800510f 	.word	0x0800510f
 8004f74:	20000338 	.word	0x20000338

08004f78 <stdio_exit_handler>:
 8004f78:	4a02      	ldr	r2, [pc, #8]	; (8004f84 <stdio_exit_handler+0xc>)
 8004f7a:	4903      	ldr	r1, [pc, #12]	; (8004f88 <stdio_exit_handler+0x10>)
 8004f7c:	4803      	ldr	r0, [pc, #12]	; (8004f8c <stdio_exit_handler+0x14>)
 8004f7e:	f000 b869 	b.w	8005054 <_fwalk_sglue>
 8004f82:	bf00      	nop
 8004f84:	20000010 	.word	0x20000010
 8004f88:	080068fd 	.word	0x080068fd
 8004f8c:	2000001c 	.word	0x2000001c

08004f90 <cleanup_stdio>:
 8004f90:	6841      	ldr	r1, [r0, #4]
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <cleanup_stdio+0x34>)
 8004f94:	b510      	push	{r4, lr}
 8004f96:	4299      	cmp	r1, r3
 8004f98:	4604      	mov	r4, r0
 8004f9a:	d001      	beq.n	8004fa0 <cleanup_stdio+0x10>
 8004f9c:	f001 fcae 	bl	80068fc <_fflush_r>
 8004fa0:	68a1      	ldr	r1, [r4, #8]
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <cleanup_stdio+0x38>)
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	d002      	beq.n	8004fae <cleanup_stdio+0x1e>
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f001 fca7 	bl	80068fc <_fflush_r>
 8004fae:	68e1      	ldr	r1, [r4, #12]
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <cleanup_stdio+0x3c>)
 8004fb2:	4299      	cmp	r1, r3
 8004fb4:	d004      	beq.n	8004fc0 <cleanup_stdio+0x30>
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fbc:	f001 bc9e 	b.w	80068fc <_fflush_r>
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000338 	.word	0x20000338
 8004fc8:	200003a0 	.word	0x200003a0
 8004fcc:	20000408 	.word	0x20000408

08004fd0 <global_stdio_init.part.0>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <global_stdio_init.part.0+0x30>)
 8004fd4:	4c0b      	ldr	r4, [pc, #44]	; (8005004 <global_stdio_init.part.0+0x34>)
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	; (8005008 <global_stdio_init.part.0+0x38>)
 8004fd8:	4620      	mov	r0, r4
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	2104      	movs	r1, #4
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f7ff ff94 	bl	8004f0c <std>
 8004fe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004fe8:	2201      	movs	r2, #1
 8004fea:	2109      	movs	r1, #9
 8004fec:	f7ff ff8e 	bl	8004f0c <std>
 8004ff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffa:	2112      	movs	r1, #18
 8004ffc:	f7ff bf86 	b.w	8004f0c <std>
 8005000:	20000470 	.word	0x20000470
 8005004:	20000338 	.word	0x20000338
 8005008:	08004f79 	.word	0x08004f79

0800500c <__sfp_lock_acquire>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__sfp_lock_acquire+0x8>)
 800500e:	f000 b900 	b.w	8005212 <__retarget_lock_acquire_recursive>
 8005012:	bf00      	nop
 8005014:	20000479 	.word	0x20000479

08005018 <__sfp_lock_release>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__sfp_lock_release+0x8>)
 800501a:	f000 b8fb 	b.w	8005214 <__retarget_lock_release_recursive>
 800501e:	bf00      	nop
 8005020:	20000479 	.word	0x20000479

08005024 <__sinit>:
 8005024:	b510      	push	{r4, lr}
 8005026:	4604      	mov	r4, r0
 8005028:	f7ff fff0 	bl	800500c <__sfp_lock_acquire>
 800502c:	6a23      	ldr	r3, [r4, #32]
 800502e:	b11b      	cbz	r3, 8005038 <__sinit+0x14>
 8005030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005034:	f7ff bff0 	b.w	8005018 <__sfp_lock_release>
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <__sinit+0x28>)
 800503a:	6223      	str	r3, [r4, #32]
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <__sinit+0x2c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f5      	bne.n	8005030 <__sinit+0xc>
 8005044:	f7ff ffc4 	bl	8004fd0 <global_stdio_init.part.0>
 8005048:	e7f2      	b.n	8005030 <__sinit+0xc>
 800504a:	bf00      	nop
 800504c:	08004f91 	.word	0x08004f91
 8005050:	20000470 	.word	0x20000470

08005054 <_fwalk_sglue>:
 8005054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005058:	4607      	mov	r7, r0
 800505a:	4688      	mov	r8, r1
 800505c:	4614      	mov	r4, r2
 800505e:	2600      	movs	r6, #0
 8005060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005064:	f1b9 0901 	subs.w	r9, r9, #1
 8005068:	d505      	bpl.n	8005076 <_fwalk_sglue+0x22>
 800506a:	6824      	ldr	r4, [r4, #0]
 800506c:	2c00      	cmp	r4, #0
 800506e:	d1f7      	bne.n	8005060 <_fwalk_sglue+0xc>
 8005070:	4630      	mov	r0, r6
 8005072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005076:	89ab      	ldrh	r3, [r5, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d907      	bls.n	800508c <_fwalk_sglue+0x38>
 800507c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005080:	3301      	adds	r3, #1
 8005082:	d003      	beq.n	800508c <_fwalk_sglue+0x38>
 8005084:	4629      	mov	r1, r5
 8005086:	4638      	mov	r0, r7
 8005088:	47c0      	blx	r8
 800508a:	4306      	orrs	r6, r0
 800508c:	3568      	adds	r5, #104	; 0x68
 800508e:	e7e9      	b.n	8005064 <_fwalk_sglue+0x10>

08005090 <__sread>:
 8005090:	b510      	push	{r4, lr}
 8005092:	460c      	mov	r4, r1
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	f000 f86c 	bl	8005174 <_read_r>
 800509c:	2800      	cmp	r0, #0
 800509e:	bfab      	itete	ge
 80050a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050a2:	89a3      	ldrhlt	r3, [r4, #12]
 80050a4:	181b      	addge	r3, r3, r0
 80050a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050aa:	bfac      	ite	ge
 80050ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ae:	81a3      	strhlt	r3, [r4, #12]
 80050b0:	bd10      	pop	{r4, pc}

080050b2 <__swrite>:
 80050b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	461f      	mov	r7, r3
 80050b8:	898b      	ldrh	r3, [r1, #12]
 80050ba:	4605      	mov	r5, r0
 80050bc:	05db      	lsls	r3, r3, #23
 80050be:	460c      	mov	r4, r1
 80050c0:	4616      	mov	r6, r2
 80050c2:	d505      	bpl.n	80050d0 <__swrite+0x1e>
 80050c4:	2302      	movs	r3, #2
 80050c6:	2200      	movs	r2, #0
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	f000 f840 	bl	8005150 <_lseek_r>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	4632      	mov	r2, r6
 80050d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	4628      	mov	r0, r5
 80050dc:	463b      	mov	r3, r7
 80050de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e6:	f000 b857 	b.w	8005198 <_write_r>

080050ea <__sseek>:
 80050ea:	b510      	push	{r4, lr}
 80050ec:	460c      	mov	r4, r1
 80050ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f2:	f000 f82d 	bl	8005150 <_lseek_r>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	bf15      	itete	ne
 80050fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80050fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005106:	81a3      	strheq	r3, [r4, #12]
 8005108:	bf18      	it	ne
 800510a:	81a3      	strhne	r3, [r4, #12]
 800510c:	bd10      	pop	{r4, pc}

0800510e <__sclose>:
 800510e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005112:	f000 b80d 	b.w	8005130 <_close_r>

08005116 <memset>:
 8005116:	4603      	mov	r3, r0
 8005118:	4402      	add	r2, r0
 800511a:	4293      	cmp	r3, r2
 800511c:	d100      	bne.n	8005120 <memset+0xa>
 800511e:	4770      	bx	lr
 8005120:	f803 1b01 	strb.w	r1, [r3], #1
 8005124:	e7f9      	b.n	800511a <memset+0x4>
	...

08005128 <_localeconv_r>:
 8005128:	4800      	ldr	r0, [pc, #0]	; (800512c <_localeconv_r+0x4>)
 800512a:	4770      	bx	lr
 800512c:	2000015c 	.word	0x2000015c

08005130 <_close_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	2300      	movs	r3, #0
 8005134:	4d05      	ldr	r5, [pc, #20]	; (800514c <_close_r+0x1c>)
 8005136:	4604      	mov	r4, r0
 8005138:	4608      	mov	r0, r1
 800513a:	602b      	str	r3, [r5, #0]
 800513c:	f7fc fcd0 	bl	8001ae0 <_close>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d102      	bne.n	800514a <_close_r+0x1a>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	b103      	cbz	r3, 800514a <_close_r+0x1a>
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	bd38      	pop	{r3, r4, r5, pc}
 800514c:	20000474 	.word	0x20000474

08005150 <_lseek_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	4611      	mov	r1, r2
 8005158:	2200      	movs	r2, #0
 800515a:	4d05      	ldr	r5, [pc, #20]	; (8005170 <_lseek_r+0x20>)
 800515c:	602a      	str	r2, [r5, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	f7fc fce2 	bl	8001b28 <_lseek>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_lseek_r+0x1e>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	b103      	cbz	r3, 800516e <_lseek_r+0x1e>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	20000474 	.word	0x20000474

08005174 <_read_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4604      	mov	r4, r0
 8005178:	4608      	mov	r0, r1
 800517a:	4611      	mov	r1, r2
 800517c:	2200      	movs	r2, #0
 800517e:	4d05      	ldr	r5, [pc, #20]	; (8005194 <_read_r+0x20>)
 8005180:	602a      	str	r2, [r5, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f7fc fc8f 	bl	8001aa6 <_read>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_read_r+0x1e>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_read_r+0x1e>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20000474 	.word	0x20000474

08005198 <_write_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	2200      	movs	r2, #0
 80051a2:	4d05      	ldr	r5, [pc, #20]	; (80051b8 <_write_r+0x20>)
 80051a4:	602a      	str	r2, [r5, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f7fc fa70 	bl	800168c <_write>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d102      	bne.n	80051b6 <_write_r+0x1e>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	b103      	cbz	r3, 80051b6 <_write_r+0x1e>
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	20000474 	.word	0x20000474

080051bc <__errno>:
 80051bc:	4b01      	ldr	r3, [pc, #4]	; (80051c4 <__errno+0x8>)
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000068 	.word	0x20000068

080051c8 <__libc_init_array>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	2600      	movs	r6, #0
 80051cc:	4d0c      	ldr	r5, [pc, #48]	; (8005200 <__libc_init_array+0x38>)
 80051ce:	4c0d      	ldr	r4, [pc, #52]	; (8005204 <__libc_init_array+0x3c>)
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	42a6      	cmp	r6, r4
 80051d6:	d109      	bne.n	80051ec <__libc_init_array+0x24>
 80051d8:	f001 fee0 	bl	8006f9c <_init>
 80051dc:	2600      	movs	r6, #0
 80051de:	4d0a      	ldr	r5, [pc, #40]	; (8005208 <__libc_init_array+0x40>)
 80051e0:	4c0a      	ldr	r4, [pc, #40]	; (800520c <__libc_init_array+0x44>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	42a6      	cmp	r6, r4
 80051e8:	d105      	bne.n	80051f6 <__libc_init_array+0x2e>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f0:	4798      	blx	r3
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7ee      	b.n	80051d4 <__libc_init_array+0xc>
 80051f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fa:	4798      	blx	r3
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7f2      	b.n	80051e6 <__libc_init_array+0x1e>
 8005200:	08007364 	.word	0x08007364
 8005204:	08007364 	.word	0x08007364
 8005208:	08007364 	.word	0x08007364
 800520c:	08007368 	.word	0x08007368

08005210 <__retarget_lock_init_recursive>:
 8005210:	4770      	bx	lr

08005212 <__retarget_lock_acquire_recursive>:
 8005212:	4770      	bx	lr

08005214 <__retarget_lock_release_recursive>:
 8005214:	4770      	bx	lr

08005216 <memchr>:
 8005216:	4603      	mov	r3, r0
 8005218:	b510      	push	{r4, lr}
 800521a:	b2c9      	uxtb	r1, r1
 800521c:	4402      	add	r2, r0
 800521e:	4293      	cmp	r3, r2
 8005220:	4618      	mov	r0, r3
 8005222:	d101      	bne.n	8005228 <memchr+0x12>
 8005224:	2000      	movs	r0, #0
 8005226:	e003      	b.n	8005230 <memchr+0x1a>
 8005228:	7804      	ldrb	r4, [r0, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	428c      	cmp	r4, r1
 800522e:	d1f6      	bne.n	800521e <memchr+0x8>
 8005230:	bd10      	pop	{r4, pc}

08005232 <quorem>:
 8005232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	6903      	ldr	r3, [r0, #16]
 8005238:	690c      	ldr	r4, [r1, #16]
 800523a:	4607      	mov	r7, r0
 800523c:	42a3      	cmp	r3, r4
 800523e:	db7f      	blt.n	8005340 <quorem+0x10e>
 8005240:	3c01      	subs	r4, #1
 8005242:	f100 0514 	add.w	r5, r0, #20
 8005246:	f101 0814 	add.w	r8, r1, #20
 800524a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005258:	3301      	adds	r3, #1
 800525a:	429a      	cmp	r2, r3
 800525c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005268:	d331      	bcc.n	80052ce <quorem+0x9c>
 800526a:	f04f 0e00 	mov.w	lr, #0
 800526e:	4640      	mov	r0, r8
 8005270:	46ac      	mov	ip, r5
 8005272:	46f2      	mov	sl, lr
 8005274:	f850 2b04 	ldr.w	r2, [r0], #4
 8005278:	b293      	uxth	r3, r2
 800527a:	fb06 e303 	mla	r3, r6, r3, lr
 800527e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005282:	0c1a      	lsrs	r2, r3, #16
 8005284:	b29b      	uxth	r3, r3
 8005286:	fb06 220e 	mla	r2, r6, lr, r2
 800528a:	ebaa 0303 	sub.w	r3, sl, r3
 800528e:	f8dc a000 	ldr.w	sl, [ip]
 8005292:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005296:	fa1f fa8a 	uxth.w	sl, sl
 800529a:	4453      	add	r3, sl
 800529c:	f8dc a000 	ldr.w	sl, [ip]
 80052a0:	b292      	uxth	r2, r2
 80052a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052b0:	4581      	cmp	r9, r0
 80052b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052b6:	f84c 3b04 	str.w	r3, [ip], #4
 80052ba:	d2db      	bcs.n	8005274 <quorem+0x42>
 80052bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80052c0:	b92b      	cbnz	r3, 80052ce <quorem+0x9c>
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	3b04      	subs	r3, #4
 80052c6:	429d      	cmp	r5, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	d32d      	bcc.n	8005328 <quorem+0xf6>
 80052cc:	613c      	str	r4, [r7, #16]
 80052ce:	4638      	mov	r0, r7
 80052d0:	f001 f994 	bl	80065fc <__mcmp>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	db23      	blt.n	8005320 <quorem+0xee>
 80052d8:	4629      	mov	r1, r5
 80052da:	2000      	movs	r0, #0
 80052dc:	3601      	adds	r6, #1
 80052de:	f858 2b04 	ldr.w	r2, [r8], #4
 80052e2:	f8d1 c000 	ldr.w	ip, [r1]
 80052e6:	b293      	uxth	r3, r2
 80052e8:	1ac3      	subs	r3, r0, r3
 80052ea:	0c12      	lsrs	r2, r2, #16
 80052ec:	fa1f f08c 	uxth.w	r0, ip
 80052f0:	4403      	add	r3, r0
 80052f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80052f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005300:	45c1      	cmp	r9, r8
 8005302:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005306:	f841 3b04 	str.w	r3, [r1], #4
 800530a:	d2e8      	bcs.n	80052de <quorem+0xac>
 800530c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005314:	b922      	cbnz	r2, 8005320 <quorem+0xee>
 8005316:	3b04      	subs	r3, #4
 8005318:	429d      	cmp	r5, r3
 800531a:	461a      	mov	r2, r3
 800531c:	d30a      	bcc.n	8005334 <quorem+0x102>
 800531e:	613c      	str	r4, [r7, #16]
 8005320:	4630      	mov	r0, r6
 8005322:	b003      	add	sp, #12
 8005324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	3b04      	subs	r3, #4
 800532c:	2a00      	cmp	r2, #0
 800532e:	d1cd      	bne.n	80052cc <quorem+0x9a>
 8005330:	3c01      	subs	r4, #1
 8005332:	e7c8      	b.n	80052c6 <quorem+0x94>
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	3b04      	subs	r3, #4
 8005338:	2a00      	cmp	r2, #0
 800533a:	d1f0      	bne.n	800531e <quorem+0xec>
 800533c:	3c01      	subs	r4, #1
 800533e:	e7eb      	b.n	8005318 <quorem+0xe6>
 8005340:	2000      	movs	r0, #0
 8005342:	e7ee      	b.n	8005322 <quorem+0xf0>
 8005344:	0000      	movs	r0, r0
	...

08005348 <_dtoa_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	4616      	mov	r6, r2
 800534e:	461f      	mov	r7, r3
 8005350:	69c4      	ldr	r4, [r0, #28]
 8005352:	b099      	sub	sp, #100	; 0x64
 8005354:	4605      	mov	r5, r0
 8005356:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800535a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800535e:	b974      	cbnz	r4, 800537e <_dtoa_r+0x36>
 8005360:	2010      	movs	r0, #16
 8005362:	f000 fe1d 	bl	8005fa0 <malloc>
 8005366:	4602      	mov	r2, r0
 8005368:	61e8      	str	r0, [r5, #28]
 800536a:	b920      	cbnz	r0, 8005376 <_dtoa_r+0x2e>
 800536c:	21ef      	movs	r1, #239	; 0xef
 800536e:	4bac      	ldr	r3, [pc, #688]	; (8005620 <_dtoa_r+0x2d8>)
 8005370:	48ac      	ldr	r0, [pc, #688]	; (8005624 <_dtoa_r+0x2dc>)
 8005372:	f001 fb09 	bl	8006988 <__assert_func>
 8005376:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800537a:	6004      	str	r4, [r0, #0]
 800537c:	60c4      	str	r4, [r0, #12]
 800537e:	69eb      	ldr	r3, [r5, #28]
 8005380:	6819      	ldr	r1, [r3, #0]
 8005382:	b151      	cbz	r1, 800539a <_dtoa_r+0x52>
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	2301      	movs	r3, #1
 8005388:	4093      	lsls	r3, r2
 800538a:	604a      	str	r2, [r1, #4]
 800538c:	608b      	str	r3, [r1, #8]
 800538e:	4628      	mov	r0, r5
 8005390:	f000 fefa 	bl	8006188 <_Bfree>
 8005394:	2200      	movs	r2, #0
 8005396:	69eb      	ldr	r3, [r5, #28]
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	1e3b      	subs	r3, r7, #0
 800539c:	bfaf      	iteee	ge
 800539e:	2300      	movge	r3, #0
 80053a0:	2201      	movlt	r2, #1
 80053a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053a6:	9305      	strlt	r3, [sp, #20]
 80053a8:	bfa8      	it	ge
 80053aa:	f8c8 3000 	strge.w	r3, [r8]
 80053ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80053b2:	4b9d      	ldr	r3, [pc, #628]	; (8005628 <_dtoa_r+0x2e0>)
 80053b4:	bfb8      	it	lt
 80053b6:	f8c8 2000 	strlt.w	r2, [r8]
 80053ba:	ea33 0309 	bics.w	r3, r3, r9
 80053be:	d119      	bne.n	80053f4 <_dtoa_r+0xac>
 80053c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053cc:	4333      	orrs	r3, r6
 80053ce:	f000 8589 	beq.w	8005ee4 <_dtoa_r+0xb9c>
 80053d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053d4:	b953      	cbnz	r3, 80053ec <_dtoa_r+0xa4>
 80053d6:	4b95      	ldr	r3, [pc, #596]	; (800562c <_dtoa_r+0x2e4>)
 80053d8:	e023      	b.n	8005422 <_dtoa_r+0xda>
 80053da:	4b95      	ldr	r3, [pc, #596]	; (8005630 <_dtoa_r+0x2e8>)
 80053dc:	9303      	str	r3, [sp, #12]
 80053de:	3308      	adds	r3, #8
 80053e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	9803      	ldr	r0, [sp, #12]
 80053e6:	b019      	add	sp, #100	; 0x64
 80053e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ec:	4b8f      	ldr	r3, [pc, #572]	; (800562c <_dtoa_r+0x2e4>)
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	3303      	adds	r3, #3
 80053f2:	e7f5      	b.n	80053e0 <_dtoa_r+0x98>
 80053f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80053fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005400:	2200      	movs	r2, #0
 8005402:	2300      	movs	r3, #0
 8005404:	f7fb fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8005408:	4680      	mov	r8, r0
 800540a:	b160      	cbz	r0, 8005426 <_dtoa_r+0xde>
 800540c:	2301      	movs	r3, #1
 800540e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8562 	beq.w	8005ede <_dtoa_r+0xb96>
 800541a:	4b86      	ldr	r3, [pc, #536]	; (8005634 <_dtoa_r+0x2ec>)
 800541c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	9303      	str	r3, [sp, #12]
 8005424:	e7de      	b.n	80053e4 <_dtoa_r+0x9c>
 8005426:	ab16      	add	r3, sp, #88	; 0x58
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	ab17      	add	r3, sp, #92	; 0x5c
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4628      	mov	r0, r5
 8005430:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005434:	f001 f98a 	bl	800674c <__d2b>
 8005438:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800543c:	4682      	mov	sl, r0
 800543e:	2c00      	cmp	r4, #0
 8005440:	d07e      	beq.n	8005540 <_dtoa_r+0x1f8>
 8005442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005448:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800544c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005450:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005454:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005458:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800545c:	4619      	mov	r1, r3
 800545e:	2200      	movs	r2, #0
 8005460:	4b75      	ldr	r3, [pc, #468]	; (8005638 <_dtoa_r+0x2f0>)
 8005462:	f7fa fe81 	bl	8000168 <__aeabi_dsub>
 8005466:	a368      	add	r3, pc, #416	; (adr r3, 8005608 <_dtoa_r+0x2c0>)
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f7fb f834 	bl	80004d8 <__aeabi_dmul>
 8005470:	a367      	add	r3, pc, #412	; (adr r3, 8005610 <_dtoa_r+0x2c8>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f7fa fe79 	bl	800016c <__adddf3>
 800547a:	4606      	mov	r6, r0
 800547c:	4620      	mov	r0, r4
 800547e:	460f      	mov	r7, r1
 8005480:	f7fa ffc0 	bl	8000404 <__aeabi_i2d>
 8005484:	a364      	add	r3, pc, #400	; (adr r3, 8005618 <_dtoa_r+0x2d0>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fb f825 	bl	80004d8 <__aeabi_dmul>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4630      	mov	r0, r6
 8005494:	4639      	mov	r1, r7
 8005496:	f7fa fe69 	bl	800016c <__adddf3>
 800549a:	4606      	mov	r6, r0
 800549c:	460f      	mov	r7, r1
 800549e:	f7fb facb 	bl	8000a38 <__aeabi_d2iz>
 80054a2:	2200      	movs	r2, #0
 80054a4:	4683      	mov	fp, r0
 80054a6:	2300      	movs	r3, #0
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fb fa86 	bl	80009bc <__aeabi_dcmplt>
 80054b0:	b148      	cbz	r0, 80054c6 <_dtoa_r+0x17e>
 80054b2:	4658      	mov	r0, fp
 80054b4:	f7fa ffa6 	bl	8000404 <__aeabi_i2d>
 80054b8:	4632      	mov	r2, r6
 80054ba:	463b      	mov	r3, r7
 80054bc:	f7fb fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80054c0:	b908      	cbnz	r0, 80054c6 <_dtoa_r+0x17e>
 80054c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054c6:	f1bb 0f16 	cmp.w	fp, #22
 80054ca:	d857      	bhi.n	800557c <_dtoa_r+0x234>
 80054cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054d0:	4b5a      	ldr	r3, [pc, #360]	; (800563c <_dtoa_r+0x2f4>)
 80054d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f7fb fa6f 	bl	80009bc <__aeabi_dcmplt>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d04e      	beq.n	8005580 <_dtoa_r+0x238>
 80054e2:	2300      	movs	r3, #0
 80054e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80054ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054ec:	1b1b      	subs	r3, r3, r4
 80054ee:	1e5a      	subs	r2, r3, #1
 80054f0:	bf46      	itte	mi
 80054f2:	f1c3 0901 	rsbmi	r9, r3, #1
 80054f6:	2300      	movmi	r3, #0
 80054f8:	f04f 0900 	movpl.w	r9, #0
 80054fc:	9209      	str	r2, [sp, #36]	; 0x24
 80054fe:	bf48      	it	mi
 8005500:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005502:	f1bb 0f00 	cmp.w	fp, #0
 8005506:	db3d      	blt.n	8005584 <_dtoa_r+0x23c>
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800550e:	445b      	add	r3, fp
 8005510:	9309      	str	r3, [sp, #36]	; 0x24
 8005512:	2300      	movs	r3, #0
 8005514:	930a      	str	r3, [sp, #40]	; 0x28
 8005516:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005518:	2b09      	cmp	r3, #9
 800551a:	d867      	bhi.n	80055ec <_dtoa_r+0x2a4>
 800551c:	2b05      	cmp	r3, #5
 800551e:	bfc4      	itt	gt
 8005520:	3b04      	subgt	r3, #4
 8005522:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005526:	bfc8      	it	gt
 8005528:	2400      	movgt	r4, #0
 800552a:	f1a3 0302 	sub.w	r3, r3, #2
 800552e:	bfd8      	it	le
 8005530:	2401      	movle	r4, #1
 8005532:	2b03      	cmp	r3, #3
 8005534:	f200 8086 	bhi.w	8005644 <_dtoa_r+0x2fc>
 8005538:	e8df f003 	tbb	[pc, r3]
 800553c:	5637392c 	.word	0x5637392c
 8005540:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005544:	441c      	add	r4, r3
 8005546:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800554a:	2b20      	cmp	r3, #32
 800554c:	bfc1      	itttt	gt
 800554e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005552:	fa09 f903 	lslgt.w	r9, r9, r3
 8005556:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800555a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800555e:	bfd6      	itet	le
 8005560:	f1c3 0320 	rsble	r3, r3, #32
 8005564:	ea49 0003 	orrgt.w	r0, r9, r3
 8005568:	fa06 f003 	lslle.w	r0, r6, r3
 800556c:	f7fa ff3a 	bl	80003e4 <__aeabi_ui2d>
 8005570:	2201      	movs	r2, #1
 8005572:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005576:	3c01      	subs	r4, #1
 8005578:	9213      	str	r2, [sp, #76]	; 0x4c
 800557a:	e76f      	b.n	800545c <_dtoa_r+0x114>
 800557c:	2301      	movs	r3, #1
 800557e:	e7b3      	b.n	80054e8 <_dtoa_r+0x1a0>
 8005580:	900f      	str	r0, [sp, #60]	; 0x3c
 8005582:	e7b2      	b.n	80054ea <_dtoa_r+0x1a2>
 8005584:	f1cb 0300 	rsb	r3, fp, #0
 8005588:	930a      	str	r3, [sp, #40]	; 0x28
 800558a:	2300      	movs	r3, #0
 800558c:	eba9 090b 	sub.w	r9, r9, fp
 8005590:	930e      	str	r3, [sp, #56]	; 0x38
 8005592:	e7c0      	b.n	8005516 <_dtoa_r+0x1ce>
 8005594:	2300      	movs	r3, #0
 8005596:	930b      	str	r3, [sp, #44]	; 0x2c
 8005598:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800559a:	2b00      	cmp	r3, #0
 800559c:	dc55      	bgt.n	800564a <_dtoa_r+0x302>
 800559e:	2301      	movs	r3, #1
 80055a0:	461a      	mov	r2, r3
 80055a2:	9306      	str	r3, [sp, #24]
 80055a4:	9308      	str	r3, [sp, #32]
 80055a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80055a8:	e00b      	b.n	80055c2 <_dtoa_r+0x27a>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e7f3      	b.n	8005596 <_dtoa_r+0x24e>
 80055ae:	2300      	movs	r3, #0
 80055b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80055b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055b4:	445b      	add	r3, fp
 80055b6:	9306      	str	r3, [sp, #24]
 80055b8:	3301      	adds	r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	9308      	str	r3, [sp, #32]
 80055be:	bfb8      	it	lt
 80055c0:	2301      	movlt	r3, #1
 80055c2:	2100      	movs	r1, #0
 80055c4:	2204      	movs	r2, #4
 80055c6:	69e8      	ldr	r0, [r5, #28]
 80055c8:	f102 0614 	add.w	r6, r2, #20
 80055cc:	429e      	cmp	r6, r3
 80055ce:	d940      	bls.n	8005652 <_dtoa_r+0x30a>
 80055d0:	6041      	str	r1, [r0, #4]
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 fd98 	bl	8006108 <_Balloc>
 80055d8:	9003      	str	r0, [sp, #12]
 80055da:	2800      	cmp	r0, #0
 80055dc:	d13c      	bne.n	8005658 <_dtoa_r+0x310>
 80055de:	4602      	mov	r2, r0
 80055e0:	f240 11af 	movw	r1, #431	; 0x1af
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <_dtoa_r+0x2f8>)
 80055e6:	e6c3      	b.n	8005370 <_dtoa_r+0x28>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e7e1      	b.n	80055b0 <_dtoa_r+0x268>
 80055ec:	2401      	movs	r4, #1
 80055ee:	2300      	movs	r3, #0
 80055f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80055f2:	9322      	str	r3, [sp, #136]	; 0x88
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	2200      	movs	r2, #0
 80055fa:	9306      	str	r3, [sp, #24]
 80055fc:	9308      	str	r3, [sp, #32]
 80055fe:	2312      	movs	r3, #18
 8005600:	e7d1      	b.n	80055a6 <_dtoa_r+0x25e>
 8005602:	bf00      	nop
 8005604:	f3af 8000 	nop.w
 8005608:	636f4361 	.word	0x636f4361
 800560c:	3fd287a7 	.word	0x3fd287a7
 8005610:	8b60c8b3 	.word	0x8b60c8b3
 8005614:	3fc68a28 	.word	0x3fc68a28
 8005618:	509f79fb 	.word	0x509f79fb
 800561c:	3fd34413 	.word	0x3fd34413
 8005620:	08007037 	.word	0x08007037
 8005624:	0800704e 	.word	0x0800704e
 8005628:	7ff00000 	.word	0x7ff00000
 800562c:	08007033 	.word	0x08007033
 8005630:	0800702a 	.word	0x0800702a
 8005634:	08007007 	.word	0x08007007
 8005638:	3ff80000 	.word	0x3ff80000
 800563c:	08007138 	.word	0x08007138
 8005640:	080070a6 	.word	0x080070a6
 8005644:	2301      	movs	r3, #1
 8005646:	930b      	str	r3, [sp, #44]	; 0x2c
 8005648:	e7d4      	b.n	80055f4 <_dtoa_r+0x2ac>
 800564a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800564c:	9306      	str	r3, [sp, #24]
 800564e:	9308      	str	r3, [sp, #32]
 8005650:	e7b7      	b.n	80055c2 <_dtoa_r+0x27a>
 8005652:	3101      	adds	r1, #1
 8005654:	0052      	lsls	r2, r2, #1
 8005656:	e7b7      	b.n	80055c8 <_dtoa_r+0x280>
 8005658:	69eb      	ldr	r3, [r5, #28]
 800565a:	9a03      	ldr	r2, [sp, #12]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	9b08      	ldr	r3, [sp, #32]
 8005660:	2b0e      	cmp	r3, #14
 8005662:	f200 80a8 	bhi.w	80057b6 <_dtoa_r+0x46e>
 8005666:	2c00      	cmp	r4, #0
 8005668:	f000 80a5 	beq.w	80057b6 <_dtoa_r+0x46e>
 800566c:	f1bb 0f00 	cmp.w	fp, #0
 8005670:	dd34      	ble.n	80056dc <_dtoa_r+0x394>
 8005672:	4b9a      	ldr	r3, [pc, #616]	; (80058dc <_dtoa_r+0x594>)
 8005674:	f00b 020f 	and.w	r2, fp, #15
 8005678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800567c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005684:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005688:	ea4f 142b 	mov.w	r4, fp, asr #4
 800568c:	d016      	beq.n	80056bc <_dtoa_r+0x374>
 800568e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005692:	4b93      	ldr	r3, [pc, #588]	; (80058e0 <_dtoa_r+0x598>)
 8005694:	2703      	movs	r7, #3
 8005696:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800569a:	f7fb f847 	bl	800072c <__aeabi_ddiv>
 800569e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056a2:	f004 040f 	and.w	r4, r4, #15
 80056a6:	4e8e      	ldr	r6, [pc, #568]	; (80058e0 <_dtoa_r+0x598>)
 80056a8:	b954      	cbnz	r4, 80056c0 <_dtoa_r+0x378>
 80056aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b2:	f7fb f83b 	bl	800072c <__aeabi_ddiv>
 80056b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ba:	e029      	b.n	8005710 <_dtoa_r+0x3c8>
 80056bc:	2702      	movs	r7, #2
 80056be:	e7f2      	b.n	80056a6 <_dtoa_r+0x35e>
 80056c0:	07e1      	lsls	r1, r4, #31
 80056c2:	d508      	bpl.n	80056d6 <_dtoa_r+0x38e>
 80056c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056cc:	f7fa ff04 	bl	80004d8 <__aeabi_dmul>
 80056d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056d4:	3701      	adds	r7, #1
 80056d6:	1064      	asrs	r4, r4, #1
 80056d8:	3608      	adds	r6, #8
 80056da:	e7e5      	b.n	80056a8 <_dtoa_r+0x360>
 80056dc:	f000 80a5 	beq.w	800582a <_dtoa_r+0x4e2>
 80056e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056e4:	f1cb 0400 	rsb	r4, fp, #0
 80056e8:	4b7c      	ldr	r3, [pc, #496]	; (80058dc <_dtoa_r+0x594>)
 80056ea:	f004 020f 	and.w	r2, r4, #15
 80056ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	f7fa feef 	bl	80004d8 <__aeabi_dmul>
 80056fa:	2702      	movs	r7, #2
 80056fc:	2300      	movs	r3, #0
 80056fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005702:	4e77      	ldr	r6, [pc, #476]	; (80058e0 <_dtoa_r+0x598>)
 8005704:	1124      	asrs	r4, r4, #4
 8005706:	2c00      	cmp	r4, #0
 8005708:	f040 8084 	bne.w	8005814 <_dtoa_r+0x4cc>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1d2      	bne.n	80056b6 <_dtoa_r+0x36e>
 8005710:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005714:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8087 	beq.w	800582e <_dtoa_r+0x4e6>
 8005720:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005724:	2200      	movs	r2, #0
 8005726:	4b6f      	ldr	r3, [pc, #444]	; (80058e4 <_dtoa_r+0x59c>)
 8005728:	f7fb f948 	bl	80009bc <__aeabi_dcmplt>
 800572c:	2800      	cmp	r0, #0
 800572e:	d07e      	beq.n	800582e <_dtoa_r+0x4e6>
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d07b      	beq.n	800582e <_dtoa_r+0x4e6>
 8005736:	9b06      	ldr	r3, [sp, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	dd38      	ble.n	80057ae <_dtoa_r+0x466>
 800573c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005740:	2200      	movs	r2, #0
 8005742:	4b69      	ldr	r3, [pc, #420]	; (80058e8 <_dtoa_r+0x5a0>)
 8005744:	f7fa fec8 	bl	80004d8 <__aeabi_dmul>
 8005748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800574c:	9c06      	ldr	r4, [sp, #24]
 800574e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005752:	3701      	adds	r7, #1
 8005754:	4638      	mov	r0, r7
 8005756:	f7fa fe55 	bl	8000404 <__aeabi_i2d>
 800575a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800575e:	f7fa febb 	bl	80004d8 <__aeabi_dmul>
 8005762:	2200      	movs	r2, #0
 8005764:	4b61      	ldr	r3, [pc, #388]	; (80058ec <_dtoa_r+0x5a4>)
 8005766:	f7fa fd01 	bl	800016c <__adddf3>
 800576a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800576e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005772:	9611      	str	r6, [sp, #68]	; 0x44
 8005774:	2c00      	cmp	r4, #0
 8005776:	d15d      	bne.n	8005834 <_dtoa_r+0x4ec>
 8005778:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800577c:	2200      	movs	r2, #0
 800577e:	4b5c      	ldr	r3, [pc, #368]	; (80058f0 <_dtoa_r+0x5a8>)
 8005780:	f7fa fcf2 	bl	8000168 <__aeabi_dsub>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800578c:	4633      	mov	r3, r6
 800578e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005790:	f7fb f932 	bl	80009f8 <__aeabi_dcmpgt>
 8005794:	2800      	cmp	r0, #0
 8005796:	f040 8295 	bne.w	8005cc4 <_dtoa_r+0x97c>
 800579a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800579e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057a4:	f7fb f90a 	bl	80009bc <__aeabi_dcmplt>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f040 8289 	bne.w	8005cc0 <_dtoa_r+0x978>
 80057ae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80057b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f2c0 8151 	blt.w	8005a60 <_dtoa_r+0x718>
 80057be:	f1bb 0f0e 	cmp.w	fp, #14
 80057c2:	f300 814d 	bgt.w	8005a60 <_dtoa_r+0x718>
 80057c6:	4b45      	ldr	r3, [pc, #276]	; (80058dc <_dtoa_r+0x594>)
 80057c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80057d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f280 80da 	bge.w	8005990 <_dtoa_r+0x648>
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f300 80d6 	bgt.w	8005990 <_dtoa_r+0x648>
 80057e4:	f040 826b 	bne.w	8005cbe <_dtoa_r+0x976>
 80057e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ec:	2200      	movs	r2, #0
 80057ee:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <_dtoa_r+0x5a8>)
 80057f0:	f7fa fe72 	bl	80004d8 <__aeabi_dmul>
 80057f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f8:	f7fb f8f4 	bl	80009e4 <__aeabi_dcmpge>
 80057fc:	9c08      	ldr	r4, [sp, #32]
 80057fe:	4626      	mov	r6, r4
 8005800:	2800      	cmp	r0, #0
 8005802:	f040 8241 	bne.w	8005c88 <_dtoa_r+0x940>
 8005806:	2331      	movs	r3, #49	; 0x31
 8005808:	9f03      	ldr	r7, [sp, #12]
 800580a:	f10b 0b01 	add.w	fp, fp, #1
 800580e:	f807 3b01 	strb.w	r3, [r7], #1
 8005812:	e23d      	b.n	8005c90 <_dtoa_r+0x948>
 8005814:	07e2      	lsls	r2, r4, #31
 8005816:	d505      	bpl.n	8005824 <_dtoa_r+0x4dc>
 8005818:	e9d6 2300 	ldrd	r2, r3, [r6]
 800581c:	f7fa fe5c 	bl	80004d8 <__aeabi_dmul>
 8005820:	2301      	movs	r3, #1
 8005822:	3701      	adds	r7, #1
 8005824:	1064      	asrs	r4, r4, #1
 8005826:	3608      	adds	r6, #8
 8005828:	e76d      	b.n	8005706 <_dtoa_r+0x3be>
 800582a:	2702      	movs	r7, #2
 800582c:	e770      	b.n	8005710 <_dtoa_r+0x3c8>
 800582e:	46d8      	mov	r8, fp
 8005830:	9c08      	ldr	r4, [sp, #32]
 8005832:	e78f      	b.n	8005754 <_dtoa_r+0x40c>
 8005834:	9903      	ldr	r1, [sp, #12]
 8005836:	4b29      	ldr	r3, [pc, #164]	; (80058dc <_dtoa_r+0x594>)
 8005838:	4421      	add	r1, r4
 800583a:	9112      	str	r1, [sp, #72]	; 0x48
 800583c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800583e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005842:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005846:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800584a:	2900      	cmp	r1, #0
 800584c:	d054      	beq.n	80058f8 <_dtoa_r+0x5b0>
 800584e:	2000      	movs	r0, #0
 8005850:	4928      	ldr	r1, [pc, #160]	; (80058f4 <_dtoa_r+0x5ac>)
 8005852:	f7fa ff6b 	bl	800072c <__aeabi_ddiv>
 8005856:	463b      	mov	r3, r7
 8005858:	4632      	mov	r2, r6
 800585a:	f7fa fc85 	bl	8000168 <__aeabi_dsub>
 800585e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005862:	9f03      	ldr	r7, [sp, #12]
 8005864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005868:	f7fb f8e6 	bl	8000a38 <__aeabi_d2iz>
 800586c:	4604      	mov	r4, r0
 800586e:	f7fa fdc9 	bl	8000404 <__aeabi_i2d>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587a:	f7fa fc75 	bl	8000168 <__aeabi_dsub>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	3430      	adds	r4, #48	; 0x30
 8005884:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800588c:	f807 4b01 	strb.w	r4, [r7], #1
 8005890:	f7fb f894 	bl	80009bc <__aeabi_dcmplt>
 8005894:	2800      	cmp	r0, #0
 8005896:	d173      	bne.n	8005980 <_dtoa_r+0x638>
 8005898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800589c:	2000      	movs	r0, #0
 800589e:	4911      	ldr	r1, [pc, #68]	; (80058e4 <_dtoa_r+0x59c>)
 80058a0:	f7fa fc62 	bl	8000168 <__aeabi_dsub>
 80058a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058a8:	f7fb f888 	bl	80009bc <__aeabi_dcmplt>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f040 80b6 	bne.w	8005a1e <_dtoa_r+0x6d6>
 80058b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058b4:	429f      	cmp	r7, r3
 80058b6:	f43f af7a 	beq.w	80057ae <_dtoa_r+0x466>
 80058ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058be:	2200      	movs	r2, #0
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <_dtoa_r+0x5a0>)
 80058c2:	f7fa fe09 	bl	80004d8 <__aeabi_dmul>
 80058c6:	2200      	movs	r2, #0
 80058c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <_dtoa_r+0x5a0>)
 80058d2:	f7fa fe01 	bl	80004d8 <__aeabi_dmul>
 80058d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058da:	e7c3      	b.n	8005864 <_dtoa_r+0x51c>
 80058dc:	08007138 	.word	0x08007138
 80058e0:	08007110 	.word	0x08007110
 80058e4:	3ff00000 	.word	0x3ff00000
 80058e8:	40240000 	.word	0x40240000
 80058ec:	401c0000 	.word	0x401c0000
 80058f0:	40140000 	.word	0x40140000
 80058f4:	3fe00000 	.word	0x3fe00000
 80058f8:	4630      	mov	r0, r6
 80058fa:	4639      	mov	r1, r7
 80058fc:	f7fa fdec 	bl	80004d8 <__aeabi_dmul>
 8005900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005902:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005906:	9c03      	ldr	r4, [sp, #12]
 8005908:	9314      	str	r3, [sp, #80]	; 0x50
 800590a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800590e:	f7fb f893 	bl	8000a38 <__aeabi_d2iz>
 8005912:	9015      	str	r0, [sp, #84]	; 0x54
 8005914:	f7fa fd76 	bl	8000404 <__aeabi_i2d>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005920:	f7fa fc22 	bl	8000168 <__aeabi_dsub>
 8005924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005926:	4606      	mov	r6, r0
 8005928:	3330      	adds	r3, #48	; 0x30
 800592a:	f804 3b01 	strb.w	r3, [r4], #1
 800592e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005930:	460f      	mov	r7, r1
 8005932:	429c      	cmp	r4, r3
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	d124      	bne.n	8005984 <_dtoa_r+0x63c>
 800593a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800593e:	4baf      	ldr	r3, [pc, #700]	; (8005bfc <_dtoa_r+0x8b4>)
 8005940:	f7fa fc14 	bl	800016c <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	f7fb f854 	bl	80009f8 <__aeabi_dcmpgt>
 8005950:	2800      	cmp	r0, #0
 8005952:	d163      	bne.n	8005a1c <_dtoa_r+0x6d4>
 8005954:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005958:	2000      	movs	r0, #0
 800595a:	49a8      	ldr	r1, [pc, #672]	; (8005bfc <_dtoa_r+0x8b4>)
 800595c:	f7fa fc04 	bl	8000168 <__aeabi_dsub>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4630      	mov	r0, r6
 8005966:	4639      	mov	r1, r7
 8005968:	f7fb f828 	bl	80009bc <__aeabi_dcmplt>
 800596c:	2800      	cmp	r0, #0
 800596e:	f43f af1e 	beq.w	80057ae <_dtoa_r+0x466>
 8005972:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005974:	1e7b      	subs	r3, r7, #1
 8005976:	9314      	str	r3, [sp, #80]	; 0x50
 8005978:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800597c:	2b30      	cmp	r3, #48	; 0x30
 800597e:	d0f8      	beq.n	8005972 <_dtoa_r+0x62a>
 8005980:	46c3      	mov	fp, r8
 8005982:	e03b      	b.n	80059fc <_dtoa_r+0x6b4>
 8005984:	4b9e      	ldr	r3, [pc, #632]	; (8005c00 <_dtoa_r+0x8b8>)
 8005986:	f7fa fda7 	bl	80004d8 <__aeabi_dmul>
 800598a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800598e:	e7bc      	b.n	800590a <_dtoa_r+0x5c2>
 8005990:	9f03      	ldr	r7, [sp, #12]
 8005992:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fa fec5 	bl	800072c <__aeabi_ddiv>
 80059a2:	f7fb f849 	bl	8000a38 <__aeabi_d2iz>
 80059a6:	4604      	mov	r4, r0
 80059a8:	f7fa fd2c 	bl	8000404 <__aeabi_i2d>
 80059ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059b0:	f7fa fd92 	bl	80004d8 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4640      	mov	r0, r8
 80059ba:	4649      	mov	r1, r9
 80059bc:	f7fa fbd4 	bl	8000168 <__aeabi_dsub>
 80059c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80059c4:	f807 6b01 	strb.w	r6, [r7], #1
 80059c8:	9e03      	ldr	r6, [sp, #12]
 80059ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80059ce:	1bbe      	subs	r6, r7, r6
 80059d0:	45b4      	cmp	ip, r6
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	d136      	bne.n	8005a46 <_dtoa_r+0x6fe>
 80059d8:	f7fa fbc8 	bl	800016c <__adddf3>
 80059dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059e0:	4680      	mov	r8, r0
 80059e2:	4689      	mov	r9, r1
 80059e4:	f7fb f808 	bl	80009f8 <__aeabi_dcmpgt>
 80059e8:	bb58      	cbnz	r0, 8005a42 <_dtoa_r+0x6fa>
 80059ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059ee:	4640      	mov	r0, r8
 80059f0:	4649      	mov	r1, r9
 80059f2:	f7fa ffd9 	bl	80009a8 <__aeabi_dcmpeq>
 80059f6:	b108      	cbz	r0, 80059fc <_dtoa_r+0x6b4>
 80059f8:	07e3      	lsls	r3, r4, #31
 80059fa:	d422      	bmi.n	8005a42 <_dtoa_r+0x6fa>
 80059fc:	4651      	mov	r1, sl
 80059fe:	4628      	mov	r0, r5
 8005a00:	f000 fbc2 	bl	8006188 <_Bfree>
 8005a04:	2300      	movs	r3, #0
 8005a06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a08:	703b      	strb	r3, [r7, #0]
 8005a0a:	f10b 0301 	add.w	r3, fp, #1
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f43f ace6 	beq.w	80053e4 <_dtoa_r+0x9c>
 8005a18:	601f      	str	r7, [r3, #0]
 8005a1a:	e4e3      	b.n	80053e4 <_dtoa_r+0x9c>
 8005a1c:	4627      	mov	r7, r4
 8005a1e:	463b      	mov	r3, r7
 8005a20:	461f      	mov	r7, r3
 8005a22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a26:	2a39      	cmp	r2, #57	; 0x39
 8005a28:	d107      	bne.n	8005a3a <_dtoa_r+0x6f2>
 8005a2a:	9a03      	ldr	r2, [sp, #12]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d1f7      	bne.n	8005a20 <_dtoa_r+0x6d8>
 8005a30:	2230      	movs	r2, #48	; 0x30
 8005a32:	9903      	ldr	r1, [sp, #12]
 8005a34:	f108 0801 	add.w	r8, r8, #1
 8005a38:	700a      	strb	r2, [r1, #0]
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e79e      	b.n	8005980 <_dtoa_r+0x638>
 8005a42:	46d8      	mov	r8, fp
 8005a44:	e7eb      	b.n	8005a1e <_dtoa_r+0x6d6>
 8005a46:	2200      	movs	r2, #0
 8005a48:	4b6d      	ldr	r3, [pc, #436]	; (8005c00 <_dtoa_r+0x8b8>)
 8005a4a:	f7fa fd45 	bl	80004d8 <__aeabi_dmul>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2300      	movs	r3, #0
 8005a52:	4680      	mov	r8, r0
 8005a54:	4689      	mov	r9, r1
 8005a56:	f7fa ffa7 	bl	80009a8 <__aeabi_dcmpeq>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d09b      	beq.n	8005996 <_dtoa_r+0x64e>
 8005a5e:	e7cd      	b.n	80059fc <_dtoa_r+0x6b4>
 8005a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a62:	2a00      	cmp	r2, #0
 8005a64:	f000 80c4 	beq.w	8005bf0 <_dtoa_r+0x8a8>
 8005a68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a6a:	2a01      	cmp	r2, #1
 8005a6c:	f300 80a8 	bgt.w	8005bc0 <_dtoa_r+0x878>
 8005a70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	f000 80a0 	beq.w	8005bb8 <_dtoa_r+0x870>
 8005a78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a7c:	464f      	mov	r7, r9
 8005a7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a82:	2101      	movs	r1, #1
 8005a84:	441a      	add	r2, r3
 8005a86:	4628      	mov	r0, r5
 8005a88:	4499      	add	r9, r3
 8005a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8c:	f000 fc32 	bl	80062f4 <__i2b>
 8005a90:	4606      	mov	r6, r0
 8005a92:	b15f      	cbz	r7, 8005aac <_dtoa_r+0x764>
 8005a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd08      	ble.n	8005aac <_dtoa_r+0x764>
 8005a9a:	42bb      	cmp	r3, r7
 8005a9c:	bfa8      	it	ge
 8005a9e:	463b      	movge	r3, r7
 8005aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aa2:	eba9 0903 	sub.w	r9, r9, r3
 8005aa6:	1aff      	subs	r7, r7, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aae:	b1f3      	cbz	r3, 8005aee <_dtoa_r+0x7a6>
 8005ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80a0 	beq.w	8005bf8 <_dtoa_r+0x8b0>
 8005ab8:	2c00      	cmp	r4, #0
 8005aba:	dd10      	ble.n	8005ade <_dtoa_r+0x796>
 8005abc:	4631      	mov	r1, r6
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 fcd5 	bl	8006470 <__pow5mult>
 8005ac6:	4652      	mov	r2, sl
 8005ac8:	4601      	mov	r1, r0
 8005aca:	4606      	mov	r6, r0
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 fc27 	bl	8006320 <__multiply>
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	4651      	mov	r1, sl
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 fb56 	bl	8006188 <_Bfree>
 8005adc:	46c2      	mov	sl, r8
 8005ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae0:	1b1a      	subs	r2, r3, r4
 8005ae2:	d004      	beq.n	8005aee <_dtoa_r+0x7a6>
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fcc2 	bl	8006470 <__pow5mult>
 8005aec:	4682      	mov	sl, r0
 8005aee:	2101      	movs	r1, #1
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 fbff 	bl	80062f4 <__i2b>
 8005af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af8:	4604      	mov	r4, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f340 8082 	ble.w	8005c04 <_dtoa_r+0x8bc>
 8005b00:	461a      	mov	r2, r3
 8005b02:	4601      	mov	r1, r0
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 fcb3 	bl	8006470 <__pow5mult>
 8005b0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	dd7b      	ble.n	8005c0a <_dtoa_r+0x8c2>
 8005b12:	f04f 0800 	mov.w	r8, #0
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b1c:	6918      	ldr	r0, [r3, #16]
 8005b1e:	f000 fb9b 	bl	8006258 <__hi0bits>
 8005b22:	f1c0 0020 	rsb	r0, r0, #32
 8005b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b28:	4418      	add	r0, r3
 8005b2a:	f010 001f 	ands.w	r0, r0, #31
 8005b2e:	f000 8092 	beq.w	8005c56 <_dtoa_r+0x90e>
 8005b32:	f1c0 0320 	rsb	r3, r0, #32
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	f340 8085 	ble.w	8005c46 <_dtoa_r+0x8fe>
 8005b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3e:	f1c0 001c 	rsb	r0, r0, #28
 8005b42:	4403      	add	r3, r0
 8005b44:	4481      	add	r9, r0
 8005b46:	4407      	add	r7, r0
 8005b48:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4a:	f1b9 0f00 	cmp.w	r9, #0
 8005b4e:	dd05      	ble.n	8005b5c <_dtoa_r+0x814>
 8005b50:	4651      	mov	r1, sl
 8005b52:	464a      	mov	r2, r9
 8005b54:	4628      	mov	r0, r5
 8005b56:	f000 fce5 	bl	8006524 <__lshift>
 8005b5a:	4682      	mov	sl, r0
 8005b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dd05      	ble.n	8005b6e <_dtoa_r+0x826>
 8005b62:	4621      	mov	r1, r4
 8005b64:	461a      	mov	r2, r3
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 fcdc 	bl	8006524 <__lshift>
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d072      	beq.n	8005c5a <_dtoa_r+0x912>
 8005b74:	4621      	mov	r1, r4
 8005b76:	4650      	mov	r0, sl
 8005b78:	f000 fd40 	bl	80065fc <__mcmp>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	da6c      	bge.n	8005c5a <_dtoa_r+0x912>
 8005b80:	2300      	movs	r3, #0
 8005b82:	4651      	mov	r1, sl
 8005b84:	220a      	movs	r2, #10
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 fb20 	bl	80061cc <__multadd>
 8005b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b8e:	4682      	mov	sl, r0
 8005b90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 81ac 	beq.w	8005ef2 <_dtoa_r+0xbaa>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 fb13 	bl	80061cc <__multadd>
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	4606      	mov	r6, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f300 8093 	bgt.w	8005cd6 <_dtoa_r+0x98e>
 8005bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	dc59      	bgt.n	8005c6a <_dtoa_r+0x922>
 8005bb6:	e08e      	b.n	8005cd6 <_dtoa_r+0x98e>
 8005bb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bbe:	e75d      	b.n	8005a7c <_dtoa_r+0x734>
 8005bc0:	9b08      	ldr	r3, [sp, #32]
 8005bc2:	1e5c      	subs	r4, r3, #1
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	42a3      	cmp	r3, r4
 8005bc8:	bfbf      	itttt	lt
 8005bca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005bcc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005bce:	1ae3      	sublt	r3, r4, r3
 8005bd0:	18d2      	addlt	r2, r2, r3
 8005bd2:	bfa8      	it	ge
 8005bd4:	1b1c      	subge	r4, r3, r4
 8005bd6:	9b08      	ldr	r3, [sp, #32]
 8005bd8:	bfbe      	ittt	lt
 8005bda:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005bdc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005bde:	2400      	movlt	r4, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bfb5      	itete	lt
 8005be4:	eba9 0703 	sublt.w	r7, r9, r3
 8005be8:	464f      	movge	r7, r9
 8005bea:	2300      	movlt	r3, #0
 8005bec:	9b08      	ldrge	r3, [sp, #32]
 8005bee:	e747      	b.n	8005a80 <_dtoa_r+0x738>
 8005bf0:	464f      	mov	r7, r9
 8005bf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bf4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005bf6:	e74c      	b.n	8005a92 <_dtoa_r+0x74a>
 8005bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bfa:	e773      	b.n	8005ae4 <_dtoa_r+0x79c>
 8005bfc:	3fe00000 	.word	0x3fe00000
 8005c00:	40240000 	.word	0x40240000
 8005c04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	dc18      	bgt.n	8005c3c <_dtoa_r+0x8f4>
 8005c0a:	9b04      	ldr	r3, [sp, #16]
 8005c0c:	b9b3      	cbnz	r3, 8005c3c <_dtoa_r+0x8f4>
 8005c0e:	9b05      	ldr	r3, [sp, #20]
 8005c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c14:	b993      	cbnz	r3, 8005c3c <_dtoa_r+0x8f4>
 8005c16:	9b05      	ldr	r3, [sp, #20]
 8005c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1c:	0d1b      	lsrs	r3, r3, #20
 8005c1e:	051b      	lsls	r3, r3, #20
 8005c20:	b17b      	cbz	r3, 8005c42 <_dtoa_r+0x8fa>
 8005c22:	f04f 0801 	mov.w	r8, #1
 8005c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c28:	f109 0901 	add.w	r9, r9, #1
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f47f af6f 	bne.w	8005b16 <_dtoa_r+0x7ce>
 8005c38:	2001      	movs	r0, #1
 8005c3a:	e774      	b.n	8005b26 <_dtoa_r+0x7de>
 8005c3c:	f04f 0800 	mov.w	r8, #0
 8005c40:	e7f6      	b.n	8005c30 <_dtoa_r+0x8e8>
 8005c42:	4698      	mov	r8, r3
 8005c44:	e7f4      	b.n	8005c30 <_dtoa_r+0x8e8>
 8005c46:	d080      	beq.n	8005b4a <_dtoa_r+0x802>
 8005c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c4a:	331c      	adds	r3, #28
 8005c4c:	441a      	add	r2, r3
 8005c4e:	4499      	add	r9, r3
 8005c50:	441f      	add	r7, r3
 8005c52:	9209      	str	r2, [sp, #36]	; 0x24
 8005c54:	e779      	b.n	8005b4a <_dtoa_r+0x802>
 8005c56:	4603      	mov	r3, r0
 8005c58:	e7f6      	b.n	8005c48 <_dtoa_r+0x900>
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dc34      	bgt.n	8005cca <_dtoa_r+0x982>
 8005c60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	dd31      	ble.n	8005cca <_dtoa_r+0x982>
 8005c66:	9b08      	ldr	r3, [sp, #32]
 8005c68:	9306      	str	r3, [sp, #24]
 8005c6a:	9b06      	ldr	r3, [sp, #24]
 8005c6c:	b963      	cbnz	r3, 8005c88 <_dtoa_r+0x940>
 8005c6e:	4621      	mov	r1, r4
 8005c70:	2205      	movs	r2, #5
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 faaa 	bl	80061cc <__multadd>
 8005c78:	4601      	mov	r1, r0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	f000 fcbd 	bl	80065fc <__mcmp>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f73f adbf 	bgt.w	8005806 <_dtoa_r+0x4be>
 8005c88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c8a:	9f03      	ldr	r7, [sp, #12]
 8005c8c:	ea6f 0b03 	mvn.w	fp, r3
 8005c90:	f04f 0800 	mov.w	r8, #0
 8005c94:	4621      	mov	r1, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 fa76 	bl	8006188 <_Bfree>
 8005c9c:	2e00      	cmp	r6, #0
 8005c9e:	f43f aead 	beq.w	80059fc <_dtoa_r+0x6b4>
 8005ca2:	f1b8 0f00 	cmp.w	r8, #0
 8005ca6:	d005      	beq.n	8005cb4 <_dtoa_r+0x96c>
 8005ca8:	45b0      	cmp	r8, r6
 8005caa:	d003      	beq.n	8005cb4 <_dtoa_r+0x96c>
 8005cac:	4641      	mov	r1, r8
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 fa6a 	bl	8006188 <_Bfree>
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 fa66 	bl	8006188 <_Bfree>
 8005cbc:	e69e      	b.n	80059fc <_dtoa_r+0x6b4>
 8005cbe:	2400      	movs	r4, #0
 8005cc0:	4626      	mov	r6, r4
 8005cc2:	e7e1      	b.n	8005c88 <_dtoa_r+0x940>
 8005cc4:	46c3      	mov	fp, r8
 8005cc6:	4626      	mov	r6, r4
 8005cc8:	e59d      	b.n	8005806 <_dtoa_r+0x4be>
 8005cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80c8 	beq.w	8005e62 <_dtoa_r+0xb1a>
 8005cd2:	9b08      	ldr	r3, [sp, #32]
 8005cd4:	9306      	str	r3, [sp, #24]
 8005cd6:	2f00      	cmp	r7, #0
 8005cd8:	dd05      	ble.n	8005ce6 <_dtoa_r+0x99e>
 8005cda:	4631      	mov	r1, r6
 8005cdc:	463a      	mov	r2, r7
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 fc20 	bl	8006524 <__lshift>
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	f1b8 0f00 	cmp.w	r8, #0
 8005cea:	d05b      	beq.n	8005da4 <_dtoa_r+0xa5c>
 8005cec:	4628      	mov	r0, r5
 8005cee:	6871      	ldr	r1, [r6, #4]
 8005cf0:	f000 fa0a 	bl	8006108 <_Balloc>
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	b928      	cbnz	r0, 8005d04 <_dtoa_r+0x9bc>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005cfe:	4b81      	ldr	r3, [pc, #516]	; (8005f04 <_dtoa_r+0xbbc>)
 8005d00:	f7ff bb36 	b.w	8005370 <_dtoa_r+0x28>
 8005d04:	6932      	ldr	r2, [r6, #16]
 8005d06:	f106 010c 	add.w	r1, r6, #12
 8005d0a:	3202      	adds	r2, #2
 8005d0c:	0092      	lsls	r2, r2, #2
 8005d0e:	300c      	adds	r0, #12
 8005d10:	f000 fe2c 	bl	800696c <memcpy>
 8005d14:	2201      	movs	r2, #1
 8005d16:	4639      	mov	r1, r7
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 fc03 	bl	8006524 <__lshift>
 8005d1e:	46b0      	mov	r8, r6
 8005d20:	4606      	mov	r6, r0
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	9a03      	ldr	r2, [sp, #12]
 8005d26:	3301      	adds	r3, #1
 8005d28:	9308      	str	r3, [sp, #32]
 8005d2a:	9b06      	ldr	r3, [sp, #24]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d30:	9b04      	ldr	r3, [sp, #16]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	930a      	str	r3, [sp, #40]	; 0x28
 8005d38:	9b08      	ldr	r3, [sp, #32]
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4650      	mov	r0, sl
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	f7ff fa76 	bl	8005232 <quorem>
 8005d46:	4641      	mov	r1, r8
 8005d48:	9006      	str	r0, [sp, #24]
 8005d4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d4e:	4650      	mov	r0, sl
 8005d50:	f000 fc54 	bl	80065fc <__mcmp>
 8005d54:	4632      	mov	r2, r6
 8005d56:	9009      	str	r0, [sp, #36]	; 0x24
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f000 fc6a 	bl	8006634 <__mdiff>
 8005d60:	68c2      	ldr	r2, [r0, #12]
 8005d62:	4607      	mov	r7, r0
 8005d64:	bb02      	cbnz	r2, 8005da8 <_dtoa_r+0xa60>
 8005d66:	4601      	mov	r1, r0
 8005d68:	4650      	mov	r0, sl
 8005d6a:	f000 fc47 	bl	80065fc <__mcmp>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4639      	mov	r1, r7
 8005d72:	4628      	mov	r0, r5
 8005d74:	920c      	str	r2, [sp, #48]	; 0x30
 8005d76:	f000 fa07 	bl	8006188 <_Bfree>
 8005d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d7e:	9f08      	ldr	r7, [sp, #32]
 8005d80:	ea43 0102 	orr.w	r1, r3, r2
 8005d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d86:	4319      	orrs	r1, r3
 8005d88:	d110      	bne.n	8005dac <_dtoa_r+0xa64>
 8005d8a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d8e:	d029      	beq.n	8005de4 <_dtoa_r+0xa9c>
 8005d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dd02      	ble.n	8005d9c <_dtoa_r+0xa54>
 8005d96:	9b06      	ldr	r3, [sp, #24]
 8005d98:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	f883 9000 	strb.w	r9, [r3]
 8005da2:	e777      	b.n	8005c94 <_dtoa_r+0x94c>
 8005da4:	4630      	mov	r0, r6
 8005da6:	e7ba      	b.n	8005d1e <_dtoa_r+0x9d6>
 8005da8:	2201      	movs	r2, #1
 8005daa:	e7e1      	b.n	8005d70 <_dtoa_r+0xa28>
 8005dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	db04      	blt.n	8005dbc <_dtoa_r+0xa74>
 8005db2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005db4:	430b      	orrs	r3, r1
 8005db6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005db8:	430b      	orrs	r3, r1
 8005dba:	d120      	bne.n	8005dfe <_dtoa_r+0xab6>
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	dded      	ble.n	8005d9c <_dtoa_r+0xa54>
 8005dc0:	4651      	mov	r1, sl
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 fbad 	bl	8006524 <__lshift>
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4682      	mov	sl, r0
 8005dce:	f000 fc15 	bl	80065fc <__mcmp>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	dc03      	bgt.n	8005dde <_dtoa_r+0xa96>
 8005dd6:	d1e1      	bne.n	8005d9c <_dtoa_r+0xa54>
 8005dd8:	f019 0f01 	tst.w	r9, #1
 8005ddc:	d0de      	beq.n	8005d9c <_dtoa_r+0xa54>
 8005dde:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005de2:	d1d8      	bne.n	8005d96 <_dtoa_r+0xa4e>
 8005de4:	2339      	movs	r3, #57	; 0x39
 8005de6:	9a04      	ldr	r2, [sp, #16]
 8005de8:	7013      	strb	r3, [r2, #0]
 8005dea:	463b      	mov	r3, r7
 8005dec:	461f      	mov	r7, r3
 8005dee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	2a39      	cmp	r2, #57	; 0x39
 8005df6:	d06b      	beq.n	8005ed0 <_dtoa_r+0xb88>
 8005df8:	3201      	adds	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e74a      	b.n	8005c94 <_dtoa_r+0x94c>
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	dd07      	ble.n	8005e12 <_dtoa_r+0xaca>
 8005e02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e06:	d0ed      	beq.n	8005de4 <_dtoa_r+0xa9c>
 8005e08:	9a04      	ldr	r2, [sp, #16]
 8005e0a:	f109 0301 	add.w	r3, r9, #1
 8005e0e:	7013      	strb	r3, [r2, #0]
 8005e10:	e740      	b.n	8005c94 <_dtoa_r+0x94c>
 8005e12:	9b08      	ldr	r3, [sp, #32]
 8005e14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e16:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d042      	beq.n	8005ea4 <_dtoa_r+0xb5c>
 8005e1e:	4651      	mov	r1, sl
 8005e20:	2300      	movs	r3, #0
 8005e22:	220a      	movs	r2, #10
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 f9d1 	bl	80061cc <__multadd>
 8005e2a:	45b0      	cmp	r8, r6
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	f04f 020a 	mov.w	r2, #10
 8005e36:	4641      	mov	r1, r8
 8005e38:	4628      	mov	r0, r5
 8005e3a:	d107      	bne.n	8005e4c <_dtoa_r+0xb04>
 8005e3c:	f000 f9c6 	bl	80061cc <__multadd>
 8005e40:	4680      	mov	r8, r0
 8005e42:	4606      	mov	r6, r0
 8005e44:	9b08      	ldr	r3, [sp, #32]
 8005e46:	3301      	adds	r3, #1
 8005e48:	9308      	str	r3, [sp, #32]
 8005e4a:	e775      	b.n	8005d38 <_dtoa_r+0x9f0>
 8005e4c:	f000 f9be 	bl	80061cc <__multadd>
 8005e50:	4631      	mov	r1, r6
 8005e52:	4680      	mov	r8, r0
 8005e54:	2300      	movs	r3, #0
 8005e56:	220a      	movs	r2, #10
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 f9b7 	bl	80061cc <__multadd>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	e7f0      	b.n	8005e44 <_dtoa_r+0xafc>
 8005e62:	9b08      	ldr	r3, [sp, #32]
 8005e64:	9306      	str	r3, [sp, #24]
 8005e66:	9f03      	ldr	r7, [sp, #12]
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4650      	mov	r0, sl
 8005e6c:	f7ff f9e1 	bl	8005232 <quorem>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e76:	f807 9b01 	strb.w	r9, [r7], #1
 8005e7a:	1afa      	subs	r2, r7, r3
 8005e7c:	9b06      	ldr	r3, [sp, #24]
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	dd07      	ble.n	8005e92 <_dtoa_r+0xb4a>
 8005e82:	4651      	mov	r1, sl
 8005e84:	2300      	movs	r3, #0
 8005e86:	220a      	movs	r2, #10
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f000 f99f 	bl	80061cc <__multadd>
 8005e8e:	4682      	mov	sl, r0
 8005e90:	e7ea      	b.n	8005e68 <_dtoa_r+0xb20>
 8005e92:	9b06      	ldr	r3, [sp, #24]
 8005e94:	f04f 0800 	mov.w	r8, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfcc      	ite	gt
 8005e9c:	461f      	movgt	r7, r3
 8005e9e:	2701      	movle	r7, #1
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	441f      	add	r7, r3
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f000 fb3b 	bl	8006524 <__lshift>
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	f000 fba3 	bl	80065fc <__mcmp>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	dc97      	bgt.n	8005dea <_dtoa_r+0xaa2>
 8005eba:	d102      	bne.n	8005ec2 <_dtoa_r+0xb7a>
 8005ebc:	f019 0f01 	tst.w	r9, #1
 8005ec0:	d193      	bne.n	8005dea <_dtoa_r+0xaa2>
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	461f      	mov	r7, r3
 8005ec6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eca:	2a30      	cmp	r2, #48	; 0x30
 8005ecc:	d0fa      	beq.n	8005ec4 <_dtoa_r+0xb7c>
 8005ece:	e6e1      	b.n	8005c94 <_dtoa_r+0x94c>
 8005ed0:	9a03      	ldr	r2, [sp, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d18a      	bne.n	8005dec <_dtoa_r+0xaa4>
 8005ed6:	2331      	movs	r3, #49	; 0x31
 8005ed8:	f10b 0b01 	add.w	fp, fp, #1
 8005edc:	e797      	b.n	8005e0e <_dtoa_r+0xac6>
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <_dtoa_r+0xbc0>)
 8005ee0:	f7ff ba9f 	b.w	8005422 <_dtoa_r+0xda>
 8005ee4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f47f aa77 	bne.w	80053da <_dtoa_r+0x92>
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <_dtoa_r+0xbc4>)
 8005eee:	f7ff ba98 	b.w	8005422 <_dtoa_r+0xda>
 8005ef2:	9b06      	ldr	r3, [sp, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dcb6      	bgt.n	8005e66 <_dtoa_r+0xb1e>
 8005ef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	f73f aeb5 	bgt.w	8005c6a <_dtoa_r+0x922>
 8005f00:	e7b1      	b.n	8005e66 <_dtoa_r+0xb1e>
 8005f02:	bf00      	nop
 8005f04:	080070a6 	.word	0x080070a6
 8005f08:	08007006 	.word	0x08007006
 8005f0c:	0800702a 	.word	0x0800702a

08005f10 <_free_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4605      	mov	r5, r0
 8005f14:	2900      	cmp	r1, #0
 8005f16:	d040      	beq.n	8005f9a <_free_r+0x8a>
 8005f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f1c:	1f0c      	subs	r4, r1, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bfb8      	it	lt
 8005f22:	18e4      	addlt	r4, r4, r3
 8005f24:	f000 f8e4 	bl	80060f0 <__malloc_lock>
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <_free_r+0x8c>)
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	b933      	cbnz	r3, 8005f3c <_free_r+0x2c>
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	6014      	str	r4, [r2, #0]
 8005f32:	4628      	mov	r0, r5
 8005f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f38:	f000 b8e0 	b.w	80060fc <__malloc_unlock>
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d908      	bls.n	8005f52 <_free_r+0x42>
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	1821      	adds	r1, r4, r0
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf01      	itttt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	1809      	addeq	r1, r1, r0
 8005f4e:	6021      	streq	r1, [r4, #0]
 8005f50:	e7ed      	b.n	8005f2e <_free_r+0x1e>
 8005f52:	461a      	mov	r2, r3
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b10b      	cbz	r3, 8005f5c <_free_r+0x4c>
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d9fa      	bls.n	8005f52 <_free_r+0x42>
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	1850      	adds	r0, r2, r1
 8005f60:	42a0      	cmp	r0, r4
 8005f62:	d10b      	bne.n	8005f7c <_free_r+0x6c>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	4401      	add	r1, r0
 8005f68:	1850      	adds	r0, r2, r1
 8005f6a:	4283      	cmp	r3, r0
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	d1e0      	bne.n	8005f32 <_free_r+0x22>
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4408      	add	r0, r1
 8005f76:	6010      	str	r0, [r2, #0]
 8005f78:	6053      	str	r3, [r2, #4]
 8005f7a:	e7da      	b.n	8005f32 <_free_r+0x22>
 8005f7c:	d902      	bls.n	8005f84 <_free_r+0x74>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	602b      	str	r3, [r5, #0]
 8005f82:	e7d6      	b.n	8005f32 <_free_r+0x22>
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	1821      	adds	r1, r4, r0
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	bf01      	itttt	eq
 8005f8c:	6819      	ldreq	r1, [r3, #0]
 8005f8e:	685b      	ldreq	r3, [r3, #4]
 8005f90:	1809      	addeq	r1, r1, r0
 8005f92:	6021      	streq	r1, [r4, #0]
 8005f94:	6063      	str	r3, [r4, #4]
 8005f96:	6054      	str	r4, [r2, #4]
 8005f98:	e7cb      	b.n	8005f32 <_free_r+0x22>
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	2000047c 	.word	0x2000047c

08005fa0 <malloc>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <malloc+0xc>)
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	f000 b823 	b.w	8005ff0 <_malloc_r>
 8005faa:	bf00      	nop
 8005fac:	20000068 	.word	0x20000068

08005fb0 <sbrk_aligned>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4e0e      	ldr	r6, [pc, #56]	; (8005fec <sbrk_aligned+0x3c>)
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	6831      	ldr	r1, [r6, #0]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	b911      	cbnz	r1, 8005fc2 <sbrk_aligned+0x12>
 8005fbc:	f000 fcc6 	bl	800694c <_sbrk_r>
 8005fc0:	6030      	str	r0, [r6, #0]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fcc1 	bl	800694c <_sbrk_r>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d00a      	beq.n	8005fe4 <sbrk_aligned+0x34>
 8005fce:	1cc4      	adds	r4, r0, #3
 8005fd0:	f024 0403 	bic.w	r4, r4, #3
 8005fd4:	42a0      	cmp	r0, r4
 8005fd6:	d007      	beq.n	8005fe8 <sbrk_aligned+0x38>
 8005fd8:	1a21      	subs	r1, r4, r0
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 fcb6 	bl	800694c <_sbrk_r>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d101      	bne.n	8005fe8 <sbrk_aligned+0x38>
 8005fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8005fe8:	4620      	mov	r0, r4
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	20000480 	.word	0x20000480

08005ff0 <_malloc_r>:
 8005ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	1ccd      	adds	r5, r1, #3
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	2d00      	cmp	r5, #0
 8006004:	4607      	mov	r7, r0
 8006006:	db01      	blt.n	800600c <_malloc_r+0x1c>
 8006008:	42a9      	cmp	r1, r5
 800600a:	d905      	bls.n	8006018 <_malloc_r+0x28>
 800600c:	230c      	movs	r3, #12
 800600e:	2600      	movs	r6, #0
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4630      	mov	r0, r6
 8006014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006018:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060ec <_malloc_r+0xfc>
 800601c:	f000 f868 	bl	80060f0 <__malloc_lock>
 8006020:	f8d8 3000 	ldr.w	r3, [r8]
 8006024:	461c      	mov	r4, r3
 8006026:	bb5c      	cbnz	r4, 8006080 <_malloc_r+0x90>
 8006028:	4629      	mov	r1, r5
 800602a:	4638      	mov	r0, r7
 800602c:	f7ff ffc0 	bl	8005fb0 <sbrk_aligned>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	4604      	mov	r4, r0
 8006034:	d155      	bne.n	80060e2 <_malloc_r+0xf2>
 8006036:	f8d8 4000 	ldr.w	r4, [r8]
 800603a:	4626      	mov	r6, r4
 800603c:	2e00      	cmp	r6, #0
 800603e:	d145      	bne.n	80060cc <_malloc_r+0xdc>
 8006040:	2c00      	cmp	r4, #0
 8006042:	d048      	beq.n	80060d6 <_malloc_r+0xe6>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	4631      	mov	r1, r6
 8006048:	4638      	mov	r0, r7
 800604a:	eb04 0903 	add.w	r9, r4, r3
 800604e:	f000 fc7d 	bl	800694c <_sbrk_r>
 8006052:	4581      	cmp	r9, r0
 8006054:	d13f      	bne.n	80060d6 <_malloc_r+0xe6>
 8006056:	6821      	ldr	r1, [r4, #0]
 8006058:	4638      	mov	r0, r7
 800605a:	1a6d      	subs	r5, r5, r1
 800605c:	4629      	mov	r1, r5
 800605e:	f7ff ffa7 	bl	8005fb0 <sbrk_aligned>
 8006062:	3001      	adds	r0, #1
 8006064:	d037      	beq.n	80060d6 <_malloc_r+0xe6>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	442b      	add	r3, r5
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	f8d8 3000 	ldr.w	r3, [r8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d038      	beq.n	80060e6 <_malloc_r+0xf6>
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	42a2      	cmp	r2, r4
 8006078:	d12b      	bne.n	80060d2 <_malloc_r+0xe2>
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	e00f      	b.n	80060a0 <_malloc_r+0xb0>
 8006080:	6822      	ldr	r2, [r4, #0]
 8006082:	1b52      	subs	r2, r2, r5
 8006084:	d41f      	bmi.n	80060c6 <_malloc_r+0xd6>
 8006086:	2a0b      	cmp	r2, #11
 8006088:	d917      	bls.n	80060ba <_malloc_r+0xca>
 800608a:	1961      	adds	r1, r4, r5
 800608c:	42a3      	cmp	r3, r4
 800608e:	6025      	str	r5, [r4, #0]
 8006090:	bf18      	it	ne
 8006092:	6059      	strne	r1, [r3, #4]
 8006094:	6863      	ldr	r3, [r4, #4]
 8006096:	bf08      	it	eq
 8006098:	f8c8 1000 	streq.w	r1, [r8]
 800609c:	5162      	str	r2, [r4, r5]
 800609e:	604b      	str	r3, [r1, #4]
 80060a0:	4638      	mov	r0, r7
 80060a2:	f104 060b 	add.w	r6, r4, #11
 80060a6:	f000 f829 	bl	80060fc <__malloc_unlock>
 80060aa:	f026 0607 	bic.w	r6, r6, #7
 80060ae:	1d23      	adds	r3, r4, #4
 80060b0:	1af2      	subs	r2, r6, r3
 80060b2:	d0ae      	beq.n	8006012 <_malloc_r+0x22>
 80060b4:	1b9b      	subs	r3, r3, r6
 80060b6:	50a3      	str	r3, [r4, r2]
 80060b8:	e7ab      	b.n	8006012 <_malloc_r+0x22>
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	6862      	ldr	r2, [r4, #4]
 80060be:	d1dd      	bne.n	800607c <_malloc_r+0x8c>
 80060c0:	f8c8 2000 	str.w	r2, [r8]
 80060c4:	e7ec      	b.n	80060a0 <_malloc_r+0xb0>
 80060c6:	4623      	mov	r3, r4
 80060c8:	6864      	ldr	r4, [r4, #4]
 80060ca:	e7ac      	b.n	8006026 <_malloc_r+0x36>
 80060cc:	4634      	mov	r4, r6
 80060ce:	6876      	ldr	r6, [r6, #4]
 80060d0:	e7b4      	b.n	800603c <_malloc_r+0x4c>
 80060d2:	4613      	mov	r3, r2
 80060d4:	e7cc      	b.n	8006070 <_malloc_r+0x80>
 80060d6:	230c      	movs	r3, #12
 80060d8:	4638      	mov	r0, r7
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	f000 f80e 	bl	80060fc <__malloc_unlock>
 80060e0:	e797      	b.n	8006012 <_malloc_r+0x22>
 80060e2:	6025      	str	r5, [r4, #0]
 80060e4:	e7dc      	b.n	80060a0 <_malloc_r+0xb0>
 80060e6:	605b      	str	r3, [r3, #4]
 80060e8:	deff      	udf	#255	; 0xff
 80060ea:	bf00      	nop
 80060ec:	2000047c 	.word	0x2000047c

080060f0 <__malloc_lock>:
 80060f0:	4801      	ldr	r0, [pc, #4]	; (80060f8 <__malloc_lock+0x8>)
 80060f2:	f7ff b88e 	b.w	8005212 <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	20000478 	.word	0x20000478

080060fc <__malloc_unlock>:
 80060fc:	4801      	ldr	r0, [pc, #4]	; (8006104 <__malloc_unlock+0x8>)
 80060fe:	f7ff b889 	b.w	8005214 <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	20000478 	.word	0x20000478

08006108 <_Balloc>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	69c6      	ldr	r6, [r0, #28]
 800610c:	4604      	mov	r4, r0
 800610e:	460d      	mov	r5, r1
 8006110:	b976      	cbnz	r6, 8006130 <_Balloc+0x28>
 8006112:	2010      	movs	r0, #16
 8006114:	f7ff ff44 	bl	8005fa0 <malloc>
 8006118:	4602      	mov	r2, r0
 800611a:	61e0      	str	r0, [r4, #28]
 800611c:	b920      	cbnz	r0, 8006128 <_Balloc+0x20>
 800611e:	216b      	movs	r1, #107	; 0x6b
 8006120:	4b17      	ldr	r3, [pc, #92]	; (8006180 <_Balloc+0x78>)
 8006122:	4818      	ldr	r0, [pc, #96]	; (8006184 <_Balloc+0x7c>)
 8006124:	f000 fc30 	bl	8006988 <__assert_func>
 8006128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800612c:	6006      	str	r6, [r0, #0]
 800612e:	60c6      	str	r6, [r0, #12]
 8006130:	69e6      	ldr	r6, [r4, #28]
 8006132:	68f3      	ldr	r3, [r6, #12]
 8006134:	b183      	cbz	r3, 8006158 <_Balloc+0x50>
 8006136:	69e3      	ldr	r3, [r4, #28]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800613e:	b9b8      	cbnz	r0, 8006170 <_Balloc+0x68>
 8006140:	2101      	movs	r1, #1
 8006142:	fa01 f605 	lsl.w	r6, r1, r5
 8006146:	1d72      	adds	r2, r6, #5
 8006148:	4620      	mov	r0, r4
 800614a:	0092      	lsls	r2, r2, #2
 800614c:	f000 fc3a 	bl	80069c4 <_calloc_r>
 8006150:	b160      	cbz	r0, 800616c <_Balloc+0x64>
 8006152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006156:	e00e      	b.n	8006176 <_Balloc+0x6e>
 8006158:	2221      	movs	r2, #33	; 0x21
 800615a:	2104      	movs	r1, #4
 800615c:	4620      	mov	r0, r4
 800615e:	f000 fc31 	bl	80069c4 <_calloc_r>
 8006162:	69e3      	ldr	r3, [r4, #28]
 8006164:	60f0      	str	r0, [r6, #12]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e4      	bne.n	8006136 <_Balloc+0x2e>
 800616c:	2000      	movs	r0, #0
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	6802      	ldr	r2, [r0, #0]
 8006172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006176:	2300      	movs	r3, #0
 8006178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800617c:	e7f7      	b.n	800616e <_Balloc+0x66>
 800617e:	bf00      	nop
 8006180:	08007037 	.word	0x08007037
 8006184:	080070b7 	.word	0x080070b7

08006188 <_Bfree>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	69c6      	ldr	r6, [r0, #28]
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b976      	cbnz	r6, 80061b0 <_Bfree+0x28>
 8006192:	2010      	movs	r0, #16
 8006194:	f7ff ff04 	bl	8005fa0 <malloc>
 8006198:	4602      	mov	r2, r0
 800619a:	61e8      	str	r0, [r5, #28]
 800619c:	b920      	cbnz	r0, 80061a8 <_Bfree+0x20>
 800619e:	218f      	movs	r1, #143	; 0x8f
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <_Bfree+0x3c>)
 80061a2:	4809      	ldr	r0, [pc, #36]	; (80061c8 <_Bfree+0x40>)
 80061a4:	f000 fbf0 	bl	8006988 <__assert_func>
 80061a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061ac:	6006      	str	r6, [r0, #0]
 80061ae:	60c6      	str	r6, [r0, #12]
 80061b0:	b13c      	cbz	r4, 80061c2 <_Bfree+0x3a>
 80061b2:	69eb      	ldr	r3, [r5, #28]
 80061b4:	6862      	ldr	r2, [r4, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061bc:	6021      	str	r1, [r4, #0]
 80061be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	08007037 	.word	0x08007037
 80061c8:	080070b7 	.word	0x080070b7

080061cc <__multadd>:
 80061cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d0:	4607      	mov	r7, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	461e      	mov	r6, r3
 80061d6:	2000      	movs	r0, #0
 80061d8:	690d      	ldr	r5, [r1, #16]
 80061da:	f101 0c14 	add.w	ip, r1, #20
 80061de:	f8dc 3000 	ldr.w	r3, [ip]
 80061e2:	3001      	adds	r0, #1
 80061e4:	b299      	uxth	r1, r3
 80061e6:	fb02 6101 	mla	r1, r2, r1, r6
 80061ea:	0c1e      	lsrs	r6, r3, #16
 80061ec:	0c0b      	lsrs	r3, r1, #16
 80061ee:	fb02 3306 	mla	r3, r2, r6, r3
 80061f2:	b289      	uxth	r1, r1
 80061f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061f8:	4285      	cmp	r5, r0
 80061fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061fe:	f84c 1b04 	str.w	r1, [ip], #4
 8006202:	dcec      	bgt.n	80061de <__multadd+0x12>
 8006204:	b30e      	cbz	r6, 800624a <__multadd+0x7e>
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	42ab      	cmp	r3, r5
 800620a:	dc19      	bgt.n	8006240 <__multadd+0x74>
 800620c:	6861      	ldr	r1, [r4, #4]
 800620e:	4638      	mov	r0, r7
 8006210:	3101      	adds	r1, #1
 8006212:	f7ff ff79 	bl	8006108 <_Balloc>
 8006216:	4680      	mov	r8, r0
 8006218:	b928      	cbnz	r0, 8006226 <__multadd+0x5a>
 800621a:	4602      	mov	r2, r0
 800621c:	21ba      	movs	r1, #186	; 0xba
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <__multadd+0x84>)
 8006220:	480c      	ldr	r0, [pc, #48]	; (8006254 <__multadd+0x88>)
 8006222:	f000 fbb1 	bl	8006988 <__assert_func>
 8006226:	6922      	ldr	r2, [r4, #16]
 8006228:	f104 010c 	add.w	r1, r4, #12
 800622c:	3202      	adds	r2, #2
 800622e:	0092      	lsls	r2, r2, #2
 8006230:	300c      	adds	r0, #12
 8006232:	f000 fb9b 	bl	800696c <memcpy>
 8006236:	4621      	mov	r1, r4
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff ffa5 	bl	8006188 <_Bfree>
 800623e:	4644      	mov	r4, r8
 8006240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006244:	3501      	adds	r5, #1
 8006246:	615e      	str	r6, [r3, #20]
 8006248:	6125      	str	r5, [r4, #16]
 800624a:	4620      	mov	r0, r4
 800624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006250:	080070a6 	.word	0x080070a6
 8006254:	080070b7 	.word	0x080070b7

08006258 <__hi0bits>:
 8006258:	0c02      	lsrs	r2, r0, #16
 800625a:	0412      	lsls	r2, r2, #16
 800625c:	4603      	mov	r3, r0
 800625e:	b9ca      	cbnz	r2, 8006294 <__hi0bits+0x3c>
 8006260:	0403      	lsls	r3, r0, #16
 8006262:	2010      	movs	r0, #16
 8006264:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006268:	bf04      	itt	eq
 800626a:	021b      	lsleq	r3, r3, #8
 800626c:	3008      	addeq	r0, #8
 800626e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006272:	bf04      	itt	eq
 8006274:	011b      	lsleq	r3, r3, #4
 8006276:	3004      	addeq	r0, #4
 8006278:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800627c:	bf04      	itt	eq
 800627e:	009b      	lsleq	r3, r3, #2
 8006280:	3002      	addeq	r0, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	db05      	blt.n	8006292 <__hi0bits+0x3a>
 8006286:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800628a:	f100 0001 	add.w	r0, r0, #1
 800628e:	bf08      	it	eq
 8006290:	2020      	moveq	r0, #32
 8006292:	4770      	bx	lr
 8006294:	2000      	movs	r0, #0
 8006296:	e7e5      	b.n	8006264 <__hi0bits+0xc>

08006298 <__lo0bits>:
 8006298:	6803      	ldr	r3, [r0, #0]
 800629a:	4602      	mov	r2, r0
 800629c:	f013 0007 	ands.w	r0, r3, #7
 80062a0:	d00b      	beq.n	80062ba <__lo0bits+0x22>
 80062a2:	07d9      	lsls	r1, r3, #31
 80062a4:	d421      	bmi.n	80062ea <__lo0bits+0x52>
 80062a6:	0798      	lsls	r0, r3, #30
 80062a8:	bf49      	itett	mi
 80062aa:	085b      	lsrmi	r3, r3, #1
 80062ac:	089b      	lsrpl	r3, r3, #2
 80062ae:	2001      	movmi	r0, #1
 80062b0:	6013      	strmi	r3, [r2, #0]
 80062b2:	bf5c      	itt	pl
 80062b4:	2002      	movpl	r0, #2
 80062b6:	6013      	strpl	r3, [r2, #0]
 80062b8:	4770      	bx	lr
 80062ba:	b299      	uxth	r1, r3
 80062bc:	b909      	cbnz	r1, 80062c2 <__lo0bits+0x2a>
 80062be:	2010      	movs	r0, #16
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	b2d9      	uxtb	r1, r3
 80062c4:	b909      	cbnz	r1, 80062ca <__lo0bits+0x32>
 80062c6:	3008      	adds	r0, #8
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	0719      	lsls	r1, r3, #28
 80062cc:	bf04      	itt	eq
 80062ce:	091b      	lsreq	r3, r3, #4
 80062d0:	3004      	addeq	r0, #4
 80062d2:	0799      	lsls	r1, r3, #30
 80062d4:	bf04      	itt	eq
 80062d6:	089b      	lsreq	r3, r3, #2
 80062d8:	3002      	addeq	r0, #2
 80062da:	07d9      	lsls	r1, r3, #31
 80062dc:	d403      	bmi.n	80062e6 <__lo0bits+0x4e>
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	f100 0001 	add.w	r0, r0, #1
 80062e4:	d003      	beq.n	80062ee <__lo0bits+0x56>
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	4770      	bx	lr
 80062ea:	2000      	movs	r0, #0
 80062ec:	4770      	bx	lr
 80062ee:	2020      	movs	r0, #32
 80062f0:	4770      	bx	lr
	...

080062f4 <__i2b>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	460c      	mov	r4, r1
 80062f8:	2101      	movs	r1, #1
 80062fa:	f7ff ff05 	bl	8006108 <_Balloc>
 80062fe:	4602      	mov	r2, r0
 8006300:	b928      	cbnz	r0, 800630e <__i2b+0x1a>
 8006302:	f240 1145 	movw	r1, #325	; 0x145
 8006306:	4b04      	ldr	r3, [pc, #16]	; (8006318 <__i2b+0x24>)
 8006308:	4804      	ldr	r0, [pc, #16]	; (800631c <__i2b+0x28>)
 800630a:	f000 fb3d 	bl	8006988 <__assert_func>
 800630e:	2301      	movs	r3, #1
 8006310:	6144      	str	r4, [r0, #20]
 8006312:	6103      	str	r3, [r0, #16]
 8006314:	bd10      	pop	{r4, pc}
 8006316:	bf00      	nop
 8006318:	080070a6 	.word	0x080070a6
 800631c:	080070b7 	.word	0x080070b7

08006320 <__multiply>:
 8006320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	4691      	mov	r9, r2
 8006326:	690a      	ldr	r2, [r1, #16]
 8006328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800632c:	460c      	mov	r4, r1
 800632e:	429a      	cmp	r2, r3
 8006330:	bfbe      	ittt	lt
 8006332:	460b      	movlt	r3, r1
 8006334:	464c      	movlt	r4, r9
 8006336:	4699      	movlt	r9, r3
 8006338:	6927      	ldr	r7, [r4, #16]
 800633a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800633e:	68a3      	ldr	r3, [r4, #8]
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	eb07 060a 	add.w	r6, r7, sl
 8006346:	42b3      	cmp	r3, r6
 8006348:	b085      	sub	sp, #20
 800634a:	bfb8      	it	lt
 800634c:	3101      	addlt	r1, #1
 800634e:	f7ff fedb 	bl	8006108 <_Balloc>
 8006352:	b930      	cbnz	r0, 8006362 <__multiply+0x42>
 8006354:	4602      	mov	r2, r0
 8006356:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800635a:	4b43      	ldr	r3, [pc, #268]	; (8006468 <__multiply+0x148>)
 800635c:	4843      	ldr	r0, [pc, #268]	; (800646c <__multiply+0x14c>)
 800635e:	f000 fb13 	bl	8006988 <__assert_func>
 8006362:	f100 0514 	add.w	r5, r0, #20
 8006366:	462b      	mov	r3, r5
 8006368:	2200      	movs	r2, #0
 800636a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800636e:	4543      	cmp	r3, r8
 8006370:	d321      	bcc.n	80063b6 <__multiply+0x96>
 8006372:	f104 0314 	add.w	r3, r4, #20
 8006376:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800637a:	f109 0314 	add.w	r3, r9, #20
 800637e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006382:	9202      	str	r2, [sp, #8]
 8006384:	1b3a      	subs	r2, r7, r4
 8006386:	3a15      	subs	r2, #21
 8006388:	f022 0203 	bic.w	r2, r2, #3
 800638c:	3204      	adds	r2, #4
 800638e:	f104 0115 	add.w	r1, r4, #21
 8006392:	428f      	cmp	r7, r1
 8006394:	bf38      	it	cc
 8006396:	2204      	movcc	r2, #4
 8006398:	9201      	str	r2, [sp, #4]
 800639a:	9a02      	ldr	r2, [sp, #8]
 800639c:	9303      	str	r3, [sp, #12]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d80c      	bhi.n	80063bc <__multiply+0x9c>
 80063a2:	2e00      	cmp	r6, #0
 80063a4:	dd03      	ble.n	80063ae <__multiply+0x8e>
 80063a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d05a      	beq.n	8006464 <__multiply+0x144>
 80063ae:	6106      	str	r6, [r0, #16]
 80063b0:	b005      	add	sp, #20
 80063b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b6:	f843 2b04 	str.w	r2, [r3], #4
 80063ba:	e7d8      	b.n	800636e <__multiply+0x4e>
 80063bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80063c0:	f1ba 0f00 	cmp.w	sl, #0
 80063c4:	d023      	beq.n	800640e <__multiply+0xee>
 80063c6:	46a9      	mov	r9, r5
 80063c8:	f04f 0c00 	mov.w	ip, #0
 80063cc:	f104 0e14 	add.w	lr, r4, #20
 80063d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063d4:	f8d9 1000 	ldr.w	r1, [r9]
 80063d8:	fa1f fb82 	uxth.w	fp, r2
 80063dc:	b289      	uxth	r1, r1
 80063de:	fb0a 110b 	mla	r1, sl, fp, r1
 80063e2:	4461      	add	r1, ip
 80063e4:	f8d9 c000 	ldr.w	ip, [r9]
 80063e8:	0c12      	lsrs	r2, r2, #16
 80063ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80063ee:	fb0a c202 	mla	r2, sl, r2, ip
 80063f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063f6:	b289      	uxth	r1, r1
 80063f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063fc:	4577      	cmp	r7, lr
 80063fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006402:	f849 1b04 	str.w	r1, [r9], #4
 8006406:	d8e3      	bhi.n	80063d0 <__multiply+0xb0>
 8006408:	9a01      	ldr	r2, [sp, #4]
 800640a:	f845 c002 	str.w	ip, [r5, r2]
 800640e:	9a03      	ldr	r2, [sp, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006416:	f1b9 0f00 	cmp.w	r9, #0
 800641a:	d021      	beq.n	8006460 <__multiply+0x140>
 800641c:	46ae      	mov	lr, r5
 800641e:	f04f 0a00 	mov.w	sl, #0
 8006422:	6829      	ldr	r1, [r5, #0]
 8006424:	f104 0c14 	add.w	ip, r4, #20
 8006428:	f8bc b000 	ldrh.w	fp, [ip]
 800642c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006430:	b289      	uxth	r1, r1
 8006432:	fb09 220b 	mla	r2, r9, fp, r2
 8006436:	4452      	add	r2, sl
 8006438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800643c:	f84e 1b04 	str.w	r1, [lr], #4
 8006440:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006444:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006448:	f8be 1000 	ldrh.w	r1, [lr]
 800644c:	4567      	cmp	r7, ip
 800644e:	fb09 110a 	mla	r1, r9, sl, r1
 8006452:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006456:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800645a:	d8e5      	bhi.n	8006428 <__multiply+0x108>
 800645c:	9a01      	ldr	r2, [sp, #4]
 800645e:	50a9      	str	r1, [r5, r2]
 8006460:	3504      	adds	r5, #4
 8006462:	e79a      	b.n	800639a <__multiply+0x7a>
 8006464:	3e01      	subs	r6, #1
 8006466:	e79c      	b.n	80063a2 <__multiply+0x82>
 8006468:	080070a6 	.word	0x080070a6
 800646c:	080070b7 	.word	0x080070b7

08006470 <__pow5mult>:
 8006470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006474:	4615      	mov	r5, r2
 8006476:	f012 0203 	ands.w	r2, r2, #3
 800647a:	4606      	mov	r6, r0
 800647c:	460f      	mov	r7, r1
 800647e:	d007      	beq.n	8006490 <__pow5mult+0x20>
 8006480:	4c25      	ldr	r4, [pc, #148]	; (8006518 <__pow5mult+0xa8>)
 8006482:	3a01      	subs	r2, #1
 8006484:	2300      	movs	r3, #0
 8006486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800648a:	f7ff fe9f 	bl	80061cc <__multadd>
 800648e:	4607      	mov	r7, r0
 8006490:	10ad      	asrs	r5, r5, #2
 8006492:	d03d      	beq.n	8006510 <__pow5mult+0xa0>
 8006494:	69f4      	ldr	r4, [r6, #28]
 8006496:	b97c      	cbnz	r4, 80064b8 <__pow5mult+0x48>
 8006498:	2010      	movs	r0, #16
 800649a:	f7ff fd81 	bl	8005fa0 <malloc>
 800649e:	4602      	mov	r2, r0
 80064a0:	61f0      	str	r0, [r6, #28]
 80064a2:	b928      	cbnz	r0, 80064b0 <__pow5mult+0x40>
 80064a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80064a8:	4b1c      	ldr	r3, [pc, #112]	; (800651c <__pow5mult+0xac>)
 80064aa:	481d      	ldr	r0, [pc, #116]	; (8006520 <__pow5mult+0xb0>)
 80064ac:	f000 fa6c 	bl	8006988 <__assert_func>
 80064b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064b4:	6004      	str	r4, [r0, #0]
 80064b6:	60c4      	str	r4, [r0, #12]
 80064b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80064bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064c0:	b94c      	cbnz	r4, 80064d6 <__pow5mult+0x66>
 80064c2:	f240 2171 	movw	r1, #625	; 0x271
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ff14 	bl	80062f4 <__i2b>
 80064cc:	2300      	movs	r3, #0
 80064ce:	4604      	mov	r4, r0
 80064d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	f04f 0900 	mov.w	r9, #0
 80064da:	07eb      	lsls	r3, r5, #31
 80064dc:	d50a      	bpl.n	80064f4 <__pow5mult+0x84>
 80064de:	4639      	mov	r1, r7
 80064e0:	4622      	mov	r2, r4
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7ff ff1c 	bl	8006320 <__multiply>
 80064e8:	4680      	mov	r8, r0
 80064ea:	4639      	mov	r1, r7
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7ff fe4b 	bl	8006188 <_Bfree>
 80064f2:	4647      	mov	r7, r8
 80064f4:	106d      	asrs	r5, r5, #1
 80064f6:	d00b      	beq.n	8006510 <__pow5mult+0xa0>
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	b938      	cbnz	r0, 800650c <__pow5mult+0x9c>
 80064fc:	4622      	mov	r2, r4
 80064fe:	4621      	mov	r1, r4
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff ff0d 	bl	8006320 <__multiply>
 8006506:	6020      	str	r0, [r4, #0]
 8006508:	f8c0 9000 	str.w	r9, [r0]
 800650c:	4604      	mov	r4, r0
 800650e:	e7e4      	b.n	80064da <__pow5mult+0x6a>
 8006510:	4638      	mov	r0, r7
 8006512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006516:	bf00      	nop
 8006518:	08007200 	.word	0x08007200
 800651c:	08007037 	.word	0x08007037
 8006520:	080070b7 	.word	0x080070b7

08006524 <__lshift>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	460c      	mov	r4, r1
 800652a:	4607      	mov	r7, r0
 800652c:	4691      	mov	r9, r2
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	6849      	ldr	r1, [r1, #4]
 8006532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800653c:	f108 0601 	add.w	r6, r8, #1
 8006540:	42b3      	cmp	r3, r6
 8006542:	db0b      	blt.n	800655c <__lshift+0x38>
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff fddf 	bl	8006108 <_Balloc>
 800654a:	4605      	mov	r5, r0
 800654c:	b948      	cbnz	r0, 8006562 <__lshift+0x3e>
 800654e:	4602      	mov	r2, r0
 8006550:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006554:	4b27      	ldr	r3, [pc, #156]	; (80065f4 <__lshift+0xd0>)
 8006556:	4828      	ldr	r0, [pc, #160]	; (80065f8 <__lshift+0xd4>)
 8006558:	f000 fa16 	bl	8006988 <__assert_func>
 800655c:	3101      	adds	r1, #1
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	e7ee      	b.n	8006540 <__lshift+0x1c>
 8006562:	2300      	movs	r3, #0
 8006564:	f100 0114 	add.w	r1, r0, #20
 8006568:	f100 0210 	add.w	r2, r0, #16
 800656c:	4618      	mov	r0, r3
 800656e:	4553      	cmp	r3, sl
 8006570:	db33      	blt.n	80065da <__lshift+0xb6>
 8006572:	6920      	ldr	r0, [r4, #16]
 8006574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006578:	f104 0314 	add.w	r3, r4, #20
 800657c:	f019 091f 	ands.w	r9, r9, #31
 8006580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006588:	d02b      	beq.n	80065e2 <__lshift+0xbe>
 800658a:	468a      	mov	sl, r1
 800658c:	2200      	movs	r2, #0
 800658e:	f1c9 0e20 	rsb	lr, r9, #32
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	fa00 f009 	lsl.w	r0, r0, r9
 8006598:	4310      	orrs	r0, r2
 800659a:	f84a 0b04 	str.w	r0, [sl], #4
 800659e:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a2:	459c      	cmp	ip, r3
 80065a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80065a8:	d8f3      	bhi.n	8006592 <__lshift+0x6e>
 80065aa:	ebac 0304 	sub.w	r3, ip, r4
 80065ae:	3b15      	subs	r3, #21
 80065b0:	f023 0303 	bic.w	r3, r3, #3
 80065b4:	3304      	adds	r3, #4
 80065b6:	f104 0015 	add.w	r0, r4, #21
 80065ba:	4584      	cmp	ip, r0
 80065bc:	bf38      	it	cc
 80065be:	2304      	movcc	r3, #4
 80065c0:	50ca      	str	r2, [r1, r3]
 80065c2:	b10a      	cbz	r2, 80065c8 <__lshift+0xa4>
 80065c4:	f108 0602 	add.w	r6, r8, #2
 80065c8:	3e01      	subs	r6, #1
 80065ca:	4638      	mov	r0, r7
 80065cc:	4621      	mov	r1, r4
 80065ce:	612e      	str	r6, [r5, #16]
 80065d0:	f7ff fdda 	bl	8006188 <_Bfree>
 80065d4:	4628      	mov	r0, r5
 80065d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065da:	f842 0f04 	str.w	r0, [r2, #4]!
 80065de:	3301      	adds	r3, #1
 80065e0:	e7c5      	b.n	800656e <__lshift+0x4a>
 80065e2:	3904      	subs	r1, #4
 80065e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e8:	459c      	cmp	ip, r3
 80065ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80065ee:	d8f9      	bhi.n	80065e4 <__lshift+0xc0>
 80065f0:	e7ea      	b.n	80065c8 <__lshift+0xa4>
 80065f2:	bf00      	nop
 80065f4:	080070a6 	.word	0x080070a6
 80065f8:	080070b7 	.word	0x080070b7

080065fc <__mcmp>:
 80065fc:	4603      	mov	r3, r0
 80065fe:	690a      	ldr	r2, [r1, #16]
 8006600:	6900      	ldr	r0, [r0, #16]
 8006602:	b530      	push	{r4, r5, lr}
 8006604:	1a80      	subs	r0, r0, r2
 8006606:	d10d      	bne.n	8006624 <__mcmp+0x28>
 8006608:	3314      	adds	r3, #20
 800660a:	3114      	adds	r1, #20
 800660c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006610:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006614:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006618:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800661c:	4295      	cmp	r5, r2
 800661e:	d002      	beq.n	8006626 <__mcmp+0x2a>
 8006620:	d304      	bcc.n	800662c <__mcmp+0x30>
 8006622:	2001      	movs	r0, #1
 8006624:	bd30      	pop	{r4, r5, pc}
 8006626:	42a3      	cmp	r3, r4
 8006628:	d3f4      	bcc.n	8006614 <__mcmp+0x18>
 800662a:	e7fb      	b.n	8006624 <__mcmp+0x28>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	e7f8      	b.n	8006624 <__mcmp+0x28>
	...

08006634 <__mdiff>:
 8006634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006638:	460d      	mov	r5, r1
 800663a:	4607      	mov	r7, r0
 800663c:	4611      	mov	r1, r2
 800663e:	4628      	mov	r0, r5
 8006640:	4614      	mov	r4, r2
 8006642:	f7ff ffdb 	bl	80065fc <__mcmp>
 8006646:	1e06      	subs	r6, r0, #0
 8006648:	d111      	bne.n	800666e <__mdiff+0x3a>
 800664a:	4631      	mov	r1, r6
 800664c:	4638      	mov	r0, r7
 800664e:	f7ff fd5b 	bl	8006108 <_Balloc>
 8006652:	4602      	mov	r2, r0
 8006654:	b928      	cbnz	r0, 8006662 <__mdiff+0x2e>
 8006656:	f240 2137 	movw	r1, #567	; 0x237
 800665a:	4b3a      	ldr	r3, [pc, #232]	; (8006744 <__mdiff+0x110>)
 800665c:	483a      	ldr	r0, [pc, #232]	; (8006748 <__mdiff+0x114>)
 800665e:	f000 f993 	bl	8006988 <__assert_func>
 8006662:	2301      	movs	r3, #1
 8006664:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006668:	4610      	mov	r0, r2
 800666a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	bfa4      	itt	ge
 8006670:	4623      	movge	r3, r4
 8006672:	462c      	movge	r4, r5
 8006674:	4638      	mov	r0, r7
 8006676:	6861      	ldr	r1, [r4, #4]
 8006678:	bfa6      	itte	ge
 800667a:	461d      	movge	r5, r3
 800667c:	2600      	movge	r6, #0
 800667e:	2601      	movlt	r6, #1
 8006680:	f7ff fd42 	bl	8006108 <_Balloc>
 8006684:	4602      	mov	r2, r0
 8006686:	b918      	cbnz	r0, 8006690 <__mdiff+0x5c>
 8006688:	f240 2145 	movw	r1, #581	; 0x245
 800668c:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <__mdiff+0x110>)
 800668e:	e7e5      	b.n	800665c <__mdiff+0x28>
 8006690:	f102 0814 	add.w	r8, r2, #20
 8006694:	46c2      	mov	sl, r8
 8006696:	f04f 0c00 	mov.w	ip, #0
 800669a:	6927      	ldr	r7, [r4, #16]
 800669c:	60c6      	str	r6, [r0, #12]
 800669e:	692e      	ldr	r6, [r5, #16]
 80066a0:	f104 0014 	add.w	r0, r4, #20
 80066a4:	f105 0914 	add.w	r9, r5, #20
 80066a8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80066ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066b0:	3410      	adds	r4, #16
 80066b2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80066b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80066ba:	fa1f f18b 	uxth.w	r1, fp
 80066be:	4461      	add	r1, ip
 80066c0:	fa1f fc83 	uxth.w	ip, r3
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	eba1 010c 	sub.w	r1, r1, ip
 80066ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80066d2:	b289      	uxth	r1, r1
 80066d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80066d8:	454e      	cmp	r6, r9
 80066da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066de:	f84a 1b04 	str.w	r1, [sl], #4
 80066e2:	d8e6      	bhi.n	80066b2 <__mdiff+0x7e>
 80066e4:	1b73      	subs	r3, r6, r5
 80066e6:	3b15      	subs	r3, #21
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	3515      	adds	r5, #21
 80066ee:	3304      	adds	r3, #4
 80066f0:	42ae      	cmp	r6, r5
 80066f2:	bf38      	it	cc
 80066f4:	2304      	movcc	r3, #4
 80066f6:	4418      	add	r0, r3
 80066f8:	4443      	add	r3, r8
 80066fa:	461e      	mov	r6, r3
 80066fc:	4605      	mov	r5, r0
 80066fe:	4575      	cmp	r5, lr
 8006700:	d30e      	bcc.n	8006720 <__mdiff+0xec>
 8006702:	f10e 0103 	add.w	r1, lr, #3
 8006706:	1a09      	subs	r1, r1, r0
 8006708:	f021 0103 	bic.w	r1, r1, #3
 800670c:	3803      	subs	r0, #3
 800670e:	4586      	cmp	lr, r0
 8006710:	bf38      	it	cc
 8006712:	2100      	movcc	r1, #0
 8006714:	440b      	add	r3, r1
 8006716:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800671a:	b189      	cbz	r1, 8006740 <__mdiff+0x10c>
 800671c:	6117      	str	r7, [r2, #16]
 800671e:	e7a3      	b.n	8006668 <__mdiff+0x34>
 8006720:	f855 8b04 	ldr.w	r8, [r5], #4
 8006724:	fa1f f188 	uxth.w	r1, r8
 8006728:	4461      	add	r1, ip
 800672a:	140c      	asrs	r4, r1, #16
 800672c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006730:	b289      	uxth	r1, r1
 8006732:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006736:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800673a:	f846 1b04 	str.w	r1, [r6], #4
 800673e:	e7de      	b.n	80066fe <__mdiff+0xca>
 8006740:	3f01      	subs	r7, #1
 8006742:	e7e8      	b.n	8006716 <__mdiff+0xe2>
 8006744:	080070a6 	.word	0x080070a6
 8006748:	080070b7 	.word	0x080070b7

0800674c <__d2b>:
 800674c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800674e:	2101      	movs	r1, #1
 8006750:	4617      	mov	r7, r2
 8006752:	461c      	mov	r4, r3
 8006754:	9e08      	ldr	r6, [sp, #32]
 8006756:	f7ff fcd7 	bl	8006108 <_Balloc>
 800675a:	4605      	mov	r5, r0
 800675c:	b930      	cbnz	r0, 800676c <__d2b+0x20>
 800675e:	4602      	mov	r2, r0
 8006760:	f240 310f 	movw	r1, #783	; 0x30f
 8006764:	4b22      	ldr	r3, [pc, #136]	; (80067f0 <__d2b+0xa4>)
 8006766:	4823      	ldr	r0, [pc, #140]	; (80067f4 <__d2b+0xa8>)
 8006768:	f000 f90e 	bl	8006988 <__assert_func>
 800676c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006770:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006774:	bb24      	cbnz	r4, 80067c0 <__d2b+0x74>
 8006776:	2f00      	cmp	r7, #0
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	d026      	beq.n	80067ca <__d2b+0x7e>
 800677c:	4668      	mov	r0, sp
 800677e:	9700      	str	r7, [sp, #0]
 8006780:	f7ff fd8a 	bl	8006298 <__lo0bits>
 8006784:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006788:	b1e8      	cbz	r0, 80067c6 <__d2b+0x7a>
 800678a:	f1c0 0320 	rsb	r3, r0, #32
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	430b      	orrs	r3, r1
 8006794:	40c2      	lsrs	r2, r0
 8006796:	616b      	str	r3, [r5, #20]
 8006798:	9201      	str	r2, [sp, #4]
 800679a:	9b01      	ldr	r3, [sp, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	bf14      	ite	ne
 80067a0:	2102      	movne	r1, #2
 80067a2:	2101      	moveq	r1, #1
 80067a4:	61ab      	str	r3, [r5, #24]
 80067a6:	6129      	str	r1, [r5, #16]
 80067a8:	b1bc      	cbz	r4, 80067da <__d2b+0x8e>
 80067aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80067ae:	4404      	add	r4, r0
 80067b0:	6034      	str	r4, [r6, #0]
 80067b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b8:	6018      	str	r0, [r3, #0]
 80067ba:	4628      	mov	r0, r5
 80067bc:	b003      	add	sp, #12
 80067be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c4:	e7d7      	b.n	8006776 <__d2b+0x2a>
 80067c6:	6169      	str	r1, [r5, #20]
 80067c8:	e7e7      	b.n	800679a <__d2b+0x4e>
 80067ca:	a801      	add	r0, sp, #4
 80067cc:	f7ff fd64 	bl	8006298 <__lo0bits>
 80067d0:	9b01      	ldr	r3, [sp, #4]
 80067d2:	2101      	movs	r1, #1
 80067d4:	616b      	str	r3, [r5, #20]
 80067d6:	3020      	adds	r0, #32
 80067d8:	e7e5      	b.n	80067a6 <__d2b+0x5a>
 80067da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067de:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80067e2:	6030      	str	r0, [r6, #0]
 80067e4:	6918      	ldr	r0, [r3, #16]
 80067e6:	f7ff fd37 	bl	8006258 <__hi0bits>
 80067ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80067ee:	e7e2      	b.n	80067b6 <__d2b+0x6a>
 80067f0:	080070a6 	.word	0x080070a6
 80067f4:	080070b7 	.word	0x080070b7

080067f8 <__sflush_r>:
 80067f8:	898a      	ldrh	r2, [r1, #12]
 80067fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fc:	4605      	mov	r5, r0
 80067fe:	0710      	lsls	r0, r2, #28
 8006800:	460c      	mov	r4, r1
 8006802:	d457      	bmi.n	80068b4 <__sflush_r+0xbc>
 8006804:	684b      	ldr	r3, [r1, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	dc04      	bgt.n	8006814 <__sflush_r+0x1c>
 800680a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	dc01      	bgt.n	8006814 <__sflush_r+0x1c>
 8006810:	2000      	movs	r0, #0
 8006812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006816:	2e00      	cmp	r6, #0
 8006818:	d0fa      	beq.n	8006810 <__sflush_r+0x18>
 800681a:	2300      	movs	r3, #0
 800681c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006820:	682f      	ldr	r7, [r5, #0]
 8006822:	6a21      	ldr	r1, [r4, #32]
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	d032      	beq.n	800688e <__sflush_r+0x96>
 8006828:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	075a      	lsls	r2, r3, #29
 800682e:	d505      	bpl.n	800683c <__sflush_r+0x44>
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	1ac0      	subs	r0, r0, r3
 8006834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006836:	b10b      	cbz	r3, 800683c <__sflush_r+0x44>
 8006838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800683a:	1ac0      	subs	r0, r0, r3
 800683c:	2300      	movs	r3, #0
 800683e:	4602      	mov	r2, r0
 8006840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006842:	4628      	mov	r0, r5
 8006844:	6a21      	ldr	r1, [r4, #32]
 8006846:	47b0      	blx	r6
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	d106      	bne.n	800685c <__sflush_r+0x64>
 800684e:	6829      	ldr	r1, [r5, #0]
 8006850:	291d      	cmp	r1, #29
 8006852:	d82b      	bhi.n	80068ac <__sflush_r+0xb4>
 8006854:	4a28      	ldr	r2, [pc, #160]	; (80068f8 <__sflush_r+0x100>)
 8006856:	410a      	asrs	r2, r1
 8006858:	07d6      	lsls	r6, r2, #31
 800685a:	d427      	bmi.n	80068ac <__sflush_r+0xb4>
 800685c:	2200      	movs	r2, #0
 800685e:	6062      	str	r2, [r4, #4]
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	04d9      	lsls	r1, r3, #19
 8006864:	6022      	str	r2, [r4, #0]
 8006866:	d504      	bpl.n	8006872 <__sflush_r+0x7a>
 8006868:	1c42      	adds	r2, r0, #1
 800686a:	d101      	bne.n	8006870 <__sflush_r+0x78>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b903      	cbnz	r3, 8006872 <__sflush_r+0x7a>
 8006870:	6560      	str	r0, [r4, #84]	; 0x54
 8006872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006874:	602f      	str	r7, [r5, #0]
 8006876:	2900      	cmp	r1, #0
 8006878:	d0ca      	beq.n	8006810 <__sflush_r+0x18>
 800687a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800687e:	4299      	cmp	r1, r3
 8006880:	d002      	beq.n	8006888 <__sflush_r+0x90>
 8006882:	4628      	mov	r0, r5
 8006884:	f7ff fb44 	bl	8005f10 <_free_r>
 8006888:	2000      	movs	r0, #0
 800688a:	6360      	str	r0, [r4, #52]	; 0x34
 800688c:	e7c1      	b.n	8006812 <__sflush_r+0x1a>
 800688e:	2301      	movs	r3, #1
 8006890:	4628      	mov	r0, r5
 8006892:	47b0      	blx	r6
 8006894:	1c41      	adds	r1, r0, #1
 8006896:	d1c8      	bne.n	800682a <__sflush_r+0x32>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0c5      	beq.n	800682a <__sflush_r+0x32>
 800689e:	2b1d      	cmp	r3, #29
 80068a0:	d001      	beq.n	80068a6 <__sflush_r+0xae>
 80068a2:	2b16      	cmp	r3, #22
 80068a4:	d101      	bne.n	80068aa <__sflush_r+0xb2>
 80068a6:	602f      	str	r7, [r5, #0]
 80068a8:	e7b2      	b.n	8006810 <__sflush_r+0x18>
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b0:	81a3      	strh	r3, [r4, #12]
 80068b2:	e7ae      	b.n	8006812 <__sflush_r+0x1a>
 80068b4:	690f      	ldr	r7, [r1, #16]
 80068b6:	2f00      	cmp	r7, #0
 80068b8:	d0aa      	beq.n	8006810 <__sflush_r+0x18>
 80068ba:	0793      	lsls	r3, r2, #30
 80068bc:	bf18      	it	ne
 80068be:	2300      	movne	r3, #0
 80068c0:	680e      	ldr	r6, [r1, #0]
 80068c2:	bf08      	it	eq
 80068c4:	694b      	ldreq	r3, [r1, #20]
 80068c6:	1bf6      	subs	r6, r6, r7
 80068c8:	600f      	str	r7, [r1, #0]
 80068ca:	608b      	str	r3, [r1, #8]
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	dd9f      	ble.n	8006810 <__sflush_r+0x18>
 80068d0:	4633      	mov	r3, r6
 80068d2:	463a      	mov	r2, r7
 80068d4:	4628      	mov	r0, r5
 80068d6:	6a21      	ldr	r1, [r4, #32]
 80068d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80068dc:	47e0      	blx	ip
 80068de:	2800      	cmp	r0, #0
 80068e0:	dc06      	bgt.n	80068f0 <__sflush_r+0xf8>
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	e790      	b.n	8006812 <__sflush_r+0x1a>
 80068f0:	4407      	add	r7, r0
 80068f2:	1a36      	subs	r6, r6, r0
 80068f4:	e7ea      	b.n	80068cc <__sflush_r+0xd4>
 80068f6:	bf00      	nop
 80068f8:	dfbffffe 	.word	0xdfbffffe

080068fc <_fflush_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	4605      	mov	r5, r0
 8006902:	460c      	mov	r4, r1
 8006904:	b913      	cbnz	r3, 800690c <_fflush_r+0x10>
 8006906:	2500      	movs	r5, #0
 8006908:	4628      	mov	r0, r5
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	b118      	cbz	r0, 8006916 <_fflush_r+0x1a>
 800690e:	6a03      	ldr	r3, [r0, #32]
 8006910:	b90b      	cbnz	r3, 8006916 <_fflush_r+0x1a>
 8006912:	f7fe fb87 	bl	8005024 <__sinit>
 8006916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f3      	beq.n	8006906 <_fflush_r+0xa>
 800691e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006920:	07d0      	lsls	r0, r2, #31
 8006922:	d404      	bmi.n	800692e <_fflush_r+0x32>
 8006924:	0599      	lsls	r1, r3, #22
 8006926:	d402      	bmi.n	800692e <_fflush_r+0x32>
 8006928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692a:	f7fe fc72 	bl	8005212 <__retarget_lock_acquire_recursive>
 800692e:	4628      	mov	r0, r5
 8006930:	4621      	mov	r1, r4
 8006932:	f7ff ff61 	bl	80067f8 <__sflush_r>
 8006936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006938:	4605      	mov	r5, r0
 800693a:	07da      	lsls	r2, r3, #31
 800693c:	d4e4      	bmi.n	8006908 <_fflush_r+0xc>
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	059b      	lsls	r3, r3, #22
 8006942:	d4e1      	bmi.n	8006908 <_fflush_r+0xc>
 8006944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006946:	f7fe fc65 	bl	8005214 <__retarget_lock_release_recursive>
 800694a:	e7dd      	b.n	8006908 <_fflush_r+0xc>

0800694c <_sbrk_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	2300      	movs	r3, #0
 8006950:	4d05      	ldr	r5, [pc, #20]	; (8006968 <_sbrk_r+0x1c>)
 8006952:	4604      	mov	r4, r0
 8006954:	4608      	mov	r0, r1
 8006956:	602b      	str	r3, [r5, #0]
 8006958:	f7fb f8f2 	bl	8001b40 <_sbrk>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d102      	bne.n	8006966 <_sbrk_r+0x1a>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b103      	cbz	r3, 8006966 <_sbrk_r+0x1a>
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	20000474 	.word	0x20000474

0800696c <memcpy>:
 800696c:	440a      	add	r2, r1
 800696e:	4291      	cmp	r1, r2
 8006970:	f100 33ff 	add.w	r3, r0, #4294967295
 8006974:	d100      	bne.n	8006978 <memcpy+0xc>
 8006976:	4770      	bx	lr
 8006978:	b510      	push	{r4, lr}
 800697a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800697e:	4291      	cmp	r1, r2
 8006980:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006984:	d1f9      	bne.n	800697a <memcpy+0xe>
 8006986:	bd10      	pop	{r4, pc}

08006988 <__assert_func>:
 8006988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800698a:	4614      	mov	r4, r2
 800698c:	461a      	mov	r2, r3
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <__assert_func+0x2c>)
 8006990:	4605      	mov	r5, r0
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68d8      	ldr	r0, [r3, #12]
 8006996:	b14c      	cbz	r4, 80069ac <__assert_func+0x24>
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <__assert_func+0x30>)
 800699a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800699e:	9100      	str	r1, [sp, #0]
 80069a0:	462b      	mov	r3, r5
 80069a2:	4906      	ldr	r1, [pc, #24]	; (80069bc <__assert_func+0x34>)
 80069a4:	f000 f842 	bl	8006a2c <fiprintf>
 80069a8:	f000 f852 	bl	8006a50 <abort>
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <__assert_func+0x38>)
 80069ae:	461c      	mov	r4, r3
 80069b0:	e7f3      	b.n	800699a <__assert_func+0x12>
 80069b2:	bf00      	nop
 80069b4:	20000068 	.word	0x20000068
 80069b8:	08007216 	.word	0x08007216
 80069bc:	08007223 	.word	0x08007223
 80069c0:	08007251 	.word	0x08007251

080069c4 <_calloc_r>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	fba1 5402 	umull	r5, r4, r1, r2
 80069ca:	b934      	cbnz	r4, 80069da <_calloc_r+0x16>
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7ff fb0f 	bl	8005ff0 <_malloc_r>
 80069d2:	4606      	mov	r6, r0
 80069d4:	b928      	cbnz	r0, 80069e2 <_calloc_r+0x1e>
 80069d6:	4630      	mov	r0, r6
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
 80069da:	220c      	movs	r2, #12
 80069dc:	2600      	movs	r6, #0
 80069de:	6002      	str	r2, [r0, #0]
 80069e0:	e7f9      	b.n	80069d6 <_calloc_r+0x12>
 80069e2:	462a      	mov	r2, r5
 80069e4:	4621      	mov	r1, r4
 80069e6:	f7fe fb96 	bl	8005116 <memset>
 80069ea:	e7f4      	b.n	80069d6 <_calloc_r+0x12>

080069ec <__ascii_mbtowc>:
 80069ec:	b082      	sub	sp, #8
 80069ee:	b901      	cbnz	r1, 80069f2 <__ascii_mbtowc+0x6>
 80069f0:	a901      	add	r1, sp, #4
 80069f2:	b142      	cbz	r2, 8006a06 <__ascii_mbtowc+0x1a>
 80069f4:	b14b      	cbz	r3, 8006a0a <__ascii_mbtowc+0x1e>
 80069f6:	7813      	ldrb	r3, [r2, #0]
 80069f8:	600b      	str	r3, [r1, #0]
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	1e10      	subs	r0, r2, #0
 80069fe:	bf18      	it	ne
 8006a00:	2001      	movne	r0, #1
 8006a02:	b002      	add	sp, #8
 8006a04:	4770      	bx	lr
 8006a06:	4610      	mov	r0, r2
 8006a08:	e7fb      	b.n	8006a02 <__ascii_mbtowc+0x16>
 8006a0a:	f06f 0001 	mvn.w	r0, #1
 8006a0e:	e7f8      	b.n	8006a02 <__ascii_mbtowc+0x16>

08006a10 <__ascii_wctomb>:
 8006a10:	4603      	mov	r3, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	b141      	cbz	r1, 8006a28 <__ascii_wctomb+0x18>
 8006a16:	2aff      	cmp	r2, #255	; 0xff
 8006a18:	d904      	bls.n	8006a24 <__ascii_wctomb+0x14>
 8006a1a:	228a      	movs	r2, #138	; 0x8a
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	4770      	bx	lr
 8006a24:	2001      	movs	r0, #1
 8006a26:	700a      	strb	r2, [r1, #0]
 8006a28:	4770      	bx	lr
	...

08006a2c <fiprintf>:
 8006a2c:	b40e      	push	{r1, r2, r3}
 8006a2e:	b503      	push	{r0, r1, lr}
 8006a30:	4601      	mov	r1, r0
 8006a32:	ab03      	add	r3, sp, #12
 8006a34:	4805      	ldr	r0, [pc, #20]	; (8006a4c <fiprintf+0x20>)
 8006a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	f000 f835 	bl	8006aac <_vfiprintf_r>
 8006a42:	b002      	add	sp, #8
 8006a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a48:	b003      	add	sp, #12
 8006a4a:	4770      	bx	lr
 8006a4c:	20000068 	.word	0x20000068

08006a50 <abort>:
 8006a50:	2006      	movs	r0, #6
 8006a52:	b508      	push	{r3, lr}
 8006a54:	f000 fa02 	bl	8006e5c <raise>
 8006a58:	2001      	movs	r0, #1
 8006a5a:	f7fb f81a 	bl	8001a92 <_exit>

08006a5e <__sfputc_r>:
 8006a5e:	6893      	ldr	r3, [r2, #8]
 8006a60:	b410      	push	{r4}
 8006a62:	3b01      	subs	r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	6093      	str	r3, [r2, #8]
 8006a68:	da07      	bge.n	8006a7a <__sfputc_r+0x1c>
 8006a6a:	6994      	ldr	r4, [r2, #24]
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	db01      	blt.n	8006a74 <__sfputc_r+0x16>
 8006a70:	290a      	cmp	r1, #10
 8006a72:	d102      	bne.n	8006a7a <__sfputc_r+0x1c>
 8006a74:	bc10      	pop	{r4}
 8006a76:	f000 b933 	b.w	8006ce0 <__swbuf_r>
 8006a7a:	6813      	ldr	r3, [r2, #0]
 8006a7c:	1c58      	adds	r0, r3, #1
 8006a7e:	6010      	str	r0, [r2, #0]
 8006a80:	7019      	strb	r1, [r3, #0]
 8006a82:	4608      	mov	r0, r1
 8006a84:	bc10      	pop	{r4}
 8006a86:	4770      	bx	lr

08006a88 <__sfputs_r>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	4614      	mov	r4, r2
 8006a90:	18d5      	adds	r5, r2, r3
 8006a92:	42ac      	cmp	r4, r5
 8006a94:	d101      	bne.n	8006a9a <__sfputs_r+0x12>
 8006a96:	2000      	movs	r0, #0
 8006a98:	e007      	b.n	8006aaa <__sfputs_r+0x22>
 8006a9a:	463a      	mov	r2, r7
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa2:	f7ff ffdc 	bl	8006a5e <__sfputc_r>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d1f3      	bne.n	8006a92 <__sfputs_r+0xa>
 8006aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006aac <_vfiprintf_r>:
 8006aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	4614      	mov	r4, r2
 8006ab4:	4698      	mov	r8, r3
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	b09d      	sub	sp, #116	; 0x74
 8006aba:	b118      	cbz	r0, 8006ac4 <_vfiprintf_r+0x18>
 8006abc:	6a03      	ldr	r3, [r0, #32]
 8006abe:	b90b      	cbnz	r3, 8006ac4 <_vfiprintf_r+0x18>
 8006ac0:	f7fe fab0 	bl	8005024 <__sinit>
 8006ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac6:	07d9      	lsls	r1, r3, #31
 8006ac8:	d405      	bmi.n	8006ad6 <_vfiprintf_r+0x2a>
 8006aca:	89ab      	ldrh	r3, [r5, #12]
 8006acc:	059a      	lsls	r2, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <_vfiprintf_r+0x2a>
 8006ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad2:	f7fe fb9e 	bl	8005212 <__retarget_lock_acquire_recursive>
 8006ad6:	89ab      	ldrh	r3, [r5, #12]
 8006ad8:	071b      	lsls	r3, r3, #28
 8006ada:	d501      	bpl.n	8006ae0 <_vfiprintf_r+0x34>
 8006adc:	692b      	ldr	r3, [r5, #16]
 8006ade:	b99b      	cbnz	r3, 8006b08 <_vfiprintf_r+0x5c>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f000 f93a 	bl	8006d5c <__swsetup_r>
 8006ae8:	b170      	cbz	r0, 8006b08 <_vfiprintf_r+0x5c>
 8006aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aec:	07dc      	lsls	r4, r3, #31
 8006aee:	d504      	bpl.n	8006afa <_vfiprintf_r+0x4e>
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295
 8006af4:	b01d      	add	sp, #116	; 0x74
 8006af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afa:	89ab      	ldrh	r3, [r5, #12]
 8006afc:	0598      	lsls	r0, r3, #22
 8006afe:	d4f7      	bmi.n	8006af0 <_vfiprintf_r+0x44>
 8006b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b02:	f7fe fb87 	bl	8005214 <__retarget_lock_release_recursive>
 8006b06:	e7f3      	b.n	8006af0 <_vfiprintf_r+0x44>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b12:	2330      	movs	r3, #48	; 0x30
 8006b14:	f04f 0901 	mov.w	r9, #1
 8006b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006ccc <_vfiprintf_r+0x220>
 8006b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b24:	4623      	mov	r3, r4
 8006b26:	469a      	mov	sl, r3
 8006b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b2c:	b10a      	cbz	r2, 8006b32 <_vfiprintf_r+0x86>
 8006b2e:	2a25      	cmp	r2, #37	; 0x25
 8006b30:	d1f9      	bne.n	8006b26 <_vfiprintf_r+0x7a>
 8006b32:	ebba 0b04 	subs.w	fp, sl, r4
 8006b36:	d00b      	beq.n	8006b50 <_vfiprintf_r+0xa4>
 8006b38:	465b      	mov	r3, fp
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f7ff ffa2 	bl	8006a88 <__sfputs_r>
 8006b44:	3001      	adds	r0, #1
 8006b46:	f000 80a9 	beq.w	8006c9c <_vfiprintf_r+0x1f0>
 8006b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b4c:	445a      	add	r2, fp
 8006b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b50:	f89a 3000 	ldrb.w	r3, [sl]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80a1 	beq.w	8006c9c <_vfiprintf_r+0x1f0>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b64:	f10a 0a01 	add.w	sl, sl, #1
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b70:	931a      	str	r3, [sp, #104]	; 0x68
 8006b72:	4654      	mov	r4, sl
 8006b74:	2205      	movs	r2, #5
 8006b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7a:	4854      	ldr	r0, [pc, #336]	; (8006ccc <_vfiprintf_r+0x220>)
 8006b7c:	f7fe fb4b 	bl	8005216 <memchr>
 8006b80:	9a04      	ldr	r2, [sp, #16]
 8006b82:	b9d8      	cbnz	r0, 8006bbc <_vfiprintf_r+0x110>
 8006b84:	06d1      	lsls	r1, r2, #27
 8006b86:	bf44      	itt	mi
 8006b88:	2320      	movmi	r3, #32
 8006b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b8e:	0713      	lsls	r3, r2, #28
 8006b90:	bf44      	itt	mi
 8006b92:	232b      	movmi	r3, #43	; 0x2b
 8006b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b98:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b9e:	d015      	beq.n	8006bcc <_vfiprintf_r+0x120>
 8006ba0:	4654      	mov	r4, sl
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	f04f 0c0a 	mov.w	ip, #10
 8006ba8:	9a07      	ldr	r2, [sp, #28]
 8006baa:	4621      	mov	r1, r4
 8006bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb0:	3b30      	subs	r3, #48	; 0x30
 8006bb2:	2b09      	cmp	r3, #9
 8006bb4:	d94d      	bls.n	8006c52 <_vfiprintf_r+0x1a6>
 8006bb6:	b1b0      	cbz	r0, 8006be6 <_vfiprintf_r+0x13a>
 8006bb8:	9207      	str	r2, [sp, #28]
 8006bba:	e014      	b.n	8006be6 <_vfiprintf_r+0x13a>
 8006bbc:	eba0 0308 	sub.w	r3, r0, r8
 8006bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	46a2      	mov	sl, r4
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	e7d2      	b.n	8006b72 <_vfiprintf_r+0xc6>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	1d19      	adds	r1, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	9103      	str	r1, [sp, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bfbb      	ittet	lt
 8006bd8:	425b      	neglt	r3, r3
 8006bda:	f042 0202 	orrlt.w	r2, r2, #2
 8006bde:	9307      	strge	r3, [sp, #28]
 8006be0:	9307      	strlt	r3, [sp, #28]
 8006be2:	bfb8      	it	lt
 8006be4:	9204      	strlt	r2, [sp, #16]
 8006be6:	7823      	ldrb	r3, [r4, #0]
 8006be8:	2b2e      	cmp	r3, #46	; 0x2e
 8006bea:	d10c      	bne.n	8006c06 <_vfiprintf_r+0x15a>
 8006bec:	7863      	ldrb	r3, [r4, #1]
 8006bee:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf0:	d134      	bne.n	8006c5c <_vfiprintf_r+0x1b0>
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	3402      	adds	r4, #2
 8006bf6:	1d1a      	adds	r2, r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	9203      	str	r2, [sp, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bfb8      	it	lt
 8006c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c04:	9305      	str	r3, [sp, #20]
 8006c06:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cd0 <_vfiprintf_r+0x224>
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	4650      	mov	r0, sl
 8006c0e:	7821      	ldrb	r1, [r4, #0]
 8006c10:	f7fe fb01 	bl	8005216 <memchr>
 8006c14:	b138      	cbz	r0, 8006c26 <_vfiprintf_r+0x17a>
 8006c16:	2240      	movs	r2, #64	; 0x40
 8006c18:	9b04      	ldr	r3, [sp, #16]
 8006c1a:	eba0 000a 	sub.w	r0, r0, sl
 8006c1e:	4082      	lsls	r2, r0
 8006c20:	4313      	orrs	r3, r2
 8006c22:	3401      	adds	r4, #1
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2a:	2206      	movs	r2, #6
 8006c2c:	4829      	ldr	r0, [pc, #164]	; (8006cd4 <_vfiprintf_r+0x228>)
 8006c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c32:	f7fe faf0 	bl	8005216 <memchr>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d03f      	beq.n	8006cba <_vfiprintf_r+0x20e>
 8006c3a:	4b27      	ldr	r3, [pc, #156]	; (8006cd8 <_vfiprintf_r+0x22c>)
 8006c3c:	bb1b      	cbnz	r3, 8006c86 <_vfiprintf_r+0x1da>
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	3307      	adds	r3, #7
 8006c42:	f023 0307 	bic.w	r3, r3, #7
 8006c46:	3308      	adds	r3, #8
 8006c48:	9303      	str	r3, [sp, #12]
 8006c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4c:	443b      	add	r3, r7
 8006c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c50:	e768      	b.n	8006b24 <_vfiprintf_r+0x78>
 8006c52:	460c      	mov	r4, r1
 8006c54:	2001      	movs	r0, #1
 8006c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c5a:	e7a6      	b.n	8006baa <_vfiprintf_r+0xfe>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f04f 0c0a 	mov.w	ip, #10
 8006c62:	4619      	mov	r1, r3
 8006c64:	3401      	adds	r4, #1
 8006c66:	9305      	str	r3, [sp, #20]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c6e:	3a30      	subs	r2, #48	; 0x30
 8006c70:	2a09      	cmp	r2, #9
 8006c72:	d903      	bls.n	8006c7c <_vfiprintf_r+0x1d0>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0c6      	beq.n	8006c06 <_vfiprintf_r+0x15a>
 8006c78:	9105      	str	r1, [sp, #20]
 8006c7a:	e7c4      	b.n	8006c06 <_vfiprintf_r+0x15a>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	2301      	movs	r3, #1
 8006c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c84:	e7f0      	b.n	8006c68 <_vfiprintf_r+0x1bc>
 8006c86:	ab03      	add	r3, sp, #12
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <_vfiprintf_r+0x230>)
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	f7fd fd79 	bl	8004788 <_printf_float>
 8006c96:	4607      	mov	r7, r0
 8006c98:	1c78      	adds	r0, r7, #1
 8006c9a:	d1d6      	bne.n	8006c4a <_vfiprintf_r+0x19e>
 8006c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_vfiprintf_r+0x202>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	059a      	lsls	r2, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_vfiprintf_r+0x202>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006caa:	f7fe fab3 	bl	8005214 <__retarget_lock_release_recursive>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	065b      	lsls	r3, r3, #25
 8006cb2:	f53f af1d 	bmi.w	8006af0 <_vfiprintf_r+0x44>
 8006cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cb8:	e71c      	b.n	8006af4 <_vfiprintf_r+0x48>
 8006cba:	ab03      	add	r3, sp, #12
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	462a      	mov	r2, r5
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <_vfiprintf_r+0x230>)
 8006cc4:	a904      	add	r1, sp, #16
 8006cc6:	f7fd ffff 	bl	8004cc8 <_printf_i>
 8006cca:	e7e4      	b.n	8006c96 <_vfiprintf_r+0x1ea>
 8006ccc:	08007353 	.word	0x08007353
 8006cd0:	08007359 	.word	0x08007359
 8006cd4:	0800735d 	.word	0x0800735d
 8006cd8:	08004789 	.word	0x08004789
 8006cdc:	08006a89 	.word	0x08006a89

08006ce0 <__swbuf_r>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	460e      	mov	r6, r1
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	b118      	cbz	r0, 8006cf2 <__swbuf_r+0x12>
 8006cea:	6a03      	ldr	r3, [r0, #32]
 8006cec:	b90b      	cbnz	r3, 8006cf2 <__swbuf_r+0x12>
 8006cee:	f7fe f999 	bl	8005024 <__sinit>
 8006cf2:	69a3      	ldr	r3, [r4, #24]
 8006cf4:	60a3      	str	r3, [r4, #8]
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	071a      	lsls	r2, r3, #28
 8006cfa:	d525      	bpl.n	8006d48 <__swbuf_r+0x68>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	b31b      	cbz	r3, 8006d48 <__swbuf_r+0x68>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	6922      	ldr	r2, [r4, #16]
 8006d04:	b2f6      	uxtb	r6, r6
 8006d06:	1a98      	subs	r0, r3, r2
 8006d08:	6963      	ldr	r3, [r4, #20]
 8006d0a:	4637      	mov	r7, r6
 8006d0c:	4283      	cmp	r3, r0
 8006d0e:	dc04      	bgt.n	8006d1a <__swbuf_r+0x3a>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	f7ff fdf2 	bl	80068fc <_fflush_r>
 8006d18:	b9e0      	cbnz	r0, 8006d54 <__swbuf_r+0x74>
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	60a3      	str	r3, [r4, #8]
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	701e      	strb	r6, [r3, #0]
 8006d28:	6962      	ldr	r2, [r4, #20]
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d004      	beq.n	8006d3a <__swbuf_r+0x5a>
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d506      	bpl.n	8006d44 <__swbuf_r+0x64>
 8006d36:	2e0a      	cmp	r6, #10
 8006d38:	d104      	bne.n	8006d44 <__swbuf_r+0x64>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f7ff fddd 	bl	80068fc <_fflush_r>
 8006d42:	b938      	cbnz	r0, 8006d54 <__swbuf_r+0x74>
 8006d44:	4638      	mov	r0, r7
 8006d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 f806 	bl	8006d5c <__swsetup_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d0d5      	beq.n	8006d00 <__swbuf_r+0x20>
 8006d54:	f04f 37ff 	mov.w	r7, #4294967295
 8006d58:	e7f4      	b.n	8006d44 <__swbuf_r+0x64>
	...

08006d5c <__swsetup_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <__swsetup_r+0xac>)
 8006d60:	4605      	mov	r5, r0
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	460c      	mov	r4, r1
 8006d66:	b118      	cbz	r0, 8006d70 <__swsetup_r+0x14>
 8006d68:	6a03      	ldr	r3, [r0, #32]
 8006d6a:	b90b      	cbnz	r3, 8006d70 <__swsetup_r+0x14>
 8006d6c:	f7fe f95a 	bl	8005024 <__sinit>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d76:	0718      	lsls	r0, r3, #28
 8006d78:	d422      	bmi.n	8006dc0 <__swsetup_r+0x64>
 8006d7a:	06d9      	lsls	r1, r3, #27
 8006d7c:	d407      	bmi.n	8006d8e <__swsetup_r+0x32>
 8006d7e:	2309      	movs	r3, #9
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	e034      	b.n	8006df8 <__swsetup_r+0x9c>
 8006d8e:	0758      	lsls	r0, r3, #29
 8006d90:	d512      	bpl.n	8006db8 <__swsetup_r+0x5c>
 8006d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d94:	b141      	cbz	r1, 8006da8 <__swsetup_r+0x4c>
 8006d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d9a:	4299      	cmp	r1, r3
 8006d9c:	d002      	beq.n	8006da4 <__swsetup_r+0x48>
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7ff f8b6 	bl	8005f10 <_free_r>
 8006da4:	2300      	movs	r3, #0
 8006da6:	6363      	str	r3, [r4, #52]	; 0x34
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	2300      	movs	r3, #0
 8006db2:	6063      	str	r3, [r4, #4]
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	f043 0308 	orr.w	r3, r3, #8
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	b94b      	cbnz	r3, 8006dd8 <__swsetup_r+0x7c>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dce:	d003      	beq.n	8006dd8 <__swsetup_r+0x7c>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 f883 	bl	8006ede <__smakebuf_r>
 8006dd8:	89a0      	ldrh	r0, [r4, #12]
 8006dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dde:	f010 0301 	ands.w	r3, r0, #1
 8006de2:	d00a      	beq.n	8006dfa <__swsetup_r+0x9e>
 8006de4:	2300      	movs	r3, #0
 8006de6:	60a3      	str	r3, [r4, #8]
 8006de8:	6963      	ldr	r3, [r4, #20]
 8006dea:	425b      	negs	r3, r3
 8006dec:	61a3      	str	r3, [r4, #24]
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	b943      	cbnz	r3, 8006e04 <__swsetup_r+0xa8>
 8006df2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006df6:	d1c4      	bne.n	8006d82 <__swsetup_r+0x26>
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	0781      	lsls	r1, r0, #30
 8006dfc:	bf58      	it	pl
 8006dfe:	6963      	ldrpl	r3, [r4, #20]
 8006e00:	60a3      	str	r3, [r4, #8]
 8006e02:	e7f4      	b.n	8006dee <__swsetup_r+0x92>
 8006e04:	2000      	movs	r0, #0
 8006e06:	e7f7      	b.n	8006df8 <__swsetup_r+0x9c>
 8006e08:	20000068 	.word	0x20000068

08006e0c <_raise_r>:
 8006e0c:	291f      	cmp	r1, #31
 8006e0e:	b538      	push	{r3, r4, r5, lr}
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	d904      	bls.n	8006e20 <_raise_r+0x14>
 8006e16:	2316      	movs	r3, #22
 8006e18:	6003      	str	r3, [r0, #0]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006e22:	b112      	cbz	r2, 8006e2a <_raise_r+0x1e>
 8006e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e28:	b94b      	cbnz	r3, 8006e3e <_raise_r+0x32>
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 f830 	bl	8006e90 <_getpid_r>
 8006e30:	462a      	mov	r2, r5
 8006e32:	4601      	mov	r1, r0
 8006e34:	4620      	mov	r0, r4
 8006e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3a:	f000 b817 	b.w	8006e6c <_kill_r>
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d00a      	beq.n	8006e58 <_raise_r+0x4c>
 8006e42:	1c59      	adds	r1, r3, #1
 8006e44:	d103      	bne.n	8006e4e <_raise_r+0x42>
 8006e46:	2316      	movs	r3, #22
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	e7e7      	b.n	8006e1e <_raise_r+0x12>
 8006e4e:	2400      	movs	r4, #0
 8006e50:	4628      	mov	r0, r5
 8006e52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e56:	4798      	blx	r3
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7e0      	b.n	8006e1e <_raise_r+0x12>

08006e5c <raise>:
 8006e5c:	4b02      	ldr	r3, [pc, #8]	; (8006e68 <raise+0xc>)
 8006e5e:	4601      	mov	r1, r0
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f7ff bfd3 	b.w	8006e0c <_raise_r>
 8006e66:	bf00      	nop
 8006e68:	20000068 	.word	0x20000068

08006e6c <_kill_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4d06      	ldr	r5, [pc, #24]	; (8006e8c <_kill_r+0x20>)
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	602b      	str	r3, [r5, #0]
 8006e7a:	f7fa fdfa 	bl	8001a72 <_kill>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d102      	bne.n	8006e88 <_kill_r+0x1c>
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	b103      	cbz	r3, 8006e88 <_kill_r+0x1c>
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000474 	.word	0x20000474

08006e90 <_getpid_r>:
 8006e90:	f7fa bde8 	b.w	8001a64 <_getpid>

08006e94 <__swhatbuf_r>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	460c      	mov	r4, r1
 8006e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9c:	4615      	mov	r5, r2
 8006e9e:	2900      	cmp	r1, #0
 8006ea0:	461e      	mov	r6, r3
 8006ea2:	b096      	sub	sp, #88	; 0x58
 8006ea4:	da0c      	bge.n	8006ec0 <__swhatbuf_r+0x2c>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006eae:	bf0c      	ite	eq
 8006eb0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006eb4:	2340      	movne	r3, #64	; 0x40
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	6031      	str	r1, [r6, #0]
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	b016      	add	sp, #88	; 0x58
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	466a      	mov	r2, sp
 8006ec2:	f000 f849 	bl	8006f58 <_fstat_r>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	dbed      	blt.n	8006ea6 <__swhatbuf_r+0x12>
 8006eca:	9901      	ldr	r1, [sp, #4]
 8006ecc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ed0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ed4:	4259      	negs	r1, r3
 8006ed6:	4159      	adcs	r1, r3
 8006ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006edc:	e7eb      	b.n	8006eb6 <__swhatbuf_r+0x22>

08006ede <__smakebuf_r>:
 8006ede:	898b      	ldrh	r3, [r1, #12]
 8006ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ee2:	079d      	lsls	r5, r3, #30
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	d507      	bpl.n	8006efa <__smakebuf_r+0x1c>
 8006eea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	6163      	str	r3, [r4, #20]
 8006ef6:	b002      	add	sp, #8
 8006ef8:	bd70      	pop	{r4, r5, r6, pc}
 8006efa:	466a      	mov	r2, sp
 8006efc:	ab01      	add	r3, sp, #4
 8006efe:	f7ff ffc9 	bl	8006e94 <__swhatbuf_r>
 8006f02:	9900      	ldr	r1, [sp, #0]
 8006f04:	4605      	mov	r5, r0
 8006f06:	4630      	mov	r0, r6
 8006f08:	f7ff f872 	bl	8005ff0 <_malloc_r>
 8006f0c:	b948      	cbnz	r0, 8006f22 <__smakebuf_r+0x44>
 8006f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f12:	059a      	lsls	r2, r3, #22
 8006f14:	d4ef      	bmi.n	8006ef6 <__smakebuf_r+0x18>
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	f043 0302 	orr.w	r3, r3, #2
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	e7e3      	b.n	8006eea <__smakebuf_r+0xc>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	6020      	str	r0, [r4, #0]
 8006f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	9b00      	ldr	r3, [sp, #0]
 8006f2e:	6120      	str	r0, [r4, #16]
 8006f30:	6163      	str	r3, [r4, #20]
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	b15b      	cbz	r3, 8006f4e <__smakebuf_r+0x70>
 8006f36:	4630      	mov	r0, r6
 8006f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3c:	f000 f81e 	bl	8006f7c <_isatty_r>
 8006f40:	b128      	cbz	r0, 8006f4e <__smakebuf_r+0x70>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f023 0303 	bic.w	r3, r3, #3
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	431d      	orrs	r5, r3
 8006f52:	81a5      	strh	r5, [r4, #12]
 8006f54:	e7cf      	b.n	8006ef6 <__smakebuf_r+0x18>
	...

08006f58 <_fstat_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4d06      	ldr	r5, [pc, #24]	; (8006f78 <_fstat_r+0x20>)
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f7fa fdc6 	bl	8001af6 <_fstat>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d102      	bne.n	8006f74 <_fstat_r+0x1c>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	b103      	cbz	r3, 8006f74 <_fstat_r+0x1c>
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	bf00      	nop
 8006f78:	20000474 	.word	0x20000474

08006f7c <_isatty_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	2300      	movs	r3, #0
 8006f80:	4d05      	ldr	r5, [pc, #20]	; (8006f98 <_isatty_r+0x1c>)
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	f7fa fdc4 	bl	8001b14 <_isatty>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_isatty_r+0x1a>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_isatty_r+0x1a>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	20000474 	.word	0x20000474

08006f9c <_init>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr

08006fa8 <_fini>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	bf00      	nop
 8006fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fae:	bc08      	pop	{r3}
 8006fb0:	469e      	mov	lr, r3
 8006fb2:	4770      	bx	lr
