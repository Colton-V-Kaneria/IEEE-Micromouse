
Macrorat_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007744  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007858  08007858  00017858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c04  08007c04  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007c04  08007c04  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c04  08007c04  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200001e8  08007df4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08007df4  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6b4  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da6  00000000  00000000  0002a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094f  00000000  00000000  0002d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d12  00000000  00000000  0002dc1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb6c  00000000  00000000  00046931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f8b7  00000000  00000000  0005349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004328  00000000  00000000  000e2d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800783c 	.word	0x0800783c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800783c 	.word	0x0800783c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001128:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001134:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001138:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800113c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001144:	e000      	b.n	8001148 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001146:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001148:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f9      	beq.n	8001146 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001152:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <measure_dist>:
static void ADC1_Select_CH9(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t measure_dist(dist_t dist) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;
	GPIO_TypeDef* receiver_port;
	uint16_t receiver_pin;

	switch(dist) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d83a      	bhi.n	80011ee <measure_dist+0x86>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <measure_dist+0x18>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	08001191 	.word	0x08001191
 8001184:	080011a9 	.word	0x080011a9
 8001188:	080011c1 	.word	0x080011c1
 800118c:	080011d9 	.word	0x080011d9
		case FL:
			emitter_port = EMIT_FL_GPIO_Port;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <measure_dist+0xd0>)
 8001192:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FL_Pin;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_FL_GPIO_Port;
 800119a:	4b27      	ldr	r3, [pc, #156]	; (8001238 <measure_dist+0xd0>)
 800119c:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_FL_Pin;
 800119e:	2302      	movs	r3, #2
 80011a0:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH9();
 80011a2:	f000 fd61 	bl	8001c68 <ADC1_Select_CH9>
			break;
 80011a6:	e023      	b.n	80011f0 <measure_dist+0x88>
		case L:
			emitter_port = EMIT_L_GPIO_Port;
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <measure_dist+0xd0>)
 80011aa:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_L_Pin;
 80011ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b0:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_L_GPIO_Port;
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <measure_dist+0xd0>)
 80011b4:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_L_Pin;
 80011b6:	2301      	movs	r3, #1
 80011b8:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH8();
 80011ba:	f000 fd37 	bl	8001c2c <ADC1_Select_CH8>
			break;
 80011be:	e017      	b.n	80011f0 <measure_dist+0x88>
		case R:
			emitter_port = EMIT_R_GPIO_Port;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <measure_dist+0xd0>)
 80011c2:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_R_Pin;
 80011c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c8:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_R_GPIO_Port;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <measure_dist+0xd4>)
 80011cc:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_R_Pin;
 80011ce:	2320      	movs	r3, #32
 80011d0:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH5();
 80011d2:	f000 fd0d 	bl	8001bf0 <ADC1_Select_CH5>
			break;
 80011d6:	e00b      	b.n	80011f0 <measure_dist+0x88>
		case FR:
			emitter_port = EMIT_FR_GPIO_Port;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <measure_dist+0xd0>)
 80011da:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FR_Pin;
 80011dc:	2320      	movs	r3, #32
 80011de:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_FR_GPIO_Port;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <measure_dist+0xd4>)
 80011e2:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_FR_Pin;
 80011e4:	2310      	movs	r3, #16
 80011e6:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH4();
 80011e8:	f000 fce4 	bl	8001bb4 <ADC1_Select_CH4>
			break;
 80011ec:	e000      	b.n	80011f0 <measure_dist+0x88>
		default:
			break;
 80011ee:	bf00      	nop
	}

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 80011f0:	8a7b      	ldrh	r3, [r7, #18]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f002 f84e 	bl	8003298 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80011fc:	2005      	movs	r0, #5
 80011fe:	f001 f93d 	bl	800247c <HAL_Delay>

	HAL_ADC_Start(&hadc1);
 8001202:	480f      	ldr	r0, [pc, #60]	; (8001240 <measure_dist+0xd8>)
 8001204:	f001 fa36 	bl	8002674 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <measure_dist+0xd8>)
 800120e:	f001 fb0b 	bl	8002828 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <measure_dist+0xd8>)
 8001214:	f001 fc0e 	bl	8002a34 <HAL_ADC_GetValue>
 8001218:	4603      	mov	r3, r0
 800121a:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 800121c:	4808      	ldr	r0, [pc, #32]	; (8001240 <measure_dist+0xd8>)
 800121e:	f001 fad7 	bl	80027d0 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8001222:	8a7b      	ldrh	r3, [r7, #18]
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f002 f835 	bl	8003298 <HAL_GPIO_WritePin>

	return adc_val;
 800122e:	893b      	ldrh	r3, [r7, #8]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40010c00 	.word	0x40010c00
 800123c:	40010800 	.word	0x40010800
 8001240:	20000204 	.word	0x20000204

08001244 <average_dist>:

uint16_t average_dist(dist_t sensor)	// dist tells us which sensor's distance we are measuring
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	static int IR_index = 0;

	IR_data[sensor][IR_index] = measure_dist(sensor); // puts newest distance into array
 800124e:	79fc      	ldrb	r4, [r7, #7]
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <average_dist+0x94>)
 8001252:	681d      	ldr	r5, [r3, #0]
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff86 	bl	8001168 <measure_dist>
 800125c:	4603      	mov	r3, r0
 800125e:	4619      	mov	r1, r3
 8001260:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <average_dist+0x98>)
 8001262:	4623      	mov	r3, r4
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	1b1b      	subs	r3, r3, r4
 8001268:	442b      	add	r3, r5
 800126a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	int sum = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 15; i++)
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	e00f      	b.n	8001298 <average_dist+0x54>
	{
		sum += IR_data[sensor][i];
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	4918      	ldr	r1, [pc, #96]	; (80012dc <average_dist+0x98>)
 800127c:	4613      	mov	r3, r2
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	4413      	add	r3, r2
 8001286:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 15; i++)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3301      	adds	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b0e      	cmp	r3, #14
 800129c:	ddec      	ble.n	8001278 <average_dist+0x34>
	}

	IR_index = (IR_index + 1) % 15;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <average_dist+0x94>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <average_dist+0x9c>)
 80012a6:	fb83 1302 	smull	r1, r3, r3, r2
 80012aa:	4413      	add	r3, r2
 80012ac:	10d9      	asrs	r1, r3, #3
 80012ae:	17d3      	asrs	r3, r2, #31
 80012b0:	1ac9      	subs	r1, r1, r3
 80012b2:	460b      	mov	r3, r1
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	1a5b      	subs	r3, r3, r1
 80012b8:	1ad1      	subs	r1, r2, r3
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <average_dist+0x94>)
 80012bc:	6019      	str	r1, [r3, #0]

	return sum / 15;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <average_dist+0x9c>)
 80012c2:	fb82 1203 	smull	r1, r2, r2, r3
 80012c6:	441a      	add	r2, r3
 80012c8:	10d2      	asrs	r2, r2, #3
 80012ca:	17db      	asrs	r3, r3, #31
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdb0      	pop	{r4, r5, r7, pc}
 80012d8:	200003d0 	.word	0x200003d0
 80012dc:	20000314 	.word	0x20000314
 80012e0:	88888889 	.word	0x88888889
 80012e4:	00000000 	.word	0x00000000

080012e8 <calc_v_batt>:

float calc_v_batt()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	ADC1_Select_CH1();
 80012ec:	f000 fc44 	bl	8001b78 <ADC1_Select_CH1>

	HAL_ADC_Start(&hadc1);
 80012f0:	4819      	ldr	r0, [pc, #100]	; (8001358 <calc_v_batt+0x70>)
 80012f2:	f001 f9bf 	bl	8002674 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012f6:	f04f 31ff 	mov.w	r1, #4294967295
 80012fa:	4817      	ldr	r0, [pc, #92]	; (8001358 <calc_v_batt+0x70>)
 80012fc:	f001 fa94 	bl	8002828 <HAL_ADC_PollForConversion>
	battery_reading = HAL_ADC_GetValue(&hadc1);
 8001300:	4815      	ldr	r0, [pc, #84]	; (8001358 <calc_v_batt+0x70>)
 8001302:	f001 fb97 	bl	8002a34 <HAL_ADC_GetValue>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <calc_v_batt+0x74>)
 800130c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <calc_v_batt+0x70>)
 8001310:	f001 fa5e 	bl	80027d0 <HAL_ADC_Stop>

	// multiply by ratio to convert to V, then multiply by 3
    return battery_reading * v_ratio * 3;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <calc_v_batt+0x74>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f873 	bl	8000404 <__aeabi_i2d>
 800131e:	a30c      	add	r3, pc, #48	; (adr r3, 8001350 <calc_v_batt+0x68>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f8d8 	bl	80004d8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <calc_v_batt+0x78>)
 8001336:	f7ff f8cf 	bl	80004d8 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fba1 	bl	8000a88 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
//	v_meter = measure_battery(BATTERY);
//	fl_v_meter = (float)(v_meter)/1206;
//	fl_batt_volt = (float)(v_meter*3)/1206;
    //batt volt obtained through voltage division

}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	f3af 8000 	nop.w
 8001350:	97635e74 	.word	0x97635e74
 8001354:	3f4adea8 	.word	0x3f4adea8
 8001358:	20000204 	.word	0x20000204
 800135c:	200003c0 	.word	0x200003c0
 8001360:	40080000 	.word	0x40080000

08001364 <calc_PWM>:

int calc_PWM(float voltage)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	v_batt = calc_v_batt();
 800136c:	f7ff ffbc 	bl	80012e8 <calc_v_batt>
 8001370:	4603      	mov	r3, r0
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <calc_PWM+0x3c>)
 8001374:	6013      	str	r3, [r2, #0]
	return (voltage/v_batt)*2047;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <calc_PWM+0x3c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fd95 	bl	8000eac <__aeabi_fdiv>
 8001382:	4603      	mov	r3, r0
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <calc_PWM+0x40>)
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fcdc 	bl	8000d44 <__aeabi_fmul>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe9e 	bl	80010d0 <__aeabi_f2iz>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200003c4 	.word	0x200003c4
 80013a4:	44ffe000 	.word	0x44ffe000

080013a8 <calc_distance>:

int calc_distance()
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	return (d_L + d_R)/2;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <calc_distance+0x1c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <calc_distance+0x20>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	0fda      	lsrs	r2, r3, #31
 80013b8:	4413      	add	r3, r2
 80013ba:	105b      	asrs	r3, r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000394 	.word	0x20000394
 80013c8:	20000398 	.word	0x20000398
 80013cc:	00000000 	.word	0x00000000

080013d0 <calc_angle>:

int calc_angle()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	int angle = (int)((d_R - d_L)/(2.0 * RW) * (180.0/M_PI)) % 360;
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <calc_angle+0x90>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <calc_angle+0x94>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f80f 	bl	8000404 <__aeabi_i2d>
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <calc_angle+0x98>)
 80013ec:	f7ff f99e 	bl	800072c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	a317      	add	r3, pc, #92	; (adr r3, 8001458 <calc_angle+0x88>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f86b 	bl	80004d8 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb15 	bl	8000a38 <__aeabi_d2iz>
 800140e:	4603      	mov	r3, r0
 8001410:	4a16      	ldr	r2, [pc, #88]	; (800146c <calc_angle+0x9c>)
 8001412:	fb82 1203 	smull	r1, r2, r2, r3
 8001416:	441a      	add	r2, r3
 8001418:	1211      	asrs	r1, r2, #8
 800141a:	17da      	asrs	r2, r3, #31
 800141c:	1a8a      	subs	r2, r1, r2
 800141e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001422:	fb01 f202 	mul.w	r2, r1, r2
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	607b      	str	r3, [r7, #4]

	// These next statements ensure the result is between -180 and 180
	if (angle > 180)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2bb4      	cmp	r3, #180	; 0xb4
 800142e:	dd04      	ble.n	800143a <calc_angle+0x6a>
	{
		angle -= 360;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	e007      	b.n	800144a <calc_angle+0x7a>
	}
	else if (angle < -180)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001440:	da03      	bge.n	800144a <calc_angle+0x7a>
	{
		angle += 360;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001448:	607b      	str	r3, [r7, #4]
	}

	return angle;
 800144a:	687b      	ldr	r3, [r7, #4]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	f3af 8000 	nop.w
 8001458:	1a63c1f8 	.word	0x1a63c1f8
 800145c:	404ca5dc 	.word	0x404ca5dc
 8001460:	20000398 	.word	0x20000398
 8001464:	20000394 	.word	0x20000394
 8001468:	40548000 	.word	0x40548000
 800146c:	b60b60b7 	.word	0xb60b60b7

08001470 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	// this is the left encoder timer
	if (htim->Instance == TIM3) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a44      	ldr	r2, [pc, #272]	; (8001590 <HAL_TIM_IC_CaptureCallback+0x120>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d13b      	bne.n	80014fa <HAL_TIM_IC_CaptureCallback+0x8a>
		//enc_left = __HAL_TIM_GET_COUNTER(htim);
		raw_count_left = __HAL_TIM_GET_COUNTER(htim);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <HAL_TIM_IC_CaptureCallback+0x124>)
 800148c:	801a      	strh	r2, [r3, #0]
		enc_left -= (int16_t)(raw_count_left - prev_count_left);
 800148e:	4b42      	ldr	r3, [pc, #264]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a40      	ldr	r2, [pc, #256]	; (8001594 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001494:	8811      	ldrh	r1, [r2, #0]
 8001496:	4a41      	ldr	r2, [pc, #260]	; (800159c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001498:	8812      	ldrh	r2, [r2, #0]
 800149a:	1a8a      	subs	r2, r1, r2
 800149c:	b292      	uxth	r2, r2
 800149e:	b212      	sxth	r2, r2
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	4a3d      	ldr	r2, [pc, #244]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014a4:	6013      	str	r3, [r2, #0]
		d_L = (enc_left / 360.0) * (M_PI * diameter);
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe ffaa 	bl	8000404 <__aeabi_i2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014b6:	f7ff f939 	bl	800072c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	a331      	add	r3, pc, #196	; (adr r3, 8001588 <HAL_TIM_IC_CaptureCallback+0x118>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f806 	bl	80004d8 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fab0 	bl	8000a38 <__aeabi_d2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80014dc:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();	// updates distance whenever d_L changes
 80014de:	f7ff ff63 	bl	80013a8 <calc_distance>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a30      	ldr	r2, [pc, #192]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80014e6:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 80014e8:	f7ff ff72 	bl	80013d0 <calc_angle>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a2f      	ldr	r2, [pc, #188]	; (80015ac <HAL_TIM_IC_CaptureCallback+0x13c>)
 80014f0:	6013      	str	r3, [r2, #0]

		prev_count_left = raw_count_left;
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_TIM_IC_CaptureCallback+0x124>)
 80014f4:	881a      	ldrh	r2, [r3, #0]
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014f8:	801a      	strh	r2, [r3, #0]
	}
	if (htim->Instance == TIM4) {
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2c      	ldr	r2, [pc, #176]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d13b      	bne.n	800157c <HAL_TIM_IC_CaptureCallback+0x10c>
		//enc_right = __HAL_TIM_GET_COUNTER(htim);
		raw_count_right = __HAL_TIM_GET_COUNTER(htim);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800150e:	801a      	strh	r2, [r3, #0]
		enc_right -= (int16_t)(raw_count_right - prev_count_right);
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001516:	8811      	ldrh	r1, [r2, #0]
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x14c>)
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	1a8a      	subs	r2, r1, r2
 800151e:	b292      	uxth	r2, r2
 8001520:	b212      	sxth	r2, r2
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001526:	6013      	str	r3, [r2, #0]
		d_R = (enc_right / 360.0) * (M_PI * diameter);
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x148>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff69 	bl	8000404 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001538:	f7ff f8f8 	bl	800072c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	a310      	add	r3, pc, #64	; (adr r3, 8001588 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe ffc5 	bl	80004d8 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fa6f 	bl	8000a38 <__aeabi_d2iz>
 800155a:	4603      	mov	r3, r0
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800155e:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();
 8001560:	f7ff ff22 	bl	80013a8 <calc_distance>
 8001564:	4603      	mov	r3, r0
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001568:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 800156a:	f7ff ff31 	bl	80013d0 <calc_angle>
 800156e:	4603      	mov	r3, r0
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001572:	6013      	str	r3, [r2, #0]

		prev_count_right = raw_count_right;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001576:	881a      	ldrh	r2, [r3, #0]
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x14c>)
 800157a:	801a      	strh	r2, [r3, #0]
	}
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	f3af 8000 	nop.w
 8001588:	2ee64e81 	.word	0x2ee64e81
 800158c:	4059eb0b 	.word	0x4059eb0b
 8001590:	40000400 	.word	0x40000400
 8001594:	200003b0 	.word	0x200003b0
 8001598:	2000038c 	.word	0x2000038c
 800159c:	200003b4 	.word	0x200003b4
 80015a0:	40768000 	.word	0x40768000
 80015a4:	20000394 	.word	0x20000394
 80015a8:	2000039c 	.word	0x2000039c
 80015ac:	200003ac 	.word	0x200003ac
 80015b0:	40000800 	.word	0x40000800
 80015b4:	200003b2 	.word	0x200003b2
 80015b8:	20000390 	.word	0x20000390
 80015bc:	200003b6 	.word	0x200003b6
 80015c0:	20000398 	.word	0x20000398

080015c4 <max>:
	return (a < b) ? a : b;
}


float max(float a, float b)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	return (a > b) ? a : b;
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fd73 	bl	80010bc <__aeabi_fcmpgt>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <max+0x1c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	e000      	b.n	80015e2 <max+0x1e>
 80015e0:	683b      	ldr	r3, [r7, #0]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <move_forward>:
	HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 0);
	HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
}

void move_forward()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	movement = forward;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <move_forward+0x40>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]

	// set both motors to move forward
	HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 1);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <move_forward+0x44>)
 80015fe:	f001 fe4b 	bl	8003298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001608:	480a      	ldr	r0, [pc, #40]	; (8001634 <move_forward+0x48>)
 800160a:	f001 fe45 	bl	8003298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 1);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <move_forward+0x48>)
 8001616:	f001 fe3f 	bl	8003298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <move_forward+0x48>)
 8001622:	f001 fe39 	bl	8003298 <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200003cc 	.word	0x200003cc
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163c:	f000 febc 	bl	80023b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001640:	f000 f834 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001644:	f000 f9f6 	bl	8001a34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001648:	f000 f8ca 	bl	80017e0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800164c:	f000 f88a 	bl	8001764 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001650:	f000 f948 	bl	80018e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001654:	f000 f99a 	bl	800198c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);		// start timer 2 in interrupt mode
 8001658:	480f      	ldr	r0, [pc, #60]	; (8001698 <main+0x60>)
 800165a:	f002 fbed 	bl	8003e38 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800165e:	2108      	movs	r1, #8
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <main+0x60>)
 8001662:	f002 fc93 	bl	8003f8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001666:	210c      	movs	r1, #12
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <main+0x60>)
 800166a:	f002 fc8f 	bl	8003f8c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800166e:	213c      	movs	r1, #60	; 0x3c
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <main+0x64>)
 8001672:	f002 fdcf 	bl	8004214 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001676:	213c      	movs	r1, #60	; 0x3c
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <main+0x68>)
 800167a:	f002 fdcb 	bl	8004214 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);	//turn off buzzer?
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <main+0x6c>)
 8001686:	f001 fe07 	bl	8003298 <HAL_GPIO_WritePin>

  move_forward();
 800168a:	f7ff ffaf 	bl	80015ec <move_forward>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  movement = forward;
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <main+0x70>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]

  while (1)
 8001694:	e7fe      	b.n	8001694 <main+0x5c>
 8001696:	bf00      	nop
 8001698:	20000234 	.word	0x20000234
 800169c:	2000027c 	.word	0x2000027c
 80016a0:	200002c4 	.word	0x200002c4
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	200003cc 	.word	0x200003cc

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b6:	2228      	movs	r2, #40	; 0x28
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f97b 	bl	80059b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016dc:	2301      	movs	r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ea:	2301      	movs	r3, #1
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fde0 	bl	80032c8 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800170e:	f000 fbe1 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800171e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001722:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001724:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001728:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2102      	movs	r1, #2
 8001730:	4618      	mov	r0, r3
 8001732:	f002 f84b 	bl	80037cc <HAL_RCC_ClockConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800173c:	f000 fbca 	bl	8001ed4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001740:	2302      	movs	r3, #2
 8001742:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4618      	mov	r0, r3
 800174c:	f002 f9b8 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001756:	f000 fbbd 	bl	8001ed4 <Error_Handler>
  }
}
 800175a:	bf00      	nop
 800175c:	3750      	adds	r7, #80	; 0x50
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_ADC1_Init+0x74>)
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <MX_ADC1_Init+0x78>)
 8001778:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_ADC1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_ADC1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_ADC1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_ADC1_Init+0x74>)
 800178e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_ADC1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_ADC1_Init+0x74>)
 800179c:	2201      	movs	r2, #1
 800179e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_ADC1_Init+0x74>)
 80017a2:	f000 fe8f 	bl	80024c4 <HAL_ADC_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017ac:	f000 fb92 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017b0:	2309      	movs	r3, #9
 80017b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_ADC1_Init+0x74>)
 80017c2:	f001 f943 	bl	8002a4c <HAL_ADC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017cc:	f000 fb82 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000204 	.word	0x20000204
 80017dc:	40012400 	.word	0x40012400

080017e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <MX_TIM2_Init+0x100>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <MX_TIM2_Init+0x100>)
 800181a:	2248      	movs	r2, #72	; 0x48
 800181c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <MX_TIM2_Init+0x100>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <MX_TIM2_Init+0x100>)
 8001826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <MX_TIM2_Init+0x100>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <MX_TIM2_Init+0x100>)
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001838:	4829      	ldr	r0, [pc, #164]	; (80018e0 <MX_TIM2_Init+0x100>)
 800183a:	f002 faad 	bl	8003d98 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001844:	f000 fb46 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001852:	4619      	mov	r1, r3
 8001854:	4822      	ldr	r0, [pc, #136]	; (80018e0 <MX_TIM2_Init+0x100>)
 8001856:	f002 ff55 	bl	8004704 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001860:	f000 fb38 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_TIM2_Init+0x100>)
 8001866:	f002 fb39 	bl	8003edc <HAL_TIM_PWM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001870:	f000 fb30 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	4619      	mov	r1, r3
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <MX_TIM2_Init+0x100>)
 8001884:	f003 fac4 	bl	8004e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800188e:	f000 fb21 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1024;
 8001896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2208      	movs	r2, #8
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_TIM2_Init+0x100>)
 80018ac:	f002 fe68 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018b6:	f000 fb0d 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	220c      	movs	r2, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM2_Init+0x100>)
 80018c2:	f002 fe5d 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80018cc:	f000 fb02 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM2_Init+0x100>)
 80018d2:	f000 fc2b 	bl	800212c <HAL_TIM_MspPostInit>

}
 80018d6:	bf00      	nop
 80018d8:	3738      	adds	r7, #56	; 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000234 	.word	0x20000234

080018e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 f85f 	bl	80059b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <MX_TIM3_Init+0xa0>)
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <MX_TIM3_Init+0xa4>)
 8001904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_TIM3_Init+0xa0>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_TIM3_Init+0xa0>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_TIM3_Init+0xa0>)
 8001914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001918:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_TIM3_Init+0xa0>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <MX_TIM3_Init+0xa0>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001926:	2303      	movs	r3, #3
 8001928:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800192a:	2302      	movs	r3, #2
 800192c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800192e:	2301      	movs	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800193a:	2302      	movs	r3, #2
 800193c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <MX_TIM3_Init+0xa0>)
 8001952:	f002 fbbd 	bl	80040d0 <HAL_TIM_Encoder_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800195c:	f000 faba 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_TIM3_Init+0xa0>)
 800196e:	f003 fa4f 	bl	8004e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001978:	f000 faac 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000027c 	.word	0x2000027c
 8001988:	40000400 	.word	0x40000400

0800198c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	2224      	movs	r2, #36	; 0x24
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f004 f80b 	bl	80059b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <MX_TIM4_Init+0xa0>)
 80019aa:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <MX_TIM4_Init+0xa4>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_TIM4_Init+0xa0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <MX_TIM4_Init+0xa0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_TIM4_Init+0xa0>)
 80019bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_TIM4_Init+0xa0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <MX_TIM4_Init+0xa0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ce:	2303      	movs	r3, #3
 80019d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80019d2:	2302      	movs	r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019d6:	2301      	movs	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019e6:	2301      	movs	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4619      	mov	r1, r3
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <MX_TIM4_Init+0xa0>)
 80019fa:	f002 fb69 	bl	80040d0 <HAL_TIM_Encoder_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a04:	f000 fa66 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_TIM4_Init+0xa0>)
 8001a16:	f003 f9fb 	bl	8004e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001a20:	f000 fa58 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3730      	adds	r7, #48	; 0x30
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200002c4 	.word	0x200002c4
 8001a30:	40000800 	.word	0x40000800

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a48:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a38      	ldr	r2, [pc, #224]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a66:	f043 0320 	orr.w	r3, r3, #32
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <MX_GPIO_Init+0xfc>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aae:	4821      	ldr	r0, [pc, #132]	; (8001b34 <MX_GPIO_Init+0x100>)
 8001ab0:	f001 fbf2 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_BWD_Pin
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f64f 5120 	movw	r1, #64800	; 0xfd20
 8001aba:	481f      	ldr	r0, [pc, #124]	; (8001b38 <MX_GPIO_Init+0x104>)
 8001abc:	f001 fbec 	bl	8003298 <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_FWD_Pin|EMIT_FR_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac6:	481d      	ldr	r0, [pc, #116]	; (8001b3c <MX_GPIO_Init+0x108>)
 8001ac8:	f001 fbe6 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4813      	ldr	r0, [pc, #76]	; (8001b34 <MX_GPIO_Init+0x100>)
 8001ae6:	f001 fa53 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_BWD_Pin
                           ML_BWD_Pin MR_FWD_Pin EMIT_FR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_BWD_Pin
 8001aea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001aee:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_FWD_Pin|EMIT_FR_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4619      	mov	r1, r3
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_GPIO_Init+0x104>)
 8001b04:	f001 fa44 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ML_FWD_Pin */
  GPIO_InitStruct.Pin = ML_FWD_Pin;
 8001b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_GPIO_Init+0x108>)
 8001b22:	f001 fa35 	bl	8002f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40010800 	.word	0x40010800

08001b40 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e009      	b.n	8001b66 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fade 	bl	800111c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf1      	blt.n	8001b52 <_write+0x12>
  }
  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <ADC1_Select_CH1>:

static void ADC1_Select_CH1(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <ADC1_Select_CH1+0x38>)
 8001b9a:	f000 ff57 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <ADC1_Select_CH1+0x30>
	{
		Error_Handler();
 8001ba4:	f000 f996 	bl	8001ed4 <Error_Handler>
	}
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000204 	.word	0x20000204

08001bb4 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <ADC1_Select_CH4+0x38>)
 8001bd6:	f000 ff39 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <ADC1_Select_CH4+0x30>
	{
		Error_Handler();
 8001be0:	f000 f978 	bl	8001ed4 <Error_Handler>
	}
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000204 	.word	0x20000204

08001bf0 <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8001c00:	2305      	movs	r3, #5
 8001c02:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <ADC1_Select_CH5+0x38>)
 8001c12:	f000 ff1b 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <ADC1_Select_CH5+0x30>
	{
		Error_Handler();
 8001c1c:	f000 f95a 	bl	8001ed4 <Error_Handler>
	}
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000204 	.word	0x20000204

08001c2c <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <ADC1_Select_CH8+0x38>)
 8001c4e:	f000 fefd 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <ADC1_Select_CH8+0x30>
	{
		Error_Handler();
 8001c58:	f000 f93c 	bl	8001ed4 <Error_Handler>
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000204 	.word	0x20000204

08001c68 <ADC1_Select_CH9>:

static void ADC1_Select_CH9(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8001c78:	2309      	movs	r3, #9
 8001c7a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001c80:	2301      	movs	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <ADC1_Select_CH9+0x38>)
 8001c8a:	f000 fedf 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <ADC1_Select_CH9+0x30>
	{
		Error_Handler();
 8001c94:	f000 f91e 	bl	8001ed4 <Error_Handler>
	}
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000204 	.word	0x20000204
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	if (time_count % ((int)(callback_period * 1000)) == 0)
	{
		switch(movement)
 8001cb0:	4b7d      	ldr	r3, [pc, #500]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	f200 80e3 	bhi.w	8001e80 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001e81 	.word	0x08001e81
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001e81 	.word	0x08001e81
 8001ccc:	08001e81 	.word	0x08001e81
 8001cd0:	08001e81 	.word	0x08001e81
//
//				// find the difference between intended distance and actual distance
//				fwd_error = fwd_movement - intended_distance;
//				rot_error = enc_right - enc_left;

				IR_dists[L] = average_dist(L);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7ff fab5 	bl	8001244 <average_dist>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ce0:	805a      	strh	r2, [r3, #2]
				IR_dists[R] = average_dist(R);
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f7ff faae 	bl	8001244 <average_dist>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cee:	809a      	strh	r2, [r3, #4]
				left_side_error = wall_nominal[L] - IR_dists[L] * (wall_nominal[L] / (float)(wall_standard[L]));
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe ffd1 	bl	8000c9c <__aeabi_i2f>
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cfe:	885b      	ldrh	r3, [r3, #2]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ffcb 	bl	8000c9c <__aeabi_i2f>
 8001d06:	4605      	mov	r5, r0
 8001d08:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe ffc5 	bl	8000c9c <__aeabi_i2f>
 8001d12:	4606      	mov	r6, r0
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d16:	885b      	ldrh	r3, [r3, #2]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe ffbb 	bl	8000c94 <__aeabi_ui2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4619      	mov	r1, r3
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7ff f8c2 	bl	8000eac <__aeabi_fdiv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f7ff f809 	bl	8000d44 <__aeabi_fmul>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7fe fefa 	bl	8000b30 <__aeabi_fsub>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f9c6 	bl	80010d0 <__aeabi_f2iz>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a5c      	ldr	r2, [pc, #368]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d48:	6013      	str	r3, [r2, #0]
				right_side_error = wall_nominal[R] - IR_dists[R] * (wall_nominal[R] / (float)(wall_standard[R]));
 8001d4a:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d4c:	889b      	ldrh	r3, [r3, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffa4 	bl	8000c9c <__aeabi_i2f>
 8001d54:	4604      	mov	r4, r0
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d58:	889b      	ldrh	r3, [r3, #4]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ff9e 	bl	8000c9c <__aeabi_i2f>
 8001d60:	4605      	mov	r5, r0
 8001d62:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d64:	889b      	ldrh	r3, [r3, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ff98 	bl	8000c9c <__aeabi_i2f>
 8001d6c:	4606      	mov	r6, r0
 8001d6e:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d70:	889b      	ldrh	r3, [r3, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ff8e 	bl	8000c94 <__aeabi_ui2f>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	f7ff f895 	bl	8000eac <__aeabi_fdiv>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4628      	mov	r0, r5
 8001d88:	f7fe ffdc 	bl	8000d44 <__aeabi_fmul>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4620      	mov	r0, r4
 8001d92:	f7fe fecd 	bl	8000b30 <__aeabi_fsub>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f999 	bl	80010d0 <__aeabi_f2iz>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a46      	ldr	r2, [pc, #280]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001da2:	6013      	str	r3, [r2, #0]
				str_error = right_side_error - left_side_error;
 8001da4:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a44      	ldr	r2, [pc, #272]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001db0:	6013      	str	r3, [r2, #0]

				new_v_motor_L = base_v_motor - K_str * str_error;
 8001db2:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fb36 	bl	8000428 <__aeabi_f2d>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fb1d 	bl	8000404 <__aeabi_i2d>
 8001dca:	a333      	add	r3, pc, #204	; (adr r3, 8001e98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fb82 	bl	80004d8 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe f9c6 	bl	800016c <__adddf3>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fe4e 	bl	8000a88 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a36      	ldr	r2, [pc, #216]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001df0:	6013      	str	r3, [r2, #0]
				new_v_motor_L = max(new_v_motor_L, 0);
 8001df2:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fbe2 	bl	80015c4 <max>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001e04:	6013      	str	r3, [r2, #0]
				new_v_motor_R = base_v_motor + K_str * str_error;
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb0c 	bl	8000428 <__aeabi_f2d>
 8001e10:	4604      	mov	r4, r0
 8001e12:	460d      	mov	r5, r1
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe faf3 	bl	8000404 <__aeabi_i2d>
 8001e1e:	a320      	add	r3, pc, #128	; (adr r3, 8001ea0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fb58 	bl	80004d8 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe f99c 	bl	800016c <__adddf3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fe24 	bl	8000a88 <__aeabi_d2f>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001e44:	6013      	str	r3, [r2, #0]
				new_v_motor_R = max(new_v_motor_R, 0);
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fbb8 	bl	80015c4 <max>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001e58:	6013      	str	r3, [r2, #0]

				// IMPORTANT: left motor is channel 4, right motor is channel 3
				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fa80 	bl	8001364 <calc_PWM>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fa77 	bl	8001364 <calc_PWM>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c

//				prev_d_center = d_center;
				break;
 8001e7e:	bf00      	nop
			case turn_180:
				break;
		}
	}

	time_count++;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	f3af 8000 	nop.w
 8001e98:	01a36e2f 	.word	0x01a36e2f
 8001e9c:	3f4205bc 	.word	0x3f4205bc
 8001ea0:	01a36e2f 	.word	0x01a36e2f
 8001ea4:	bf4205bc 	.word	0xbf4205bc
 8001ea8:	200003cc 	.word	0x200003cc
 8001eac:	2000030c 	.word	0x2000030c
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	200003a4 	.word	0x200003a4
 8001ebc:	200003a8 	.word	0x200003a8
 8001ec0:	200003a0 	.word	0x200003a0
 8001ec4:	20000010 	.word	0x20000010
 8001ec8:	200003b8 	.word	0x200003b8
 8001ecc:	200003bc 	.word	0x200003bc
 8001ed0:	200003c8 	.word	0x200003c8

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	e7fe      	b.n	8001edc <Error_Handler+0x8>
	...

08001ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_MspInit+0x5c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <HAL_MspInit+0x5c>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_MspInit+0x60>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_MspInit+0x60>)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010000 	.word	0x40010000

08001f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_ADC_MspInit+0x98>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d137      	bne.n	8001fd4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_ADC_MspInit+0x9c>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_METER_Pin|RECIV_FR_Pin|RECIV_R_Pin;
 8001fac:	2332      	movs	r3, #50	; 0x32
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480a      	ldr	r0, [pc, #40]	; (8001fe4 <HAL_ADC_MspInit+0xa0>)
 8001fbc:	f000 ffe8 	bl	8002f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <HAL_ADC_MspInit+0xa4>)
 8001fd0:	f000 ffde 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40012400 	.word	0x40012400
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010c00 	.word	0x40010c00

08001fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d113      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_TIM_Base_MspInit+0x44>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_TIM_Base_MspInit+0x44>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_TIM_Base_MspInit+0x44>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	210f      	movs	r1, #15
 800201a:	201c      	movs	r0, #28
 800201c:	f000 ff81 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002020:	201c      	movs	r0, #28
 8002022:	f000 ff9a 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0318 	add.w	r3, r7, #24
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a32      	ldr	r2, [pc, #200]	; (8002118 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d12c      	bne.n	80020ae <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	61d3      	str	r3, [r2, #28]
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8002084:	23c0      	movs	r3, #192	; 0xc0
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	4619      	mov	r1, r3
 8002096:	4822      	ldr	r0, [pc, #136]	; (8002120 <HAL_TIM_Encoder_MspInit+0xec>)
 8002098:	f000 ff7a 	bl	8002f90 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2100      	movs	r1, #0
 80020a0:	201d      	movs	r0, #29
 80020a2:	f000 ff3e 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020a6:	201d      	movs	r0, #29
 80020a8:	f000 ff57 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ac:	e030      	b.n	8002110 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d12b      	bne.n	8002110 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	61d3      	str	r3, [r2, #28]
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 80020e8:	23c0      	movs	r3, #192	; 0xc0
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 0318 	add.w	r3, r7, #24
 80020f8:	4619      	mov	r1, r3
 80020fa:	480b      	ldr	r0, [pc, #44]	; (8002128 <HAL_TIM_Encoder_MspInit+0xf4>)
 80020fc:	f000 ff48 	bl	8002f90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	201e      	movs	r0, #30
 8002106:	f000 ff0c 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800210a:	201e      	movs	r0, #30
 800210c:	f000 ff25 	bl	8002f5a <HAL_NVIC_EnableIRQ>
}
 8002110:	bf00      	nop
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40000400 	.word	0x40000400
 800211c:	40021000 	.word	0x40021000
 8002120:	40010800 	.word	0x40010800
 8002124:	40000800 	.word	0x40000800
 8002128:	40010c00 	.word	0x40010c00

0800212c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d117      	bne.n	800217c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_TIM_MspPostInit+0x58>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_TIM_MspPostInit+0x58>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_TIM_MspPostInit+0x58>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 8002164:	230c      	movs	r3, #12
 8002166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2302      	movs	r3, #2
 800216e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	4804      	ldr	r0, [pc, #16]	; (8002188 <HAL_TIM_MspPostInit+0x5c>)
 8002178:	f000 ff0a 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40010800 	.word	0x40010800

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <NMI_Handler+0x4>

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <MemManage_Handler+0x4>

0800219e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <UsageFault_Handler+0x4>

080021aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d2:	f000 f937 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <TIM2_IRQHandler+0x10>)
 80021e2:	f002 f8c5 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000234 	.word	0x20000234

080021f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM3_IRQHandler+0x10>)
 80021f6:	f002 f8bb 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000027c 	.word	0x2000027c

08002204 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <TIM4_IRQHandler+0x10>)
 800220a:	f002 f8b1 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200002c4 	.word	0x200002c4

08002218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <_kill>:

int _kill(int pid, int sig)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002230:	f003 fc14 	bl	8005a5c <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	2216      	movs	r2, #22
 8002238:	601a      	str	r2, [r3, #0]
  return -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_exit>:

void _exit (int status)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800224e:	f04f 31ff 	mov.w	r1, #4294967295
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffe7 	bl	8002226 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002258:	e7fe      	b.n	8002258 <_exit+0x12>

0800225a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e00a      	b.n	8002282 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800226c:	f3af 8000 	nop.w
 8002270:	4601      	mov	r1, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	60ba      	str	r2, [r7, #8]
 8002278:	b2ca      	uxtb	r2, r1
 800227a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	dbf0      	blt.n	800226c <_read+0x12>
  }

  return len;
 800228a:	687b      	ldr	r3, [r7, #4]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ba:	605a      	str	r2, [r3, #4]
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <_isatty>:

int _isatty(int file)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <_sbrk+0x5c>)
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <_sbrk+0x60>)
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <_sbrk+0x64>)
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <_sbrk+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002324:	f003 fb9a 	bl	8005a5c <__errno>
 8002328:	4603      	mov	r3, r0
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	e009      	b.n	8002348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20005000 	.word	0x20005000
 8002354:	00000400 	.word	0x00000400
 8002358:	200003d4 	.word	0x200003d4
 800235c:	20000528 	.word	0x20000528

08002360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800236c:	f7ff fff8 	bl	8002360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002372:	490c      	ldr	r1, [pc, #48]	; (80023a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002388:	4c09      	ldr	r4, [pc, #36]	; (80023b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002396:	f003 fb67 	bl	8005a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800239a:	f7ff f94d 	bl	8001638 <main>
  bx lr
 800239e:	4770      	bx	lr
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80023a8:	08007c0c 	.word	0x08007c0c
  ldr r2, =_sbss
 80023ac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023b0:	20000528 	.word	0x20000528

080023b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_2_IRQHandler>
	...

080023b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x28>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x28>)
 80023c2:	f043 0310 	orr.w	r3, r3, #16
 80023c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 fd9f 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	200e      	movs	r0, #14
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fd84 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fdb7 	bl	8002f76 <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 fd7f 	bl	8002f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000014 	.word	0x20000014
 800243c:	2000001c 	.word	0x2000001c
 8002440:	20000018 	.word	0x20000018

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_IncTick+0x1c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_IncTick+0x20>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_IncTick+0x20>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	2000001c 	.word	0x2000001c
 8002464:	200003d8 	.word	0x200003d8

08002468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <HAL_GetTick+0x10>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	200003d8 	.word	0x200003d8

0800247c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff fff0 	bl	8002468 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d005      	beq.n	80024a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_Delay+0x44>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a2:	bf00      	nop
 80024a4:	f7ff ffe0 	bl	8002468 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d8f7      	bhi.n	80024a4 <HAL_Delay+0x28>
  {
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000001c 	.word	0x2000001c

080024c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0be      	b.n	8002664 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fd1e 	bl	8001f44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fbf1 	bl	8002cf0 <ADC_ConversionStop_Disable>
 800250e:	4603      	mov	r3, r0
 8002510:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 8099 	bne.w	8002652 <HAL_ADC_Init+0x18e>
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 8095 	bne.w	8002652 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002530:	f023 0302 	bic.w	r3, r3, #2
 8002534:	f043 0202 	orr.w	r2, r3, #2
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002544:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7b1b      	ldrb	r3, [r3, #12]
 800254a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800254c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4313      	orrs	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255c:	d003      	beq.n	8002566 <HAL_ADC_Init+0xa2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_ADC_Init+0xa8>
 8002566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800256a:	e000      	b.n	800256e <HAL_ADC_Init+0xaa>
 800256c:	2300      	movs	r3, #0
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7d1b      	ldrb	r3, [r3, #20]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d119      	bne.n	80025b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7b1b      	ldrb	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	3b01      	subs	r3, #1
 800258a:	035a      	lsls	r2, r3, #13
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e00b      	b.n	80025b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_ADC_Init+0x1a8>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e0:	d003      	beq.n	80025ea <HAL_ADC_Init+0x126>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d104      	bne.n	80025f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	051b      	lsls	r3, r3, #20
 80025f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	430a      	orrs	r2, r1
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <HAL_ADC_Init+0x1ac>)
 8002610:	4013      	ands	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	d10b      	bne.n	8002630 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800262e:	e018      	b.n	8002662 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f023 0312 	bic.w	r3, r3, #18
 8002638:	f043 0210 	orr.w	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002650:	e007      	b.n	8002662 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	ffe1f7fd 	.word	0xffe1f7fd
 8002670:	ff1f0efe 	.word	0xff1f0efe

08002674 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_Start+0x1a>
 800268a:	2302      	movs	r3, #2
 800268c:	e098      	b.n	80027c0 <HAL_ADC_Start+0x14c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fad0 	bl	8002c3c <ADC_Enable>
 800269c:	4603      	mov	r3, r0
 800269e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8087 	bne.w	80027b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <HAL_ADC_Start+0x154>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d105      	bne.n	80026d2 <HAL_ADC_Start+0x5e>
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_ADC_Start+0x158>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d115      	bne.n	80026fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d026      	beq.n	800273a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026fc:	e01d      	b.n	800273a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <HAL_ADC_Start+0x158>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_ADC_Start+0xaa>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <HAL_ADC_Start+0x154>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10d      	bne.n	800273a <HAL_ADC_Start+0xc6>
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_ADC_Start+0x158>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002732:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	f023 0206 	bic.w	r2, r3, #6
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c
 8002752:	e002      	b.n	800275a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f06f 0202 	mvn.w	r2, #2
 800276a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002776:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800277a:	d113      	bne.n	80027a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_ADC_Start+0x154>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d105      	bne.n	8002792 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_ADC_Start+0x158>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d108      	bne.n	80027a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	e00c      	b.n	80027be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e003      	b.n	80027be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40012800 	.word	0x40012800
 80027cc:	40012400 	.word	0x40012400

080027d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_Stop+0x1a>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e01a      	b.n	8002820 <HAL_ADC_Stop+0x50>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa7c 	bl	8002cf0 <ADC_ConversionStop_Disable>
 80027f8:	4603      	mov	r3, r0
 80027fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800283e:	f7ff fe13 	bl	8002468 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0d3      	b.n	8002a12 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d131      	bne.n	80028dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d12a      	bne.n	80028dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002886:	e021      	b.n	80028cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d01d      	beq.n	80028cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x7e>
 8002896:	f7ff fde7 	bl	8002468 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d212      	bcs.n	80028cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	f043 0204 	orr.w	r2, r3, #4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0a2      	b.n	8002a12 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0d6      	beq.n	8002888 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028da:	e070      	b.n	80029be <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028dc:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_ADC_PollForConversion+0x1f4>)
 80028de:	681c      	ldr	r4, [r3, #0]
 80028e0:	2002      	movs	r0, #2
 80028e2:	f001 f9a3 	bl	8003c2c <HAL_RCCEx_GetPeriphCLKFreq>
 80028e6:	4603      	mov	r3, r0
 80028e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_ADC_PollForConversion+0x1f8>)
 80028f4:	400b      	ands	r3, r1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d118      	bne.n	800292c <HAL_ADC_PollForConversion+0x104>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68d9      	ldr	r1, [r3, #12]
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_ADC_PollForConversion+0x1fc>)
 8002902:	400b      	ands	r3, r1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d111      	bne.n	800292c <HAL_ADC_PollForConversion+0x104>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6919      	ldr	r1, [r3, #16]
 800290e:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_ADC_PollForConversion+0x200>)
 8002910:	400b      	ands	r3, r1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <HAL_ADC_PollForConversion+0x100>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68d9      	ldr	r1, [r3, #12]
 800291c:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_ADC_PollForConversion+0x204>)
 800291e:	400b      	ands	r3, r1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_PollForConversion+0x100>
 8002924:	2314      	movs	r3, #20
 8002926:	e020      	b.n	800296a <HAL_ADC_PollForConversion+0x142>
 8002928:	2329      	movs	r3, #41	; 0x29
 800292a:	e01e      	b.n	800296a <HAL_ADC_PollForConversion+0x142>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6919      	ldr	r1, [r3, #16]
 8002932:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_ADC_PollForConversion+0x200>)
 8002934:	400b      	ands	r3, r1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_ADC_PollForConversion+0x120>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68d9      	ldr	r1, [r3, #12]
 8002940:	4b3a      	ldr	r3, [pc, #232]	; (8002a2c <HAL_ADC_PollForConversion+0x204>)
 8002942:	400b      	ands	r3, r1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <HAL_ADC_PollForConversion+0x13c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_ADC_PollForConversion+0x208>)
 8002950:	400b      	ands	r3, r1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <HAL_ADC_PollForConversion+0x140>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68d9      	ldr	r1, [r3, #12]
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_ADC_PollForConversion+0x208>)
 800295e:	400b      	ands	r3, r1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_PollForConversion+0x140>
 8002964:	2354      	movs	r3, #84	; 0x54
 8002966:	e000      	b.n	800296a <HAL_ADC_PollForConversion+0x142>
 8002968:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002970:	e021      	b.n	80029b6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d01a      	beq.n	80029b0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_ADC_PollForConversion+0x168>
 8002980:	f7ff fd72 	bl	8002468 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d20f      	bcs.n	80029b0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d90b      	bls.n	80029b0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e030      	b.n	8002a12 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d8d9      	bhi.n	8002972 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f06f 0212 	mvn.w	r2, #18
 80029c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029e2:	d115      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d111      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000014 	.word	0x20000014
 8002a20:	24924924 	.word	0x24924924
 8002a24:	00924924 	.word	0x00924924
 8002a28:	12492492 	.word	0x12492492
 8002a2c:	00492492 	.word	0x00492492
 8002a30:	00249249 	.word	0x00249249

08002a34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x20>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e0dc      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1da>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d81c      	bhi.n	8002ab6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b05      	subs	r3, #5
 8002a8e:	221f      	movs	r2, #31
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4019      	ands	r1, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b05      	subs	r3, #5
 8002aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab4:	e03c      	b.n	8002b30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d81c      	bhi.n	8002af8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b23      	subs	r3, #35	; 0x23
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	4019      	ands	r1, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b23      	subs	r3, #35	; 0x23
 8002aea:	fa00 f203 	lsl.w	r2, r0, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
 8002af6:	e01b      	b.n	8002b30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	3b41      	subs	r3, #65	; 0x41
 8002b0a:	221f      	movs	r2, #31
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4019      	ands	r1, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b41      	subs	r3, #65	; 0x41
 8002b24:	fa00 f203 	lsl.w	r2, r0, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d91c      	bls.n	8002b72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	3b1e      	subs	r3, #30
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	4019      	ands	r1, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6898      	ldr	r0, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	3b1e      	subs	r3, #30
 8002b64:	fa00 f203 	lsl.w	r2, r0, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e019      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6919      	ldr	r1, [r3, #16]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	2207      	movs	r2, #7
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6898      	ldr	r0, [r3, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d003      	beq.n	8002bb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bb2:	2b11      	cmp	r3, #17
 8002bb4:	d132      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d125      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d126      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bdc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d11a      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_ADC_ConfigChannel+0x1e8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0c9a      	lsrs	r2, r3, #18
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x1b2>
 8002c0a:	e007      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	40012400 	.word	0x40012400
 8002c34:	20000014 	.word	0x20000014
 8002c38:	431bde83 	.word	0x431bde83

08002c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d040      	beq.n	8002cdc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <ADC_Enable+0xac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <ADC_Enable+0xb0>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	0c9b      	lsrs	r3, r3, #18
 8002c76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c78:	e002      	b.n	8002c80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c86:	f7ff fbef 	bl	8002468 <HAL_GetTick>
 8002c8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c8c:	e01f      	b.n	8002cce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c8e:	f7ff fbeb 	bl	8002468 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d918      	bls.n	8002cce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d011      	beq.n	8002cce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d1d8      	bne.n	8002c8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000014 	.word	0x20000014
 8002cec:	431bde83 	.word	0x431bde83

08002cf0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d12e      	bne.n	8002d68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d1a:	f7ff fba5 	bl	8002468 <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d20:	e01b      	b.n	8002d5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d22:	f7ff fba1 	bl	8002468 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d914      	bls.n	8002d5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10d      	bne.n	8002d5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e007      	b.n	8002d6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d0dc      	beq.n	8002d22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <__NVIC_SetPriorityGrouping>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60d3      	str	r3, [r2, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_GetPriorityGrouping>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4906      	ldr	r1, [pc, #24]	; (8002e0c <__NVIC_EnableIRQ+0x34>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100

08002e10 <__NVIC_SetPriority>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db0a      	blt.n	8002e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	490c      	ldr	r1, [pc, #48]	; (8002e5c <__NVIC_SetPriority+0x4c>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e38:	e00a      	b.n	8002e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4908      	ldr	r1, [pc, #32]	; (8002e60 <__NVIC_SetPriority+0x50>)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	3b04      	subs	r3, #4
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	761a      	strb	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <NVIC_EncodePriority>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f1c3 0307 	rsb	r3, r3, #7
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	bf28      	it	cs
 8002e82:	2304      	movcs	r3, #4
 8002e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d902      	bls.n	8002e94 <NVIC_EncodePriority+0x30>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3b03      	subs	r3, #3
 8002e92:	e000      	b.n	8002e96 <NVIC_EncodePriority+0x32>
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43d9      	mvns	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	4313      	orrs	r3, r2
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Config>:
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00f      	b.n	8002efe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <SysTick_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f7ff ff90 	bl	8002e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SysTick_Config+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SysTick_Config+0x40>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff2d 	bl	8002d74 <__NVIC_SetPriorityGrouping>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff42 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff90 	bl	8002e64 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5f 	bl	8002e10 <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff35 	bl	8002dd8 <__NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ffa2 	bl	8002ec8 <SysTick_Config>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b08b      	sub	sp, #44	; 0x2c
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa2:	e169      	b.n	8003278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	f040 8158 	bne.w	8003272 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a9a      	ldr	r2, [pc, #616]	; (8003230 <HAL_GPIO_Init+0x2a0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d05e      	beq.n	800308a <HAL_GPIO_Init+0xfa>
 8002fcc:	4a98      	ldr	r2, [pc, #608]	; (8003230 <HAL_GPIO_Init+0x2a0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d875      	bhi.n	80030be <HAL_GPIO_Init+0x12e>
 8002fd2:	4a98      	ldr	r2, [pc, #608]	; (8003234 <HAL_GPIO_Init+0x2a4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d058      	beq.n	800308a <HAL_GPIO_Init+0xfa>
 8002fd8:	4a96      	ldr	r2, [pc, #600]	; (8003234 <HAL_GPIO_Init+0x2a4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d86f      	bhi.n	80030be <HAL_GPIO_Init+0x12e>
 8002fde:	4a96      	ldr	r2, [pc, #600]	; (8003238 <HAL_GPIO_Init+0x2a8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d052      	beq.n	800308a <HAL_GPIO_Init+0xfa>
 8002fe4:	4a94      	ldr	r2, [pc, #592]	; (8003238 <HAL_GPIO_Init+0x2a8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d869      	bhi.n	80030be <HAL_GPIO_Init+0x12e>
 8002fea:	4a94      	ldr	r2, [pc, #592]	; (800323c <HAL_GPIO_Init+0x2ac>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d04c      	beq.n	800308a <HAL_GPIO_Init+0xfa>
 8002ff0:	4a92      	ldr	r2, [pc, #584]	; (800323c <HAL_GPIO_Init+0x2ac>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d863      	bhi.n	80030be <HAL_GPIO_Init+0x12e>
 8002ff6:	4a92      	ldr	r2, [pc, #584]	; (8003240 <HAL_GPIO_Init+0x2b0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d046      	beq.n	800308a <HAL_GPIO_Init+0xfa>
 8002ffc:	4a90      	ldr	r2, [pc, #576]	; (8003240 <HAL_GPIO_Init+0x2b0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d85d      	bhi.n	80030be <HAL_GPIO_Init+0x12e>
 8003002:	2b12      	cmp	r3, #18
 8003004:	d82a      	bhi.n	800305c <HAL_GPIO_Init+0xcc>
 8003006:	2b12      	cmp	r3, #18
 8003008:	d859      	bhi.n	80030be <HAL_GPIO_Init+0x12e>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_GPIO_Init+0x80>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	0800308b 	.word	0x0800308b
 8003014:	08003065 	.word	0x08003065
 8003018:	08003077 	.word	0x08003077
 800301c:	080030b9 	.word	0x080030b9
 8003020:	080030bf 	.word	0x080030bf
 8003024:	080030bf 	.word	0x080030bf
 8003028:	080030bf 	.word	0x080030bf
 800302c:	080030bf 	.word	0x080030bf
 8003030:	080030bf 	.word	0x080030bf
 8003034:	080030bf 	.word	0x080030bf
 8003038:	080030bf 	.word	0x080030bf
 800303c:	080030bf 	.word	0x080030bf
 8003040:	080030bf 	.word	0x080030bf
 8003044:	080030bf 	.word	0x080030bf
 8003048:	080030bf 	.word	0x080030bf
 800304c:	080030bf 	.word	0x080030bf
 8003050:	080030bf 	.word	0x080030bf
 8003054:	0800306d 	.word	0x0800306d
 8003058:	08003081 	.word	0x08003081
 800305c:	4a79      	ldr	r2, [pc, #484]	; (8003244 <HAL_GPIO_Init+0x2b4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003062:	e02c      	b.n	80030be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	623b      	str	r3, [r7, #32]
          break;
 800306a:	e029      	b.n	80030c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	3304      	adds	r3, #4
 8003072:	623b      	str	r3, [r7, #32]
          break;
 8003074:	e024      	b.n	80030c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	3308      	adds	r3, #8
 800307c:	623b      	str	r3, [r7, #32]
          break;
 800307e:	e01f      	b.n	80030c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	330c      	adds	r3, #12
 8003086:	623b      	str	r3, [r7, #32]
          break;
 8003088:	e01a      	b.n	80030c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003092:	2304      	movs	r3, #4
 8003094:	623b      	str	r3, [r7, #32]
          break;
 8003096:	e013      	b.n	80030c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030a0:	2308      	movs	r3, #8
 80030a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	611a      	str	r2, [r3, #16]
          break;
 80030aa:	e009      	b.n	80030c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ac:	2308      	movs	r3, #8
 80030ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	615a      	str	r2, [r3, #20]
          break;
 80030b6:	e003      	b.n	80030c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030b8:	2300      	movs	r3, #0
 80030ba:	623b      	str	r3, [r7, #32]
          break;
 80030bc:	e000      	b.n	80030c0 <HAL_GPIO_Init+0x130>
          break;
 80030be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2bff      	cmp	r3, #255	; 0xff
 80030c4:	d801      	bhi.n	80030ca <HAL_GPIO_Init+0x13a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	e001      	b.n	80030ce <HAL_GPIO_Init+0x13e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2bff      	cmp	r3, #255	; 0xff
 80030d4:	d802      	bhi.n	80030dc <HAL_GPIO_Init+0x14c>
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	e002      	b.n	80030e2 <HAL_GPIO_Init+0x152>
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	3b08      	subs	r3, #8
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	210f      	movs	r1, #15
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	6a39      	ldr	r1, [r7, #32]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	431a      	orrs	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80b1 	beq.w	8003272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003110:	4b4d      	ldr	r3, [pc, #308]	; (8003248 <HAL_GPIO_Init+0x2b8>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <HAL_GPIO_Init+0x2b8>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6193      	str	r3, [r2, #24]
 800311c:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_GPIO_Init+0x2b8>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003128:	4a48      	ldr	r2, [pc, #288]	; (800324c <HAL_GPIO_Init+0x2bc>)
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003134:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4013      	ands	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a40      	ldr	r2, [pc, #256]	; (8003250 <HAL_GPIO_Init+0x2c0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_GPIO_Init+0x1ec>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3f      	ldr	r2, [pc, #252]	; (8003254 <HAL_GPIO_Init+0x2c4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00d      	beq.n	8003178 <HAL_GPIO_Init+0x1e8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <HAL_GPIO_Init+0x2c8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <HAL_GPIO_Init+0x1e4>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3d      	ldr	r2, [pc, #244]	; (800325c <HAL_GPIO_Init+0x2cc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d101      	bne.n	8003170 <HAL_GPIO_Init+0x1e0>
 800316c:	2303      	movs	r3, #3
 800316e:	e006      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 8003170:	2304      	movs	r3, #4
 8003172:	e004      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 8003174:	2302      	movs	r3, #2
 8003176:	e002      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_GPIO_Init+0x1ee>
 800317c:	2300      	movs	r3, #0
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	f002 0203 	and.w	r2, r2, #3
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	4093      	lsls	r3, r2
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800318e:	492f      	ldr	r1, [pc, #188]	; (800324c <HAL_GPIO_Init+0x2bc>)
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	492c      	ldr	r1, [pc, #176]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
 80031b4:	e006      	b.n	80031c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	43db      	mvns	r3, r3
 80031be:	4928      	ldr	r1, [pc, #160]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4922      	ldr	r1, [pc, #136]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60cb      	str	r3, [r1, #12]
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	491e      	ldr	r1, [pc, #120]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4918      	ldr	r1, [pc, #96]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	e006      	b.n	8003214 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	43db      	mvns	r3, r3
 800320e:	4914      	ldr	r1, [pc, #80]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003210:	4013      	ands	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d021      	beq.n	8003264 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
 800322c:	e021      	b.n	8003272 <HAL_GPIO_Init+0x2e2>
 800322e:	bf00      	nop
 8003230:	10320000 	.word	0x10320000
 8003234:	10310000 	.word	0x10310000
 8003238:	10220000 	.word	0x10220000
 800323c:	10210000 	.word	0x10210000
 8003240:	10120000 	.word	0x10120000
 8003244:	10110000 	.word	0x10110000
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	40010800 	.word	0x40010800
 8003254:	40010c00 	.word	0x40010c00
 8003258:	40011000 	.word	0x40011000
 800325c:	40011400 	.word	0x40011400
 8003260:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_GPIO_Init+0x304>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	43db      	mvns	r3, r3
 800326c:	4909      	ldr	r1, [pc, #36]	; (8003294 <HAL_GPIO_Init+0x304>)
 800326e:	4013      	ands	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	3301      	adds	r3, #1
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	f47f ae8e 	bne.w	8002fa4 <HAL_GPIO_Init+0x14>
  }
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	372c      	adds	r7, #44	; 0x2c
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40010400 	.word	0x40010400

08003298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
 80032a4:	4613      	mov	r3, r2
 80032a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032b4:	e003      	b.n	80032be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	041a      	lsls	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e272      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d00c      	beq.n	800330e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f4:	4b8f      	ldr	r3, [pc, #572]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d112      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
 8003300:	4b8c      	ldr	r3, [pc, #560]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d10b      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330e:	4b89      	ldr	r3, [pc, #548]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d06c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x12c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e24c      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x76>
 8003330:	4b80      	ldr	r3, [pc, #512]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a7f      	ldr	r2, [pc, #508]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e02e      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x98>
 8003346:	4b7b      	ldr	r3, [pc, #492]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7a      	ldr	r2, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b78      	ldr	r3, [pc, #480]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a77      	ldr	r2, [pc, #476]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0xbc>
 800336a:	4b72      	ldr	r3, [pc, #456]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a71      	ldr	r2, [pc, #452]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003384:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6a      	ldr	r2, [pc, #424]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a67      	ldr	r2, [pc, #412]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7ff f860 	bl	8002468 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7ff f85c 	bl	8002468 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e200      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xe4>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7ff f84c 	bl	8002468 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7ff f848 	bl	8002468 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1ec      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x10c>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003402:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800340e:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
 800341a:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1c0      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4939      	ldr	r1, [pc, #228]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e03a      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7ff f801 	bl	8002468 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fe fffd 	bl	8002468 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1a1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4927      	ldr	r1, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe ffe0 	bl	8002468 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe ffdc 	bl	8002468 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e180      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03a      	beq.n	800354c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe ffc0 	bl	8002468 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fe ffbc 	bl	8002468 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e160      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800350a:	2001      	movs	r0, #1
 800350c:	f000 faba 	bl	8003a84 <RCC_Delay>
 8003510:	e01c      	b.n	800354c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fe ffa6 	bl	8002468 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351e:	e00f      	b.n	8003540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7fe ffa2 	bl	8002468 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d908      	bls.n	8003540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e146      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	42420000 	.word	0x42420000
 800353c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e9      	bne.n	8003520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a6 	beq.w	80036a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b8b      	ldr	r3, [pc, #556]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a87      	ldr	r2, [pc, #540]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]
 8003576:	4b85      	ldr	r3, [pc, #532]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003592:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7e      	ldr	r2, [pc, #504]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7fe ff63 	bl	8002468 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fe ff5f 	bl	8002468 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	; 0x64
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e103      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	4b75      	ldr	r3, [pc, #468]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x312>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e02d      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x334>
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a69      	ldr	r2, [pc, #420]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	4b67      	ldr	r3, [pc, #412]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a66      	ldr	r2, [pc, #408]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6213      	str	r3, [r2, #32]
 80035fa:	e01c      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d10c      	bne.n	800361e <HAL_RCC_OscConfig+0x356>
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6213      	str	r3, [r2, #32]
 8003610:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a5d      	ldr	r2, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6213      	str	r3, [r2, #32]
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 800361e:	4b5b      	ldr	r3, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a5a      	ldr	r2, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6213      	str	r3, [r2, #32]
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fe ff13 	bl	8002468 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe ff0f 	bl	8002468 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0b1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCC_OscConfig+0x37e>
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fe fefd 	bl	8002468 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fef9 	bl	8002468 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e09b      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b3c      	ldr	r3, [pc, #240]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a3b      	ldr	r2, [pc, #236]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8087 	beq.w	80037be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d061      	beq.n	8003780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d146      	bne.n	8003752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe fecd 	bl	8002468 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe fec9 	bl	8002468 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e06d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4921      	ldr	r1, [pc, #132]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a19      	ldr	r1, [r3, #32]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	430b      	orrs	r3, r1
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe fe9d 	bl	8002468 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fe99 	bl	8002468 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e03d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x46a>
 8003750:	e035      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fe86 	bl	8002468 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe fe82 	bl	8002468 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e026      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x498>
 800377e:	e01e      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e019      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
 8003794:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x500>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0d0      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d910      	bls.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 0207 	bic.w	r2, r3, #7
 80037f6:	4965      	ldr	r1, [pc, #404]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003832:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800384a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d040      	beq.n	80038ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d115      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e073      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4936      	ldr	r1, [pc, #216]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fe fdd4 	bl	8002468 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7fe fdd0 	bl	8002468 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e053      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d210      	bcs.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4922      	ldr	r1, [pc, #136]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1cc>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1d0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fd32 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
 8003994:	08007858 	.word	0x08007858
 8003998:	20000014 	.word	0x20000014
 800399c:	20000018 	.word	0x20000018

080039a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d002      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ce:	e027      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d2:	613b      	str	r3, [r7, #16]
      break;
 80039d4:	e027      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0c9b      	lsrs	r3, r3, #18
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e0:	5cd3      	ldrb	r3, [r2, r3]
 80039e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	0c5b      	lsrs	r3, r3, #17
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e004      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	613b      	str	r3, [r7, #16]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	693b      	ldr	r3, [r7, #16]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	08007870 	.word	0x08007870
 8003a40:	08007880 	.word	0x08007880
 8003a44:	003d0900 	.word	0x003d0900

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000014 	.word	0x20000014

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a60:	f7ff fff2 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0adb      	lsrs	r3, r3, #11
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	08007868 	.word	0x08007868

08003a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <RCC_Delay+0x34>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <RCC_Delay+0x38>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a5b      	lsrs	r3, r3, #9
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aa0:	bf00      	nop
  }
  while (Delay --);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	60fa      	str	r2, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f9      	bne.n	8003aa0 <RCC_Delay+0x1c>
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000014 	.word	0x20000014
 8003abc:	10624dd3 	.word	0x10624dd3

08003ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d07d      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
 8003af8:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d118      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b14:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a42      	ldr	r2, [pc, #264]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b20:	f7fe fca2 	bl	8002468 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	e008      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fe fc9e 	bl	8002468 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e06d      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d02e      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d027      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b64:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b7a:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d014      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fc6d 	bl	8002468 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fe fc69 	bl	8002468 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e036      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ee      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4917      	ldr	r1, [pc, #92]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	490b      	ldr	r1, [pc, #44]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
 8003c28:	42420440 	.word	0x42420440

08003c2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	f200 808a 	bhi.w	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d045      	beq.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d075      	beq.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c62:	e082      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c6a:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d07b      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	0c9b      	lsrs	r3, r3, #18
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	4a41      	ldr	r2, [pc, #260]	; (8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003c80:	5cd3      	ldrb	r3, [r2, r3]
 8003c82:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d015      	beq.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c8e:	4b3c      	ldr	r3, [pc, #240]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	0c5b      	lsrs	r3, r3, #17
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	4a3b      	ldr	r2, [pc, #236]	; (8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ca8:	4a38      	ldr	r2, [pc, #224]	; (8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	e004      	b.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd0:	d102      	bne.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	61bb      	str	r3, [r7, #24]
      break;
 8003cd6:	e04a      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4a2d      	ldr	r2, [pc, #180]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
      break;
 8003ce6:	e042      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	e01f      	b.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d16:	d109      	bne.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d24:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d36:	d11c      	bne.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d016      	beq.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d44:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d48:	61bb      	str	r3, [r7, #24]
      break;
 8003d4a:	e012      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d4c:	e011      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d4e:	f7ff fe85 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	0b9b      	lsrs	r3, r3, #14
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	61bb      	str	r3, [r7, #24]
      break;
 8003d68:	e004      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d72:	bf00      	nop
    }
  }
  return (frequency);
 8003d74:	69bb      	ldr	r3, [r7, #24]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08007884 	.word	0x08007884
 8003d88:	08007894 	.word	0x08007894
 8003d8c:	007a1200 	.word	0x007a1200
 8003d90:	003d0900 	.word	0x003d0900
 8003d94:	aaaaaaab 	.word	0xaaaaaaab

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e041      	b.n	8003e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe f914 	bl	8001fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 fd76 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d001      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e03a      	b.n	8003ec6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_TIM_Base_Start_IT+0x98>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00e      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x58>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d009      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x58>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x58>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d111      	bne.n	8003eb4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d010      	beq.n	8003ec4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	e007      	b.n	8003ec4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800

08003edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e041      	b.n	8003f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f839 	bl	8003f7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fcd4 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIM_PWM_Start+0x24>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e022      	b.n	8003ff6 <HAL_TIM_PWM_Start+0x6a>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d109      	bne.n	8003fca <HAL_TIM_PWM_Start+0x3e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e015      	b.n	8003ff6 <HAL_TIM_PWM_Start+0x6a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d109      	bne.n	8003fe4 <HAL_TIM_PWM_Start+0x58>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e008      	b.n	8003ff6 <HAL_TIM_PWM_Start+0x6a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e05e      	b.n	80040bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0x82>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800400c:	e013      	b.n	8004036 <HAL_TIM_PWM_Start+0xaa>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0x92>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800401c:	e00b      	b.n	8004036 <HAL_TIM_PWM_Start+0xaa>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0xa2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402c:	e003      	b.n	8004036 <HAL_TIM_PWM_Start+0xaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fec2 	bl	8004dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <HAL_TIM_PWM_Start+0x138>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d107      	bne.n	800405e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_TIM_PWM_Start+0x138>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_TIM_PWM_Start+0xfa>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d009      	beq.n	8004086 <HAL_TIM_PWM_Start+0xfa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <HAL_TIM_PWM_Start+0x13c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_TIM_PWM_Start+0xfa>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <HAL_TIM_PWM_Start+0x140>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b06      	cmp	r3, #6
 8004096:	d010      	beq.n	80040ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	e007      	b.n	80040ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800

080040d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e093      	b.n	800420c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fd ff9b 	bl	8002034 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004114:	f023 0307 	bic.w	r3, r3, #7
 8004118:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 fbcf 	bl	80048c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	4313      	orrs	r3, r2
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004170:	f023 030c 	bic.w	r3, r3, #12
 8004174:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4313      	orrs	r3, r2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	011a      	lsls	r2, r3, #4
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	031b      	lsls	r3, r3, #12
 80041a0:	4313      	orrs	r3, r2
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	4313      	orrs	r3, r2
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004224:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800422c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004234:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800423c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d110      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800424a:	7b7b      	ldrb	r3, [r7, #13]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e089      	b.n	8004368 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	e031      	b.n	80042ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d110      	bne.n	800428e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d102      	bne.n	8004278 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004272:	7b3b      	ldrb	r3, [r7, #12]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e075      	b.n	8004368 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800428c:	e01d      	b.n	80042ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d108      	bne.n	80042a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800429a:	7b7b      	ldrb	r3, [r7, #13]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d102      	bne.n	80042a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042a0:	7b3b      	ldrb	r3, [r7, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e05e      	b.n	8004368 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d010      	beq.n	80042f8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80042d6:	e01f      	b.n	8004318 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2201      	movs	r2, #1
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd71 	bl	8004dc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0202 	orr.w	r2, r2, #2
 80042f4:	60da      	str	r2, [r3, #12]
      break;
 80042f6:	e02e      	b.n	8004356 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2201      	movs	r2, #1
 80042fe:	2104      	movs	r1, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fd61 	bl	8004dc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0204 	orr.w	r2, r2, #4
 8004314:	60da      	str	r2, [r3, #12]
      break;
 8004316:	e01e      	b.n	8004356 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fd51 	bl	8004dc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2201      	movs	r2, #1
 800432c:	2104      	movs	r1, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fd4a 	bl	8004dc8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0202 	orr.w	r2, r2, #2
 8004342:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0204 	orr.w	r2, r2, #4
 8004352:	60da      	str	r2, [r3, #12]
      break;
 8004354:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd f85c 	bl	8001470 <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa69 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa6f 	bl	80048a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd f832 	bl	8001470 <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa3f 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa45 	bl	80048a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd f808 	bl	8001470 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa15 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa1b 	bl	80048a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc ffde 	bl	8001470 <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9eb 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f9f1 	bl	80048a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd fbda 	bl	8001ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fcdf 	bl	8004ede <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9b5 	bl	80048b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fcaa 	bl	8004ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800459a:	2302      	movs	r3, #2
 800459c:	e0ae      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	f200 809f 	bhi.w	80046ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	080046ed 	.word	0x080046ed
 80045bc:	080046ed 	.word	0x080046ed
 80045c0:	080046ed 	.word	0x080046ed
 80045c4:	08004629 	.word	0x08004629
 80045c8:	080046ed 	.word	0x080046ed
 80045cc:	080046ed 	.word	0x080046ed
 80045d0:	080046ed 	.word	0x080046ed
 80045d4:	0800466b 	.word	0x0800466b
 80045d8:	080046ed 	.word	0x080046ed
 80045dc:	080046ed 	.word	0x080046ed
 80045e0:	080046ed 	.word	0x080046ed
 80045e4:	080046ab 	.word	0x080046ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f9cc 	bl	800498c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0208 	orr.w	r2, r2, #8
 8004602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0204 	bic.w	r2, r2, #4
 8004612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6999      	ldr	r1, [r3, #24]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	619a      	str	r2, [r3, #24]
      break;
 8004626:	e064      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa12 	bl	8004a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6999      	ldr	r1, [r3, #24]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	021a      	lsls	r2, r3, #8
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	619a      	str	r2, [r3, #24]
      break;
 8004668:	e043      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fa5b 	bl	8004b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0208 	orr.w	r2, r2, #8
 8004684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0204 	bic.w	r2, r2, #4
 8004694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69d9      	ldr	r1, [r3, #28]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	61da      	str	r2, [r3, #28]
      break;
 80046a8:	e023      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 faa5 	bl	8004c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	021a      	lsls	r2, r3, #8
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	61da      	str	r2, [r3, #28]
      break;
 80046ea:	e002      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIM_ConfigClockSource+0x1c>
 800471c:	2302      	movs	r3, #2
 800471e:	e0b4      	b.n	800488a <HAL_TIM_ConfigClockSource+0x186>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800473e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004758:	d03e      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0xd4>
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	f200 8087 	bhi.w	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	f000 8086 	beq.w	8004876 <HAL_TIM_ConfigClockSource+0x172>
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d87f      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d01a      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0xa6>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d87b      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d050      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x11a>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d877      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d03c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0xfa>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d873      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d058      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x13a>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d86f      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d064      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d86b      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d060      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d867      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d05c      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d05a      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	e062      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ba:	f000 fae6 	bl	8004d8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	609a      	str	r2, [r3, #8]
      break;
 80047d6:	e04f      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	f000 facf 	bl	8004d8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fa:	609a      	str	r2, [r3, #8]
      break;
 80047fc:	e03c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	461a      	mov	r2, r3
 800480c:	f000 fa46 	bl	8004c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2150      	movs	r1, #80	; 0x50
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fa9d 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 800481c:	e02c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800482a:	461a      	mov	r2, r3
 800482c:	f000 fa64 	bl	8004cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2160      	movs	r1, #96	; 0x60
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa8d 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 800483c:	e01c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	461a      	mov	r2, r3
 800484c:	f000 fa26 	bl	8004c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fa7d 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 800485c:	e00c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 fa74 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 800486e:	e003      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      break;
 8004874:	e000      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a29      	ldr	r2, [pc, #164]	; (8004980 <TIM_Base_SetConfig+0xb8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0x30>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0x30>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a26      	ldr	r2, [pc, #152]	; (8004984 <TIM_Base_SetConfig+0xbc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0x30>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a25      	ldr	r2, [pc, #148]	; (8004988 <TIM_Base_SetConfig+0xc0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1c      	ldr	r2, [pc, #112]	; (8004980 <TIM_Base_SetConfig+0xb8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_Base_SetConfig+0x62>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d007      	beq.n	800492a <TIM_Base_SetConfig+0x62>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <TIM_Base_SetConfig+0xbc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_Base_SetConfig+0x62>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a18      	ldr	r2, [pc, #96]	; (8004988 <TIM_Base_SetConfig+0xc0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d108      	bne.n	800493c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a07      	ldr	r2, [pc, #28]	; (8004980 <TIM_Base_SetConfig+0xb8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d103      	bne.n	8004970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	615a      	str	r2, [r3, #20]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr
 8004980:	40012c00 	.word	0x40012c00
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800

0800498c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f023 0201 	bic.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <TIM_OC1_SetConfig+0xc8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10c      	bne.n	8004a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0308 	bic.w	r3, r3, #8
 80049ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <TIM_OC1_SetConfig+0xc8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00

08004a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 0210 	bic.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0320 	bic.w	r3, r3, #32
 8004aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <TIM_OC2_SetConfig+0xd0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10d      	bne.n	8004ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <TIM_OC2_SetConfig+0xd0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d113      	bne.n	8004b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00

08004b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <TIM_OC3_SetConfig+0xd0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d10d      	bne.n	8004ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <TIM_OC3_SetConfig+0xd0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d113      	bne.n	8004bd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40012c00 	.word	0x40012c00

08004c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	031b      	lsls	r3, r3, #12
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <TIM_OC4_SetConfig+0x98>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d109      	bne.n	8004c74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00

08004c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 030a 	bic.w	r3, r3, #10
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0210 	bic.w	r2, r3, #16
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	031b      	lsls	r3, r3, #12
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b087      	sub	sp, #28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	021a      	lsls	r2, r3, #8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	609a      	str	r2, [r3, #8]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	2201      	movs	r2, #1
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a1a      	ldr	r2, [r3, #32]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	401a      	ands	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004e00:	431a      	orrs	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e046      	b.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d009      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10c      	bne.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800

08004ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <__cvt>:
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef6:	461f      	mov	r7, r3
 8004ef8:	bfbb      	ittet	lt
 8004efa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	461f      	movlt	r7, r3
 8004f00:	2300      	movge	r3, #0
 8004f02:	232d      	movlt	r3, #45	; 0x2d
 8004f04:	b088      	sub	sp, #32
 8004f06:	4614      	mov	r4, r2
 8004f08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f0c:	7013      	strb	r3, [r2, #0]
 8004f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f10:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004f14:	f023 0820 	bic.w	r8, r3, #32
 8004f18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f1c:	d005      	beq.n	8004f2a <__cvt+0x3a>
 8004f1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f22:	d100      	bne.n	8004f26 <__cvt+0x36>
 8004f24:	3501      	adds	r5, #1
 8004f26:	2302      	movs	r3, #2
 8004f28:	e000      	b.n	8004f2c <__cvt+0x3c>
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	aa07      	add	r2, sp, #28
 8004f2e:	9204      	str	r2, [sp, #16]
 8004f30:	aa06      	add	r2, sp, #24
 8004f32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f36:	e9cd 3500 	strd	r3, r5, [sp]
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	f000 fe53 	bl	8005be8 <_dtoa_r>
 8004f42:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f46:	4606      	mov	r6, r0
 8004f48:	d102      	bne.n	8004f50 <__cvt+0x60>
 8004f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f4c:	07db      	lsls	r3, r3, #31
 8004f4e:	d522      	bpl.n	8004f96 <__cvt+0xa6>
 8004f50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f54:	eb06 0905 	add.w	r9, r6, r5
 8004f58:	d110      	bne.n	8004f7c <__cvt+0x8c>
 8004f5a:	7833      	ldrb	r3, [r6, #0]
 8004f5c:	2b30      	cmp	r3, #48	; 0x30
 8004f5e:	d10a      	bne.n	8004f76 <__cvt+0x86>
 8004f60:	2200      	movs	r2, #0
 8004f62:	2300      	movs	r3, #0
 8004f64:	4620      	mov	r0, r4
 8004f66:	4639      	mov	r1, r7
 8004f68:	f7fb fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8004f6c:	b918      	cbnz	r0, 8004f76 <__cvt+0x86>
 8004f6e:	f1c5 0501 	rsb	r5, r5, #1
 8004f72:	f8ca 5000 	str.w	r5, [sl]
 8004f76:	f8da 3000 	ldr.w	r3, [sl]
 8004f7a:	4499      	add	r9, r3
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2300      	movs	r3, #0
 8004f80:	4620      	mov	r0, r4
 8004f82:	4639      	mov	r1, r7
 8004f84:	f7fb fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8004f88:	b108      	cbz	r0, 8004f8e <__cvt+0x9e>
 8004f8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004f8e:	2230      	movs	r2, #48	; 0x30
 8004f90:	9b07      	ldr	r3, [sp, #28]
 8004f92:	454b      	cmp	r3, r9
 8004f94:	d307      	bcc.n	8004fa6 <__cvt+0xb6>
 8004f96:	4630      	mov	r0, r6
 8004f98:	9b07      	ldr	r3, [sp, #28]
 8004f9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f9c:	1b9b      	subs	r3, r3, r6
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	b008      	add	sp, #32
 8004fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa6:	1c59      	adds	r1, r3, #1
 8004fa8:	9107      	str	r1, [sp, #28]
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e7f0      	b.n	8004f90 <__cvt+0xa0>

08004fae <__exponent>:
 8004fae:	4603      	mov	r3, r0
 8004fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fb2:	2900      	cmp	r1, #0
 8004fb4:	f803 2b02 	strb.w	r2, [r3], #2
 8004fb8:	bfb6      	itet	lt
 8004fba:	222d      	movlt	r2, #45	; 0x2d
 8004fbc:	222b      	movge	r2, #43	; 0x2b
 8004fbe:	4249      	neglt	r1, r1
 8004fc0:	2909      	cmp	r1, #9
 8004fc2:	7042      	strb	r2, [r0, #1]
 8004fc4:	dd2a      	ble.n	800501c <__exponent+0x6e>
 8004fc6:	f10d 0207 	add.w	r2, sp, #7
 8004fca:	4617      	mov	r7, r2
 8004fcc:	260a      	movs	r6, #10
 8004fce:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fd2:	4694      	mov	ip, r2
 8004fd4:	fb06 1415 	mls	r4, r6, r5, r1
 8004fd8:	3430      	adds	r4, #48	; 0x30
 8004fda:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004fde:	460c      	mov	r4, r1
 8004fe0:	2c63      	cmp	r4, #99	; 0x63
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f102 32ff 	add.w	r2, r2, #4294967295
 8004fe8:	dcf1      	bgt.n	8004fce <__exponent+0x20>
 8004fea:	3130      	adds	r1, #48	; 0x30
 8004fec:	f1ac 0402 	sub.w	r4, ip, #2
 8004ff0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	1c41      	adds	r1, r0, #1
 8004ff8:	42ba      	cmp	r2, r7
 8004ffa:	d30a      	bcc.n	8005012 <__exponent+0x64>
 8004ffc:	f10d 0209 	add.w	r2, sp, #9
 8005000:	eba2 020c 	sub.w	r2, r2, ip
 8005004:	42bc      	cmp	r4, r7
 8005006:	bf88      	it	hi
 8005008:	2200      	movhi	r2, #0
 800500a:	4413      	add	r3, r2
 800500c:	1a18      	subs	r0, r3, r0
 800500e:	b003      	add	sp, #12
 8005010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005012:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005016:	f801 5f01 	strb.w	r5, [r1, #1]!
 800501a:	e7ed      	b.n	8004ff8 <__exponent+0x4a>
 800501c:	2330      	movs	r3, #48	; 0x30
 800501e:	3130      	adds	r1, #48	; 0x30
 8005020:	7083      	strb	r3, [r0, #2]
 8005022:	70c1      	strb	r1, [r0, #3]
 8005024:	1d03      	adds	r3, r0, #4
 8005026:	e7f1      	b.n	800500c <__exponent+0x5e>

08005028 <_printf_float>:
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	b091      	sub	sp, #68	; 0x44
 800502e:	460c      	mov	r4, r1
 8005030:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005034:	4616      	mov	r6, r2
 8005036:	461f      	mov	r7, r3
 8005038:	4605      	mov	r5, r0
 800503a:	f000 fcc5 	bl	80059c8 <_localeconv_r>
 800503e:	6803      	ldr	r3, [r0, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	9309      	str	r3, [sp, #36]	; 0x24
 8005044:	f7fb f884 	bl	8000150 <strlen>
 8005048:	2300      	movs	r3, #0
 800504a:	930e      	str	r3, [sp, #56]	; 0x38
 800504c:	f8d8 3000 	ldr.w	r3, [r8]
 8005050:	900a      	str	r0, [sp, #40]	; 0x28
 8005052:	3307      	adds	r3, #7
 8005054:	f023 0307 	bic.w	r3, r3, #7
 8005058:	f103 0208 	add.w	r2, r3, #8
 800505c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005060:	f8d4 b000 	ldr.w	fp, [r4]
 8005064:	f8c8 2000 	str.w	r2, [r8]
 8005068:	e9d3 a800 	ldrd	sl, r8, [r3]
 800506c:	4652      	mov	r2, sl
 800506e:	4643      	mov	r3, r8
 8005070:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005074:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005078:	930b      	str	r3, [sp, #44]	; 0x2c
 800507a:	f04f 32ff 	mov.w	r2, #4294967295
 800507e:	4650      	mov	r0, sl
 8005080:	4b9c      	ldr	r3, [pc, #624]	; (80052f4 <_printf_float+0x2cc>)
 8005082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005084:	f7fb fcc2 	bl	8000a0c <__aeabi_dcmpun>
 8005088:	bb70      	cbnz	r0, 80050e8 <_printf_float+0xc0>
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	4650      	mov	r0, sl
 8005090:	4b98      	ldr	r3, [pc, #608]	; (80052f4 <_printf_float+0x2cc>)
 8005092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005094:	f7fb fc9c 	bl	80009d0 <__aeabi_dcmple>
 8005098:	bb30      	cbnz	r0, 80050e8 <_printf_float+0xc0>
 800509a:	2200      	movs	r2, #0
 800509c:	2300      	movs	r3, #0
 800509e:	4650      	mov	r0, sl
 80050a0:	4641      	mov	r1, r8
 80050a2:	f7fb fc8b 	bl	80009bc <__aeabi_dcmplt>
 80050a6:	b110      	cbz	r0, 80050ae <_printf_float+0x86>
 80050a8:	232d      	movs	r3, #45	; 0x2d
 80050aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ae:	4a92      	ldr	r2, [pc, #584]	; (80052f8 <_printf_float+0x2d0>)
 80050b0:	4b92      	ldr	r3, [pc, #584]	; (80052fc <_printf_float+0x2d4>)
 80050b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80050b6:	bf94      	ite	ls
 80050b8:	4690      	movls	r8, r2
 80050ba:	4698      	movhi	r8, r3
 80050bc:	2303      	movs	r3, #3
 80050be:	f04f 0a00 	mov.w	sl, #0
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	f02b 0304 	bic.w	r3, fp, #4
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	4633      	mov	r3, r6
 80050cc:	4621      	mov	r1, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	9700      	str	r7, [sp, #0]
 80050d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80050d4:	f000 f9d6 	bl	8005484 <_printf_common>
 80050d8:	3001      	adds	r0, #1
 80050da:	f040 8090 	bne.w	80051fe <_printf_float+0x1d6>
 80050de:	f04f 30ff 	mov.w	r0, #4294967295
 80050e2:	b011      	add	sp, #68	; 0x44
 80050e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e8:	4652      	mov	r2, sl
 80050ea:	4643      	mov	r3, r8
 80050ec:	4650      	mov	r0, sl
 80050ee:	4641      	mov	r1, r8
 80050f0:	f7fb fc8c 	bl	8000a0c <__aeabi_dcmpun>
 80050f4:	b148      	cbz	r0, 800510a <_printf_float+0xe2>
 80050f6:	f1b8 0f00 	cmp.w	r8, #0
 80050fa:	bfb8      	it	lt
 80050fc:	232d      	movlt	r3, #45	; 0x2d
 80050fe:	4a80      	ldr	r2, [pc, #512]	; (8005300 <_printf_float+0x2d8>)
 8005100:	bfb8      	it	lt
 8005102:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005106:	4b7f      	ldr	r3, [pc, #508]	; (8005304 <_printf_float+0x2dc>)
 8005108:	e7d3      	b.n	80050b2 <_printf_float+0x8a>
 800510a:	6863      	ldr	r3, [r4, #4]
 800510c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	d142      	bne.n	800519a <_printf_float+0x172>
 8005114:	2306      	movs	r3, #6
 8005116:	6063      	str	r3, [r4, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	9206      	str	r2, [sp, #24]
 800511c:	aa0e      	add	r2, sp, #56	; 0x38
 800511e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005122:	aa0d      	add	r2, sp, #52	; 0x34
 8005124:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005128:	9203      	str	r2, [sp, #12]
 800512a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800512e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	4652      	mov	r2, sl
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	4628      	mov	r0, r5
 800513c:	4643      	mov	r3, r8
 800513e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005140:	f7ff fed6 	bl	8004ef0 <__cvt>
 8005144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005146:	4680      	mov	r8, r0
 8005148:	2947      	cmp	r1, #71	; 0x47
 800514a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800514c:	d108      	bne.n	8005160 <_printf_float+0x138>
 800514e:	1cc8      	adds	r0, r1, #3
 8005150:	db02      	blt.n	8005158 <_printf_float+0x130>
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	4299      	cmp	r1, r3
 8005156:	dd40      	ble.n	80051da <_printf_float+0x1b2>
 8005158:	f1a9 0902 	sub.w	r9, r9, #2
 800515c:	fa5f f989 	uxtb.w	r9, r9
 8005160:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005164:	d81f      	bhi.n	80051a6 <_printf_float+0x17e>
 8005166:	464a      	mov	r2, r9
 8005168:	3901      	subs	r1, #1
 800516a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800516e:	910d      	str	r1, [sp, #52]	; 0x34
 8005170:	f7ff ff1d 	bl	8004fae <__exponent>
 8005174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005176:	4682      	mov	sl, r0
 8005178:	1813      	adds	r3, r2, r0
 800517a:	2a01      	cmp	r2, #1
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	dc02      	bgt.n	8005186 <_printf_float+0x15e>
 8005180:	6822      	ldr	r2, [r4, #0]
 8005182:	07d2      	lsls	r2, r2, #31
 8005184:	d501      	bpl.n	800518a <_printf_float+0x162>
 8005186:	3301      	adds	r3, #1
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800518e:	2b00      	cmp	r3, #0
 8005190:	d09b      	beq.n	80050ca <_printf_float+0xa2>
 8005192:	232d      	movs	r3, #45	; 0x2d
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005198:	e797      	b.n	80050ca <_printf_float+0xa2>
 800519a:	2947      	cmp	r1, #71	; 0x47
 800519c:	d1bc      	bne.n	8005118 <_printf_float+0xf0>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ba      	bne.n	8005118 <_printf_float+0xf0>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7b7      	b.n	8005116 <_printf_float+0xee>
 80051a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80051aa:	d118      	bne.n	80051de <_printf_float+0x1b6>
 80051ac:	2900      	cmp	r1, #0
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	dd0b      	ble.n	80051ca <_printf_float+0x1a2>
 80051b2:	6121      	str	r1, [r4, #16]
 80051b4:	b913      	cbnz	r3, 80051bc <_printf_float+0x194>
 80051b6:	6822      	ldr	r2, [r4, #0]
 80051b8:	07d0      	lsls	r0, r2, #31
 80051ba:	d502      	bpl.n	80051c2 <_printf_float+0x19a>
 80051bc:	3301      	adds	r3, #1
 80051be:	440b      	add	r3, r1
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	f04f 0a00 	mov.w	sl, #0
 80051c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80051c8:	e7df      	b.n	800518a <_printf_float+0x162>
 80051ca:	b913      	cbnz	r3, 80051d2 <_printf_float+0x1aa>
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	07d2      	lsls	r2, r2, #31
 80051d0:	d501      	bpl.n	80051d6 <_printf_float+0x1ae>
 80051d2:	3302      	adds	r3, #2
 80051d4:	e7f4      	b.n	80051c0 <_printf_float+0x198>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7f2      	b.n	80051c0 <_printf_float+0x198>
 80051da:	f04f 0967 	mov.w	r9, #103	; 0x67
 80051de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051e0:	4299      	cmp	r1, r3
 80051e2:	db05      	blt.n	80051f0 <_printf_float+0x1c8>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	6121      	str	r1, [r4, #16]
 80051e8:	07d8      	lsls	r0, r3, #31
 80051ea:	d5ea      	bpl.n	80051c2 <_printf_float+0x19a>
 80051ec:	1c4b      	adds	r3, r1, #1
 80051ee:	e7e7      	b.n	80051c0 <_printf_float+0x198>
 80051f0:	2900      	cmp	r1, #0
 80051f2:	bfcc      	ite	gt
 80051f4:	2201      	movgt	r2, #1
 80051f6:	f1c1 0202 	rsble	r2, r1, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	e7e0      	b.n	80051c0 <_printf_float+0x198>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	055a      	lsls	r2, r3, #21
 8005202:	d407      	bmi.n	8005214 <_printf_float+0x1ec>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	4642      	mov	r2, r8
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	d12b      	bne.n	800526a <_printf_float+0x242>
 8005212:	e764      	b.n	80050de <_printf_float+0xb6>
 8005214:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005218:	f240 80dd 	bls.w	80053d6 <_printf_float+0x3ae>
 800521c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005220:	2200      	movs	r2, #0
 8005222:	2300      	movs	r3, #0
 8005224:	f7fb fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 8005228:	2800      	cmp	r0, #0
 800522a:	d033      	beq.n	8005294 <_printf_float+0x26c>
 800522c:	2301      	movs	r3, #1
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	4a35      	ldr	r2, [pc, #212]	; (8005308 <_printf_float+0x2e0>)
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f af51 	beq.w	80050de <_printf_float+0xb6>
 800523c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005240:	429a      	cmp	r2, r3
 8005242:	db02      	blt.n	800524a <_printf_float+0x222>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	07d8      	lsls	r0, r3, #31
 8005248:	d50f      	bpl.n	800526a <_printf_float+0x242>
 800524a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800524e:	4631      	mov	r1, r6
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	f43f af42 	beq.w	80050de <_printf_float+0xb6>
 800525a:	f04f 0800 	mov.w	r8, #0
 800525e:	f104 091a 	add.w	r9, r4, #26
 8005262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005264:	3b01      	subs	r3, #1
 8005266:	4543      	cmp	r3, r8
 8005268:	dc09      	bgt.n	800527e <_printf_float+0x256>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	079b      	lsls	r3, r3, #30
 800526e:	f100 8104 	bmi.w	800547a <_printf_float+0x452>
 8005272:	68e0      	ldr	r0, [r4, #12]
 8005274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005276:	4298      	cmp	r0, r3
 8005278:	bfb8      	it	lt
 800527a:	4618      	movlt	r0, r3
 800527c:	e731      	b.n	80050e2 <_printf_float+0xba>
 800527e:	2301      	movs	r3, #1
 8005280:	464a      	mov	r2, r9
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f af28 	beq.w	80050de <_printf_float+0xb6>
 800528e:	f108 0801 	add.w	r8, r8, #1
 8005292:	e7e6      	b.n	8005262 <_printf_float+0x23a>
 8005294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	dc38      	bgt.n	800530c <_printf_float+0x2e4>
 800529a:	2301      	movs	r3, #1
 800529c:	4631      	mov	r1, r6
 800529e:	4628      	mov	r0, r5
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <_printf_float+0x2e0>)
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f af1a 	beq.w	80050de <_printf_float+0xb6>
 80052aa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d102      	bne.n	80052b8 <_printf_float+0x290>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	07d9      	lsls	r1, r3, #31
 80052b6:	d5d8      	bpl.n	800526a <_printf_float+0x242>
 80052b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f af0b 	beq.w	80050de <_printf_float+0xb6>
 80052c8:	f04f 0900 	mov.w	r9, #0
 80052cc:	f104 0a1a 	add.w	sl, r4, #26
 80052d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052d2:	425b      	negs	r3, r3
 80052d4:	454b      	cmp	r3, r9
 80052d6:	dc01      	bgt.n	80052dc <_printf_float+0x2b4>
 80052d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052da:	e794      	b.n	8005206 <_printf_float+0x1de>
 80052dc:	2301      	movs	r3, #1
 80052de:	4652      	mov	r2, sl
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f aef9 	beq.w	80050de <_printf_float+0xb6>
 80052ec:	f109 0901 	add.w	r9, r9, #1
 80052f0:	e7ee      	b.n	80052d0 <_printf_float+0x2a8>
 80052f2:	bf00      	nop
 80052f4:	7fefffff 	.word	0x7fefffff
 80052f8:	08007896 	.word	0x08007896
 80052fc:	0800789a 	.word	0x0800789a
 8005300:	0800789e 	.word	0x0800789e
 8005304:	080078a2 	.word	0x080078a2
 8005308:	080078a6 	.word	0x080078a6
 800530c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005310:	429a      	cmp	r2, r3
 8005312:	bfa8      	it	ge
 8005314:	461a      	movge	r2, r3
 8005316:	2a00      	cmp	r2, #0
 8005318:	4691      	mov	r9, r2
 800531a:	dc37      	bgt.n	800538c <_printf_float+0x364>
 800531c:	f04f 0b00 	mov.w	fp, #0
 8005320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005324:	f104 021a 	add.w	r2, r4, #26
 8005328:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800532c:	ebaa 0309 	sub.w	r3, sl, r9
 8005330:	455b      	cmp	r3, fp
 8005332:	dc33      	bgt.n	800539c <_printf_float+0x374>
 8005334:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005338:	429a      	cmp	r2, r3
 800533a:	db3b      	blt.n	80053b4 <_printf_float+0x38c>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07da      	lsls	r2, r3, #31
 8005340:	d438      	bmi.n	80053b4 <_printf_float+0x38c>
 8005342:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005346:	eba2 0903 	sub.w	r9, r2, r3
 800534a:	eba2 020a 	sub.w	r2, r2, sl
 800534e:	4591      	cmp	r9, r2
 8005350:	bfa8      	it	ge
 8005352:	4691      	movge	r9, r2
 8005354:	f1b9 0f00 	cmp.w	r9, #0
 8005358:	dc34      	bgt.n	80053c4 <_printf_float+0x39c>
 800535a:	f04f 0800 	mov.w	r8, #0
 800535e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005362:	f104 0a1a 	add.w	sl, r4, #26
 8005366:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	eba3 0309 	sub.w	r3, r3, r9
 8005370:	4543      	cmp	r3, r8
 8005372:	f77f af7a 	ble.w	800526a <_printf_float+0x242>
 8005376:	2301      	movs	r3, #1
 8005378:	4652      	mov	r2, sl
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	47b8      	blx	r7
 8005380:	3001      	adds	r0, #1
 8005382:	f43f aeac 	beq.w	80050de <_printf_float+0xb6>
 8005386:	f108 0801 	add.w	r8, r8, #1
 800538a:	e7ec      	b.n	8005366 <_printf_float+0x33e>
 800538c:	4613      	mov	r3, r2
 800538e:	4631      	mov	r1, r6
 8005390:	4642      	mov	r2, r8
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	d1c0      	bne.n	800531c <_printf_float+0x2f4>
 800539a:	e6a0      	b.n	80050de <_printf_float+0xb6>
 800539c:	2301      	movs	r3, #1
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f ae99 	beq.w	80050de <_printf_float+0xb6>
 80053ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ae:	f10b 0b01 	add.w	fp, fp, #1
 80053b2:	e7b9      	b.n	8005328 <_printf_float+0x300>
 80053b4:	4631      	mov	r1, r6
 80053b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b8      	blx	r7
 80053be:	3001      	adds	r0, #1
 80053c0:	d1bf      	bne.n	8005342 <_printf_float+0x31a>
 80053c2:	e68c      	b.n	80050de <_printf_float+0xb6>
 80053c4:	464b      	mov	r3, r9
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	eb08 020a 	add.w	r2, r8, sl
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	d1c2      	bne.n	800535a <_printf_float+0x332>
 80053d4:	e683      	b.n	80050de <_printf_float+0xb6>
 80053d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053d8:	2a01      	cmp	r2, #1
 80053da:	dc01      	bgt.n	80053e0 <_printf_float+0x3b8>
 80053dc:	07db      	lsls	r3, r3, #31
 80053de:	d539      	bpl.n	8005454 <_printf_float+0x42c>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4642      	mov	r2, r8
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	f43f ae77 	beq.w	80050de <_printf_float+0xb6>
 80053f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f ae6f 	beq.w	80050de <_printf_float+0xb6>
 8005400:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005404:	2200      	movs	r2, #0
 8005406:	2300      	movs	r3, #0
 8005408:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800540c:	f7fb facc 	bl	80009a8 <__aeabi_dcmpeq>
 8005410:	b9d8      	cbnz	r0, 800544a <_printf_float+0x422>
 8005412:	f109 33ff 	add.w	r3, r9, #4294967295
 8005416:	f108 0201 	add.w	r2, r8, #1
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	d10e      	bne.n	8005442 <_printf_float+0x41a>
 8005424:	e65b      	b.n	80050de <_printf_float+0xb6>
 8005426:	2301      	movs	r3, #1
 8005428:	464a      	mov	r2, r9
 800542a:	4631      	mov	r1, r6
 800542c:	4628      	mov	r0, r5
 800542e:	47b8      	blx	r7
 8005430:	3001      	adds	r0, #1
 8005432:	f43f ae54 	beq.w	80050de <_printf_float+0xb6>
 8005436:	f108 0801 	add.w	r8, r8, #1
 800543a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800543c:	3b01      	subs	r3, #1
 800543e:	4543      	cmp	r3, r8
 8005440:	dcf1      	bgt.n	8005426 <_printf_float+0x3fe>
 8005442:	4653      	mov	r3, sl
 8005444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005448:	e6de      	b.n	8005208 <_printf_float+0x1e0>
 800544a:	f04f 0800 	mov.w	r8, #0
 800544e:	f104 091a 	add.w	r9, r4, #26
 8005452:	e7f2      	b.n	800543a <_printf_float+0x412>
 8005454:	2301      	movs	r3, #1
 8005456:	4642      	mov	r2, r8
 8005458:	e7df      	b.n	800541a <_printf_float+0x3f2>
 800545a:	2301      	movs	r3, #1
 800545c:	464a      	mov	r2, r9
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f ae3a 	beq.w	80050de <_printf_float+0xb6>
 800546a:	f108 0801 	add.w	r8, r8, #1
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	4543      	cmp	r3, r8
 8005476:	dcf0      	bgt.n	800545a <_printf_float+0x432>
 8005478:	e6fb      	b.n	8005272 <_printf_float+0x24a>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	f104 0919 	add.w	r9, r4, #25
 8005482:	e7f4      	b.n	800546e <_printf_float+0x446>

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4616      	mov	r6, r2
 800548a:	4699      	mov	r9, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	4607      	mov	r7, r0
 8005492:	4293      	cmp	r3, r2
 8005494:	bfb8      	it	lt
 8005496:	4613      	movlt	r3, r2
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800549e:	460c      	mov	r4, r1
 80054a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054a4:	b10a      	cbz	r2, 80054aa <_printf_common+0x26>
 80054a6:	3301      	adds	r3, #1
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	6833      	ldrmi	r3, [r6, #0]
 80054b2:	3302      	addmi	r3, #2
 80054b4:	6033      	strmi	r3, [r6, #0]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	f015 0506 	ands.w	r5, r5, #6
 80054bc:	d106      	bne.n	80054cc <_printf_common+0x48>
 80054be:	f104 0a19 	add.w	sl, r4, #25
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	6832      	ldr	r2, [r6, #0]
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dc2b      	bgt.n	8005524 <_printf_common+0xa0>
 80054cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054d0:	1e13      	subs	r3, r2, #0
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	bf18      	it	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	0692      	lsls	r2, r2, #26
 80054da:	d430      	bmi.n	800553e <_printf_common+0xba>
 80054dc:	4649      	mov	r1, r9
 80054de:	4638      	mov	r0, r7
 80054e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d023      	beq.n	8005532 <_printf_common+0xae>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	6922      	ldr	r2, [r4, #16]
 80054ee:	f003 0306 	and.w	r3, r3, #6
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf14      	ite	ne
 80054f6:	2500      	movne	r5, #0
 80054f8:	6833      	ldreq	r3, [r6, #0]
 80054fa:	f04f 0600 	mov.w	r6, #0
 80054fe:	bf08      	it	eq
 8005500:	68e5      	ldreq	r5, [r4, #12]
 8005502:	f104 041a 	add.w	r4, r4, #26
 8005506:	bf08      	it	eq
 8005508:	1aed      	subeq	r5, r5, r3
 800550a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800550e:	bf08      	it	eq
 8005510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005514:	4293      	cmp	r3, r2
 8005516:	bfc4      	itt	gt
 8005518:	1a9b      	subgt	r3, r3, r2
 800551a:	18ed      	addgt	r5, r5, r3
 800551c:	42b5      	cmp	r5, r6
 800551e:	d11a      	bne.n	8005556 <_printf_common+0xd2>
 8005520:	2000      	movs	r0, #0
 8005522:	e008      	b.n	8005536 <_printf_common+0xb2>
 8005524:	2301      	movs	r3, #1
 8005526:	4652      	mov	r2, sl
 8005528:	4649      	mov	r1, r9
 800552a:	4638      	mov	r0, r7
 800552c:	47c0      	blx	r8
 800552e:	3001      	adds	r0, #1
 8005530:	d103      	bne.n	800553a <_printf_common+0xb6>
 8005532:	f04f 30ff 	mov.w	r0, #4294967295
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	3501      	adds	r5, #1
 800553c:	e7c1      	b.n	80054c2 <_printf_common+0x3e>
 800553e:	2030      	movs	r0, #48	; 0x30
 8005540:	18e1      	adds	r1, r4, r3
 8005542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800554c:	4422      	add	r2, r4
 800554e:	3302      	adds	r3, #2
 8005550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005554:	e7c2      	b.n	80054dc <_printf_common+0x58>
 8005556:	2301      	movs	r3, #1
 8005558:	4622      	mov	r2, r4
 800555a:	4649      	mov	r1, r9
 800555c:	4638      	mov	r0, r7
 800555e:	47c0      	blx	r8
 8005560:	3001      	adds	r0, #1
 8005562:	d0e6      	beq.n	8005532 <_printf_common+0xae>
 8005564:	3601      	adds	r6, #1
 8005566:	e7d9      	b.n	800551c <_printf_common+0x98>

08005568 <_printf_i>:
 8005568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	7e0f      	ldrb	r7, [r1, #24]
 800556e:	4691      	mov	r9, r2
 8005570:	2f78      	cmp	r7, #120	; 0x78
 8005572:	4680      	mov	r8, r0
 8005574:	460c      	mov	r4, r1
 8005576:	469a      	mov	sl, r3
 8005578:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800557a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800557e:	d807      	bhi.n	8005590 <_printf_i+0x28>
 8005580:	2f62      	cmp	r7, #98	; 0x62
 8005582:	d80a      	bhi.n	800559a <_printf_i+0x32>
 8005584:	2f00      	cmp	r7, #0
 8005586:	f000 80d5 	beq.w	8005734 <_printf_i+0x1cc>
 800558a:	2f58      	cmp	r7, #88	; 0x58
 800558c:	f000 80c1 	beq.w	8005712 <_printf_i+0x1aa>
 8005590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005598:	e03a      	b.n	8005610 <_printf_i+0xa8>
 800559a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800559e:	2b15      	cmp	r3, #21
 80055a0:	d8f6      	bhi.n	8005590 <_printf_i+0x28>
 80055a2:	a101      	add	r1, pc, #4	; (adr r1, 80055a8 <_printf_i+0x40>)
 80055a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a8:	08005601 	.word	0x08005601
 80055ac:	08005615 	.word	0x08005615
 80055b0:	08005591 	.word	0x08005591
 80055b4:	08005591 	.word	0x08005591
 80055b8:	08005591 	.word	0x08005591
 80055bc:	08005591 	.word	0x08005591
 80055c0:	08005615 	.word	0x08005615
 80055c4:	08005591 	.word	0x08005591
 80055c8:	08005591 	.word	0x08005591
 80055cc:	08005591 	.word	0x08005591
 80055d0:	08005591 	.word	0x08005591
 80055d4:	0800571b 	.word	0x0800571b
 80055d8:	08005641 	.word	0x08005641
 80055dc:	080056d5 	.word	0x080056d5
 80055e0:	08005591 	.word	0x08005591
 80055e4:	08005591 	.word	0x08005591
 80055e8:	0800573d 	.word	0x0800573d
 80055ec:	08005591 	.word	0x08005591
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005591 	.word	0x08005591
 80055f8:	08005591 	.word	0x08005591
 80055fc:	080056dd 	.word	0x080056dd
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	1d1a      	adds	r2, r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	602a      	str	r2, [r5, #0]
 8005608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800560c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005610:	2301      	movs	r3, #1
 8005612:	e0a0      	b.n	8005756 <_printf_i+0x1ee>
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	0607      	lsls	r7, r0, #24
 800561a:	f103 0104 	add.w	r1, r3, #4
 800561e:	6029      	str	r1, [r5, #0]
 8005620:	d501      	bpl.n	8005626 <_printf_i+0xbe>
 8005622:	681e      	ldr	r6, [r3, #0]
 8005624:	e003      	b.n	800562e <_printf_i+0xc6>
 8005626:	0646      	lsls	r6, r0, #25
 8005628:	d5fb      	bpl.n	8005622 <_printf_i+0xba>
 800562a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800562e:	2e00      	cmp	r6, #0
 8005630:	da03      	bge.n	800563a <_printf_i+0xd2>
 8005632:	232d      	movs	r3, #45	; 0x2d
 8005634:	4276      	negs	r6, r6
 8005636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563a:	230a      	movs	r3, #10
 800563c:	4859      	ldr	r0, [pc, #356]	; (80057a4 <_printf_i+0x23c>)
 800563e:	e012      	b.n	8005666 <_printf_i+0xfe>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	6029      	str	r1, [r5, #0]
 8005648:	0605      	lsls	r5, r0, #24
 800564a:	d501      	bpl.n	8005650 <_printf_i+0xe8>
 800564c:	681e      	ldr	r6, [r3, #0]
 800564e:	e002      	b.n	8005656 <_printf_i+0xee>
 8005650:	0641      	lsls	r1, r0, #25
 8005652:	d5fb      	bpl.n	800564c <_printf_i+0xe4>
 8005654:	881e      	ldrh	r6, [r3, #0]
 8005656:	2f6f      	cmp	r7, #111	; 0x6f
 8005658:	bf0c      	ite	eq
 800565a:	2308      	moveq	r3, #8
 800565c:	230a      	movne	r3, #10
 800565e:	4851      	ldr	r0, [pc, #324]	; (80057a4 <_printf_i+0x23c>)
 8005660:	2100      	movs	r1, #0
 8005662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005666:	6865      	ldr	r5, [r4, #4]
 8005668:	2d00      	cmp	r5, #0
 800566a:	bfa8      	it	ge
 800566c:	6821      	ldrge	r1, [r4, #0]
 800566e:	60a5      	str	r5, [r4, #8]
 8005670:	bfa4      	itt	ge
 8005672:	f021 0104 	bicge.w	r1, r1, #4
 8005676:	6021      	strge	r1, [r4, #0]
 8005678:	b90e      	cbnz	r6, 800567e <_printf_i+0x116>
 800567a:	2d00      	cmp	r5, #0
 800567c:	d04b      	beq.n	8005716 <_printf_i+0x1ae>
 800567e:	4615      	mov	r5, r2
 8005680:	fbb6 f1f3 	udiv	r1, r6, r3
 8005684:	fb03 6711 	mls	r7, r3, r1, r6
 8005688:	5dc7      	ldrb	r7, [r0, r7]
 800568a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800568e:	4637      	mov	r7, r6
 8005690:	42bb      	cmp	r3, r7
 8005692:	460e      	mov	r6, r1
 8005694:	d9f4      	bls.n	8005680 <_printf_i+0x118>
 8005696:	2b08      	cmp	r3, #8
 8005698:	d10b      	bne.n	80056b2 <_printf_i+0x14a>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	07de      	lsls	r6, r3, #31
 800569e:	d508      	bpl.n	80056b2 <_printf_i+0x14a>
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	6861      	ldr	r1, [r4, #4]
 80056a4:	4299      	cmp	r1, r3
 80056a6:	bfde      	ittt	le
 80056a8:	2330      	movle	r3, #48	; 0x30
 80056aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056b2:	1b52      	subs	r2, r2, r5
 80056b4:	6122      	str	r2, [r4, #16]
 80056b6:	464b      	mov	r3, r9
 80056b8:	4621      	mov	r1, r4
 80056ba:	4640      	mov	r0, r8
 80056bc:	f8cd a000 	str.w	sl, [sp]
 80056c0:	aa03      	add	r2, sp, #12
 80056c2:	f7ff fedf 	bl	8005484 <_printf_common>
 80056c6:	3001      	adds	r0, #1
 80056c8:	d14a      	bne.n	8005760 <_printf_i+0x1f8>
 80056ca:	f04f 30ff 	mov.w	r0, #4294967295
 80056ce:	b004      	add	sp, #16
 80056d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	f043 0320 	orr.w	r3, r3, #32
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	2778      	movs	r7, #120	; 0x78
 80056de:	4832      	ldr	r0, [pc, #200]	; (80057a8 <_printf_i+0x240>)
 80056e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	6829      	ldr	r1, [r5, #0]
 80056e8:	061f      	lsls	r7, r3, #24
 80056ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80056ee:	d402      	bmi.n	80056f6 <_printf_i+0x18e>
 80056f0:	065f      	lsls	r7, r3, #25
 80056f2:	bf48      	it	mi
 80056f4:	b2b6      	uxthmi	r6, r6
 80056f6:	07df      	lsls	r7, r3, #31
 80056f8:	bf48      	it	mi
 80056fa:	f043 0320 	orrmi.w	r3, r3, #32
 80056fe:	6029      	str	r1, [r5, #0]
 8005700:	bf48      	it	mi
 8005702:	6023      	strmi	r3, [r4, #0]
 8005704:	b91e      	cbnz	r6, 800570e <_printf_i+0x1a6>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	f023 0320 	bic.w	r3, r3, #32
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	2310      	movs	r3, #16
 8005710:	e7a6      	b.n	8005660 <_printf_i+0xf8>
 8005712:	4824      	ldr	r0, [pc, #144]	; (80057a4 <_printf_i+0x23c>)
 8005714:	e7e4      	b.n	80056e0 <_printf_i+0x178>
 8005716:	4615      	mov	r5, r2
 8005718:	e7bd      	b.n	8005696 <_printf_i+0x12e>
 800571a:	682b      	ldr	r3, [r5, #0]
 800571c:	6826      	ldr	r6, [r4, #0]
 800571e:	1d18      	adds	r0, r3, #4
 8005720:	6961      	ldr	r1, [r4, #20]
 8005722:	6028      	str	r0, [r5, #0]
 8005724:	0635      	lsls	r5, r6, #24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	d501      	bpl.n	800572e <_printf_i+0x1c6>
 800572a:	6019      	str	r1, [r3, #0]
 800572c:	e002      	b.n	8005734 <_printf_i+0x1cc>
 800572e:	0670      	lsls	r0, r6, #25
 8005730:	d5fb      	bpl.n	800572a <_printf_i+0x1c2>
 8005732:	8019      	strh	r1, [r3, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	4615      	mov	r5, r2
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	e7bc      	b.n	80056b6 <_printf_i+0x14e>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	2100      	movs	r1, #0
 8005740:	1d1a      	adds	r2, r3, #4
 8005742:	602a      	str	r2, [r5, #0]
 8005744:	681d      	ldr	r5, [r3, #0]
 8005746:	6862      	ldr	r2, [r4, #4]
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f9b4 	bl	8005ab6 <memchr>
 800574e:	b108      	cbz	r0, 8005754 <_printf_i+0x1ec>
 8005750:	1b40      	subs	r0, r0, r5
 8005752:	6060      	str	r0, [r4, #4]
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	2300      	movs	r3, #0
 800575a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800575e:	e7aa      	b.n	80056b6 <_printf_i+0x14e>
 8005760:	462a      	mov	r2, r5
 8005762:	4649      	mov	r1, r9
 8005764:	4640      	mov	r0, r8
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	47d0      	blx	sl
 800576a:	3001      	adds	r0, #1
 800576c:	d0ad      	beq.n	80056ca <_printf_i+0x162>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	079b      	lsls	r3, r3, #30
 8005772:	d413      	bmi.n	800579c <_printf_i+0x234>
 8005774:	68e0      	ldr	r0, [r4, #12]
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	4298      	cmp	r0, r3
 800577a:	bfb8      	it	lt
 800577c:	4618      	movlt	r0, r3
 800577e:	e7a6      	b.n	80056ce <_printf_i+0x166>
 8005780:	2301      	movs	r3, #1
 8005782:	4632      	mov	r2, r6
 8005784:	4649      	mov	r1, r9
 8005786:	4640      	mov	r0, r8
 8005788:	47d0      	blx	sl
 800578a:	3001      	adds	r0, #1
 800578c:	d09d      	beq.n	80056ca <_printf_i+0x162>
 800578e:	3501      	adds	r5, #1
 8005790:	68e3      	ldr	r3, [r4, #12]
 8005792:	9903      	ldr	r1, [sp, #12]
 8005794:	1a5b      	subs	r3, r3, r1
 8005796:	42ab      	cmp	r3, r5
 8005798:	dcf2      	bgt.n	8005780 <_printf_i+0x218>
 800579a:	e7eb      	b.n	8005774 <_printf_i+0x20c>
 800579c:	2500      	movs	r5, #0
 800579e:	f104 0619 	add.w	r6, r4, #25
 80057a2:	e7f5      	b.n	8005790 <_printf_i+0x228>
 80057a4:	080078a8 	.word	0x080078a8
 80057a8:	080078b9 	.word	0x080078b9

080057ac <std>:
 80057ac:	2300      	movs	r3, #0
 80057ae:	b510      	push	{r4, lr}
 80057b0:	4604      	mov	r4, r0
 80057b2:	e9c0 3300 	strd	r3, r3, [r0]
 80057b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ba:	6083      	str	r3, [r0, #8]
 80057bc:	8181      	strh	r1, [r0, #12]
 80057be:	6643      	str	r3, [r0, #100]	; 0x64
 80057c0:	81c2      	strh	r2, [r0, #14]
 80057c2:	6183      	str	r3, [r0, #24]
 80057c4:	4619      	mov	r1, r3
 80057c6:	2208      	movs	r2, #8
 80057c8:	305c      	adds	r0, #92	; 0x5c
 80057ca:	f000 f8f4 	bl	80059b6 <memset>
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <std+0x58>)
 80057d0:	6224      	str	r4, [r4, #32]
 80057d2:	6263      	str	r3, [r4, #36]	; 0x24
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <std+0x5c>)
 80057d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <std+0x60>)
 80057da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <std+0x64>)
 80057de:	6323      	str	r3, [r4, #48]	; 0x30
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <std+0x68>)
 80057e2:	429c      	cmp	r4, r3
 80057e4:	d006      	beq.n	80057f4 <std+0x48>
 80057e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80057ea:	4294      	cmp	r4, r2
 80057ec:	d002      	beq.n	80057f4 <std+0x48>
 80057ee:	33d0      	adds	r3, #208	; 0xd0
 80057f0:	429c      	cmp	r4, r3
 80057f2:	d105      	bne.n	8005800 <std+0x54>
 80057f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057fc:	f000 b958 	b.w	8005ab0 <__retarget_lock_init_recursive>
 8005800:	bd10      	pop	{r4, pc}
 8005802:	bf00      	nop
 8005804:	08005931 	.word	0x08005931
 8005808:	08005953 	.word	0x08005953
 800580c:	0800598b 	.word	0x0800598b
 8005810:	080059af 	.word	0x080059af
 8005814:	200003dc 	.word	0x200003dc

08005818 <stdio_exit_handler>:
 8005818:	4a02      	ldr	r2, [pc, #8]	; (8005824 <stdio_exit_handler+0xc>)
 800581a:	4903      	ldr	r1, [pc, #12]	; (8005828 <stdio_exit_handler+0x10>)
 800581c:	4803      	ldr	r0, [pc, #12]	; (800582c <stdio_exit_handler+0x14>)
 800581e:	f000 b869 	b.w	80058f4 <_fwalk_sglue>
 8005822:	bf00      	nop
 8005824:	20000020 	.word	0x20000020
 8005828:	0800719d 	.word	0x0800719d
 800582c:	2000002c 	.word	0x2000002c

08005830 <cleanup_stdio>:
 8005830:	6841      	ldr	r1, [r0, #4]
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <cleanup_stdio+0x34>)
 8005834:	b510      	push	{r4, lr}
 8005836:	4299      	cmp	r1, r3
 8005838:	4604      	mov	r4, r0
 800583a:	d001      	beq.n	8005840 <cleanup_stdio+0x10>
 800583c:	f001 fcae 	bl	800719c <_fflush_r>
 8005840:	68a1      	ldr	r1, [r4, #8]
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <cleanup_stdio+0x38>)
 8005844:	4299      	cmp	r1, r3
 8005846:	d002      	beq.n	800584e <cleanup_stdio+0x1e>
 8005848:	4620      	mov	r0, r4
 800584a:	f001 fca7 	bl	800719c <_fflush_r>
 800584e:	68e1      	ldr	r1, [r4, #12]
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <cleanup_stdio+0x3c>)
 8005852:	4299      	cmp	r1, r3
 8005854:	d004      	beq.n	8005860 <cleanup_stdio+0x30>
 8005856:	4620      	mov	r0, r4
 8005858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800585c:	f001 bc9e 	b.w	800719c <_fflush_r>
 8005860:	bd10      	pop	{r4, pc}
 8005862:	bf00      	nop
 8005864:	200003dc 	.word	0x200003dc
 8005868:	20000444 	.word	0x20000444
 800586c:	200004ac 	.word	0x200004ac

08005870 <global_stdio_init.part.0>:
 8005870:	b510      	push	{r4, lr}
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <global_stdio_init.part.0+0x30>)
 8005874:	4c0b      	ldr	r4, [pc, #44]	; (80058a4 <global_stdio_init.part.0+0x34>)
 8005876:	4a0c      	ldr	r2, [pc, #48]	; (80058a8 <global_stdio_init.part.0+0x38>)
 8005878:	4620      	mov	r0, r4
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	2104      	movs	r1, #4
 800587e:	2200      	movs	r2, #0
 8005880:	f7ff ff94 	bl	80057ac <std>
 8005884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005888:	2201      	movs	r2, #1
 800588a:	2109      	movs	r1, #9
 800588c:	f7ff ff8e 	bl	80057ac <std>
 8005890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005894:	2202      	movs	r2, #2
 8005896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589a:	2112      	movs	r1, #18
 800589c:	f7ff bf86 	b.w	80057ac <std>
 80058a0:	20000514 	.word	0x20000514
 80058a4:	200003dc 	.word	0x200003dc
 80058a8:	08005819 	.word	0x08005819

080058ac <__sfp_lock_acquire>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__sfp_lock_acquire+0x8>)
 80058ae:	f000 b900 	b.w	8005ab2 <__retarget_lock_acquire_recursive>
 80058b2:	bf00      	nop
 80058b4:	2000051d 	.word	0x2000051d

080058b8 <__sfp_lock_release>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__sfp_lock_release+0x8>)
 80058ba:	f000 b8fb 	b.w	8005ab4 <__retarget_lock_release_recursive>
 80058be:	bf00      	nop
 80058c0:	2000051d 	.word	0x2000051d

080058c4 <__sinit>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4604      	mov	r4, r0
 80058c8:	f7ff fff0 	bl	80058ac <__sfp_lock_acquire>
 80058cc:	6a23      	ldr	r3, [r4, #32]
 80058ce:	b11b      	cbz	r3, 80058d8 <__sinit+0x14>
 80058d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d4:	f7ff bff0 	b.w	80058b8 <__sfp_lock_release>
 80058d8:	4b04      	ldr	r3, [pc, #16]	; (80058ec <__sinit+0x28>)
 80058da:	6223      	str	r3, [r4, #32]
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <__sinit+0x2c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f5      	bne.n	80058d0 <__sinit+0xc>
 80058e4:	f7ff ffc4 	bl	8005870 <global_stdio_init.part.0>
 80058e8:	e7f2      	b.n	80058d0 <__sinit+0xc>
 80058ea:	bf00      	nop
 80058ec:	08005831 	.word	0x08005831
 80058f0:	20000514 	.word	0x20000514

080058f4 <_fwalk_sglue>:
 80058f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f8:	4607      	mov	r7, r0
 80058fa:	4688      	mov	r8, r1
 80058fc:	4614      	mov	r4, r2
 80058fe:	2600      	movs	r6, #0
 8005900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005904:	f1b9 0901 	subs.w	r9, r9, #1
 8005908:	d505      	bpl.n	8005916 <_fwalk_sglue+0x22>
 800590a:	6824      	ldr	r4, [r4, #0]
 800590c:	2c00      	cmp	r4, #0
 800590e:	d1f7      	bne.n	8005900 <_fwalk_sglue+0xc>
 8005910:	4630      	mov	r0, r6
 8005912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d907      	bls.n	800592c <_fwalk_sglue+0x38>
 800591c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005920:	3301      	adds	r3, #1
 8005922:	d003      	beq.n	800592c <_fwalk_sglue+0x38>
 8005924:	4629      	mov	r1, r5
 8005926:	4638      	mov	r0, r7
 8005928:	47c0      	blx	r8
 800592a:	4306      	orrs	r6, r0
 800592c:	3568      	adds	r5, #104	; 0x68
 800592e:	e7e9      	b.n	8005904 <_fwalk_sglue+0x10>

08005930 <__sread>:
 8005930:	b510      	push	{r4, lr}
 8005932:	460c      	mov	r4, r1
 8005934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005938:	f000 f86c 	bl	8005a14 <_read_r>
 800593c:	2800      	cmp	r0, #0
 800593e:	bfab      	itete	ge
 8005940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005942:	89a3      	ldrhlt	r3, [r4, #12]
 8005944:	181b      	addge	r3, r3, r0
 8005946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800594a:	bfac      	ite	ge
 800594c:	6563      	strge	r3, [r4, #84]	; 0x54
 800594e:	81a3      	strhlt	r3, [r4, #12]
 8005950:	bd10      	pop	{r4, pc}

08005952 <__swrite>:
 8005952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005956:	461f      	mov	r7, r3
 8005958:	898b      	ldrh	r3, [r1, #12]
 800595a:	4605      	mov	r5, r0
 800595c:	05db      	lsls	r3, r3, #23
 800595e:	460c      	mov	r4, r1
 8005960:	4616      	mov	r6, r2
 8005962:	d505      	bpl.n	8005970 <__swrite+0x1e>
 8005964:	2302      	movs	r3, #2
 8005966:	2200      	movs	r2, #0
 8005968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596c:	f000 f840 	bl	80059f0 <_lseek_r>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	4632      	mov	r2, r6
 8005974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	4628      	mov	r0, r5
 800597c:	463b      	mov	r3, r7
 800597e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	f000 b857 	b.w	8005a38 <_write_r>

0800598a <__sseek>:
 800598a:	b510      	push	{r4, lr}
 800598c:	460c      	mov	r4, r1
 800598e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005992:	f000 f82d 	bl	80059f0 <_lseek_r>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	bf15      	itete	ne
 800599c:	6560      	strne	r0, [r4, #84]	; 0x54
 800599e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059a6:	81a3      	strheq	r3, [r4, #12]
 80059a8:	bf18      	it	ne
 80059aa:	81a3      	strhne	r3, [r4, #12]
 80059ac:	bd10      	pop	{r4, pc}

080059ae <__sclose>:
 80059ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b2:	f000 b80d 	b.w	80059d0 <_close_r>

080059b6 <memset>:
 80059b6:	4603      	mov	r3, r0
 80059b8:	4402      	add	r2, r0
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d100      	bne.n	80059c0 <memset+0xa>
 80059be:	4770      	bx	lr
 80059c0:	f803 1b01 	strb.w	r1, [r3], #1
 80059c4:	e7f9      	b.n	80059ba <memset+0x4>
	...

080059c8 <_localeconv_r>:
 80059c8:	4800      	ldr	r0, [pc, #0]	; (80059cc <_localeconv_r+0x4>)
 80059ca:	4770      	bx	lr
 80059cc:	2000016c 	.word	0x2000016c

080059d0 <_close_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	2300      	movs	r3, #0
 80059d4:	4d05      	ldr	r5, [pc, #20]	; (80059ec <_close_r+0x1c>)
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fc fc5a 	bl	8002294 <_close>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_close_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_close_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20000518 	.word	0x20000518

080059f0 <_lseek_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	2200      	movs	r2, #0
 80059fa:	4d05      	ldr	r5, [pc, #20]	; (8005a10 <_lseek_r+0x20>)
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f7fc fc6c 	bl	80022dc <_lseek>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_lseek_r+0x1e>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_lseek_r+0x1e>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20000518 	.word	0x20000518

08005a14 <_read_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4d05      	ldr	r5, [pc, #20]	; (8005a34 <_read_r+0x20>)
 8005a20:	602a      	str	r2, [r5, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f7fc fc19 	bl	800225a <_read>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_read_r+0x1e>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_read_r+0x1e>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20000518 	.word	0x20000518

08005a38 <_write_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	2200      	movs	r2, #0
 8005a42:	4d05      	ldr	r5, [pc, #20]	; (8005a58 <_write_r+0x20>)
 8005a44:	602a      	str	r2, [r5, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f7fc f87a 	bl	8001b40 <_write>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_write_r+0x1e>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_write_r+0x1e>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000518 	.word	0x20000518

08005a5c <__errno>:
 8005a5c:	4b01      	ldr	r3, [pc, #4]	; (8005a64 <__errno+0x8>)
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000078 	.word	0x20000078

08005a68 <__libc_init_array>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	4d0c      	ldr	r5, [pc, #48]	; (8005aa0 <__libc_init_array+0x38>)
 8005a6e:	4c0d      	ldr	r4, [pc, #52]	; (8005aa4 <__libc_init_array+0x3c>)
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	42a6      	cmp	r6, r4
 8005a76:	d109      	bne.n	8005a8c <__libc_init_array+0x24>
 8005a78:	f001 fee0 	bl	800783c <_init>
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	4d0a      	ldr	r5, [pc, #40]	; (8005aa8 <__libc_init_array+0x40>)
 8005a80:	4c0a      	ldr	r4, [pc, #40]	; (8005aac <__libc_init_array+0x44>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	42a6      	cmp	r6, r4
 8005a88:	d105      	bne.n	8005a96 <__libc_init_array+0x2e>
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a90:	4798      	blx	r3
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7ee      	b.n	8005a74 <__libc_init_array+0xc>
 8005a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9a:	4798      	blx	r3
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	e7f2      	b.n	8005a86 <__libc_init_array+0x1e>
 8005aa0:	08007c04 	.word	0x08007c04
 8005aa4:	08007c04 	.word	0x08007c04
 8005aa8:	08007c04 	.word	0x08007c04
 8005aac:	08007c08 	.word	0x08007c08

08005ab0 <__retarget_lock_init_recursive>:
 8005ab0:	4770      	bx	lr

08005ab2 <__retarget_lock_acquire_recursive>:
 8005ab2:	4770      	bx	lr

08005ab4 <__retarget_lock_release_recursive>:
 8005ab4:	4770      	bx	lr

08005ab6 <memchr>:
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	b2c9      	uxtb	r1, r1
 8005abc:	4402      	add	r2, r0
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	d101      	bne.n	8005ac8 <memchr+0x12>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e003      	b.n	8005ad0 <memchr+0x1a>
 8005ac8:	7804      	ldrb	r4, [r0, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	428c      	cmp	r4, r1
 8005ace:	d1f6      	bne.n	8005abe <memchr+0x8>
 8005ad0:	bd10      	pop	{r4, pc}

08005ad2 <quorem>:
 8005ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad6:	6903      	ldr	r3, [r0, #16]
 8005ad8:	690c      	ldr	r4, [r1, #16]
 8005ada:	4607      	mov	r7, r0
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	db7f      	blt.n	8005be0 <quorem+0x10e>
 8005ae0:	3c01      	subs	r4, #1
 8005ae2:	f100 0514 	add.w	r5, r0, #20
 8005ae6:	f101 0814 	add.w	r8, r1, #20
 8005aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005af8:	3301      	adds	r3, #1
 8005afa:	429a      	cmp	r2, r3
 8005afc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b08:	d331      	bcc.n	8005b6e <quorem+0x9c>
 8005b0a:	f04f 0e00 	mov.w	lr, #0
 8005b0e:	4640      	mov	r0, r8
 8005b10:	46ac      	mov	ip, r5
 8005b12:	46f2      	mov	sl, lr
 8005b14:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b18:	b293      	uxth	r3, r2
 8005b1a:	fb06 e303 	mla	r3, r6, r3, lr
 8005b1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b22:	0c1a      	lsrs	r2, r3, #16
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	fb06 220e 	mla	r2, r6, lr, r2
 8005b2a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b2e:	f8dc a000 	ldr.w	sl, [ip]
 8005b32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b36:	fa1f fa8a 	uxth.w	sl, sl
 8005b3a:	4453      	add	r3, sl
 8005b3c:	f8dc a000 	ldr.w	sl, [ip]
 8005b40:	b292      	uxth	r2, r2
 8005b42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b50:	4581      	cmp	r9, r0
 8005b52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b56:	f84c 3b04 	str.w	r3, [ip], #4
 8005b5a:	d2db      	bcs.n	8005b14 <quorem+0x42>
 8005b5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b60:	b92b      	cbnz	r3, 8005b6e <quorem+0x9c>
 8005b62:	9b01      	ldr	r3, [sp, #4]
 8005b64:	3b04      	subs	r3, #4
 8005b66:	429d      	cmp	r5, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	d32d      	bcc.n	8005bc8 <quorem+0xf6>
 8005b6c:	613c      	str	r4, [r7, #16]
 8005b6e:	4638      	mov	r0, r7
 8005b70:	f001 f994 	bl	8006e9c <__mcmp>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	db23      	blt.n	8005bc0 <quorem+0xee>
 8005b78:	4629      	mov	r1, r5
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b82:	f8d1 c000 	ldr.w	ip, [r1]
 8005b86:	b293      	uxth	r3, r2
 8005b88:	1ac3      	subs	r3, r0, r3
 8005b8a:	0c12      	lsrs	r2, r2, #16
 8005b8c:	fa1f f08c 	uxth.w	r0, ip
 8005b90:	4403      	add	r3, r0
 8005b92:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005b96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ba0:	45c1      	cmp	r9, r8
 8005ba2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ba6:	f841 3b04 	str.w	r3, [r1], #4
 8005baa:	d2e8      	bcs.n	8005b7e <quorem+0xac>
 8005bac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bb4:	b922      	cbnz	r2, 8005bc0 <quorem+0xee>
 8005bb6:	3b04      	subs	r3, #4
 8005bb8:	429d      	cmp	r5, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	d30a      	bcc.n	8005bd4 <quorem+0x102>
 8005bbe:	613c      	str	r4, [r7, #16]
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	b003      	add	sp, #12
 8005bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	2a00      	cmp	r2, #0
 8005bce:	d1cd      	bne.n	8005b6c <quorem+0x9a>
 8005bd0:	3c01      	subs	r4, #1
 8005bd2:	e7c8      	b.n	8005b66 <quorem+0x94>
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d1f0      	bne.n	8005bbe <quorem+0xec>
 8005bdc:	3c01      	subs	r4, #1
 8005bde:	e7eb      	b.n	8005bb8 <quorem+0xe6>
 8005be0:	2000      	movs	r0, #0
 8005be2:	e7ee      	b.n	8005bc2 <quorem+0xf0>
 8005be4:	0000      	movs	r0, r0
	...

08005be8 <_dtoa_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	4616      	mov	r6, r2
 8005bee:	461f      	mov	r7, r3
 8005bf0:	69c4      	ldr	r4, [r0, #28]
 8005bf2:	b099      	sub	sp, #100	; 0x64
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005bfa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005bfe:	b974      	cbnz	r4, 8005c1e <_dtoa_r+0x36>
 8005c00:	2010      	movs	r0, #16
 8005c02:	f000 fe1d 	bl	8006840 <malloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	61e8      	str	r0, [r5, #28]
 8005c0a:	b920      	cbnz	r0, 8005c16 <_dtoa_r+0x2e>
 8005c0c:	21ef      	movs	r1, #239	; 0xef
 8005c0e:	4bac      	ldr	r3, [pc, #688]	; (8005ec0 <_dtoa_r+0x2d8>)
 8005c10:	48ac      	ldr	r0, [pc, #688]	; (8005ec4 <_dtoa_r+0x2dc>)
 8005c12:	f001 fb09 	bl	8007228 <__assert_func>
 8005c16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c1a:	6004      	str	r4, [r0, #0]
 8005c1c:	60c4      	str	r4, [r0, #12]
 8005c1e:	69eb      	ldr	r3, [r5, #28]
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	b151      	cbz	r1, 8005c3a <_dtoa_r+0x52>
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	2301      	movs	r3, #1
 8005c28:	4093      	lsls	r3, r2
 8005c2a:	604a      	str	r2, [r1, #4]
 8005c2c:	608b      	str	r3, [r1, #8]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f000 fefa 	bl	8006a28 <_Bfree>
 8005c34:	2200      	movs	r2, #0
 8005c36:	69eb      	ldr	r3, [r5, #28]
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	1e3b      	subs	r3, r7, #0
 8005c3c:	bfaf      	iteee	ge
 8005c3e:	2300      	movge	r3, #0
 8005c40:	2201      	movlt	r2, #1
 8005c42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c46:	9305      	strlt	r3, [sp, #20]
 8005c48:	bfa8      	it	ge
 8005c4a:	f8c8 3000 	strge.w	r3, [r8]
 8005c4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005c52:	4b9d      	ldr	r3, [pc, #628]	; (8005ec8 <_dtoa_r+0x2e0>)
 8005c54:	bfb8      	it	lt
 8005c56:	f8c8 2000 	strlt.w	r2, [r8]
 8005c5a:	ea33 0309 	bics.w	r3, r3, r9
 8005c5e:	d119      	bne.n	8005c94 <_dtoa_r+0xac>
 8005c60:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c6c:	4333      	orrs	r3, r6
 8005c6e:	f000 8589 	beq.w	8006784 <_dtoa_r+0xb9c>
 8005c72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c74:	b953      	cbnz	r3, 8005c8c <_dtoa_r+0xa4>
 8005c76:	4b95      	ldr	r3, [pc, #596]	; (8005ecc <_dtoa_r+0x2e4>)
 8005c78:	e023      	b.n	8005cc2 <_dtoa_r+0xda>
 8005c7a:	4b95      	ldr	r3, [pc, #596]	; (8005ed0 <_dtoa_r+0x2e8>)
 8005c7c:	9303      	str	r3, [sp, #12]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	9803      	ldr	r0, [sp, #12]
 8005c86:	b019      	add	sp, #100	; 0x64
 8005c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8c:	4b8f      	ldr	r3, [pc, #572]	; (8005ecc <_dtoa_r+0x2e4>)
 8005c8e:	9303      	str	r3, [sp, #12]
 8005c90:	3303      	adds	r3, #3
 8005c92:	e7f5      	b.n	8005c80 <_dtoa_r+0x98>
 8005c94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f7fa fe80 	bl	80009a8 <__aeabi_dcmpeq>
 8005ca8:	4680      	mov	r8, r0
 8005caa:	b160      	cbz	r0, 8005cc6 <_dtoa_r+0xde>
 8005cac:	2301      	movs	r3, #1
 8005cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8562 	beq.w	800677e <_dtoa_r+0xb96>
 8005cba:	4b86      	ldr	r3, [pc, #536]	; (8005ed4 <_dtoa_r+0x2ec>)
 8005cbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	e7de      	b.n	8005c84 <_dtoa_r+0x9c>
 8005cc6:	ab16      	add	r3, sp, #88	; 0x58
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	ab17      	add	r3, sp, #92	; 0x5c
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cd4:	f001 f98a 	bl	8006fec <__d2b>
 8005cd8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005cdc:	4682      	mov	sl, r0
 8005cde:	2c00      	cmp	r4, #0
 8005ce0:	d07e      	beq.n	8005de0 <_dtoa_r+0x1f8>
 8005ce2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cf0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005cf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005cf8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4b75      	ldr	r3, [pc, #468]	; (8005ed8 <_dtoa_r+0x2f0>)
 8005d02:	f7fa fa31 	bl	8000168 <__aeabi_dsub>
 8005d06:	a368      	add	r3, pc, #416	; (adr r3, 8005ea8 <_dtoa_r+0x2c0>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f7fa fbe4 	bl	80004d8 <__aeabi_dmul>
 8005d10:	a367      	add	r3, pc, #412	; (adr r3, 8005eb0 <_dtoa_r+0x2c8>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f7fa fa29 	bl	800016c <__adddf3>
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	460f      	mov	r7, r1
 8005d20:	f7fa fb70 	bl	8000404 <__aeabi_i2d>
 8005d24:	a364      	add	r3, pc, #400	; (adr r3, 8005eb8 <_dtoa_r+0x2d0>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fbd5 	bl	80004d8 <__aeabi_dmul>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4630      	mov	r0, r6
 8005d34:	4639      	mov	r1, r7
 8005d36:	f7fa fa19 	bl	800016c <__adddf3>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	f7fa fe7b 	bl	8000a38 <__aeabi_d2iz>
 8005d42:	2200      	movs	r2, #0
 8005d44:	4683      	mov	fp, r0
 8005d46:	2300      	movs	r3, #0
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fe36 	bl	80009bc <__aeabi_dcmplt>
 8005d50:	b148      	cbz	r0, 8005d66 <_dtoa_r+0x17e>
 8005d52:	4658      	mov	r0, fp
 8005d54:	f7fa fb56 	bl	8000404 <__aeabi_i2d>
 8005d58:	4632      	mov	r2, r6
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	f7fa fe24 	bl	80009a8 <__aeabi_dcmpeq>
 8005d60:	b908      	cbnz	r0, 8005d66 <_dtoa_r+0x17e>
 8005d62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d66:	f1bb 0f16 	cmp.w	fp, #22
 8005d6a:	d857      	bhi.n	8005e1c <_dtoa_r+0x234>
 8005d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d70:	4b5a      	ldr	r3, [pc, #360]	; (8005edc <_dtoa_r+0x2f4>)
 8005d72:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fe1f 	bl	80009bc <__aeabi_dcmplt>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d04e      	beq.n	8005e20 <_dtoa_r+0x238>
 8005d82:	2300      	movs	r3, #0
 8005d84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d8c:	1b1b      	subs	r3, r3, r4
 8005d8e:	1e5a      	subs	r2, r3, #1
 8005d90:	bf46      	itte	mi
 8005d92:	f1c3 0901 	rsbmi	r9, r3, #1
 8005d96:	2300      	movmi	r3, #0
 8005d98:	f04f 0900 	movpl.w	r9, #0
 8005d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d9e:	bf48      	it	mi
 8005da0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005da2:	f1bb 0f00 	cmp.w	fp, #0
 8005da6:	db3d      	blt.n	8005e24 <_dtoa_r+0x23c>
 8005da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005daa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005dae:	445b      	add	r3, fp
 8005db0:	9309      	str	r3, [sp, #36]	; 0x24
 8005db2:	2300      	movs	r3, #0
 8005db4:	930a      	str	r3, [sp, #40]	; 0x28
 8005db6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005db8:	2b09      	cmp	r3, #9
 8005dba:	d867      	bhi.n	8005e8c <_dtoa_r+0x2a4>
 8005dbc:	2b05      	cmp	r3, #5
 8005dbe:	bfc4      	itt	gt
 8005dc0:	3b04      	subgt	r3, #4
 8005dc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005dc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dc6:	bfc8      	it	gt
 8005dc8:	2400      	movgt	r4, #0
 8005dca:	f1a3 0302 	sub.w	r3, r3, #2
 8005dce:	bfd8      	it	le
 8005dd0:	2401      	movle	r4, #1
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	f200 8086 	bhi.w	8005ee4 <_dtoa_r+0x2fc>
 8005dd8:	e8df f003 	tbb	[pc, r3]
 8005ddc:	5637392c 	.word	0x5637392c
 8005de0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005de4:	441c      	add	r4, r3
 8005de6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	bfc1      	itttt	gt
 8005dee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005df2:	fa09 f903 	lslgt.w	r9, r9, r3
 8005df6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005dfa:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005dfe:	bfd6      	itet	le
 8005e00:	f1c3 0320 	rsble	r3, r3, #32
 8005e04:	ea49 0003 	orrgt.w	r0, r9, r3
 8005e08:	fa06 f003 	lslle.w	r0, r6, r3
 8005e0c:	f7fa faea 	bl	80003e4 <__aeabi_ui2d>
 8005e10:	2201      	movs	r2, #1
 8005e12:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005e16:	3c01      	subs	r4, #1
 8005e18:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e1a:	e76f      	b.n	8005cfc <_dtoa_r+0x114>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e7b3      	b.n	8005d88 <_dtoa_r+0x1a0>
 8005e20:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e22:	e7b2      	b.n	8005d8a <_dtoa_r+0x1a2>
 8005e24:	f1cb 0300 	rsb	r3, fp, #0
 8005e28:	930a      	str	r3, [sp, #40]	; 0x28
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	eba9 090b 	sub.w	r9, r9, fp
 8005e30:	930e      	str	r3, [sp, #56]	; 0x38
 8005e32:	e7c0      	b.n	8005db6 <_dtoa_r+0x1ce>
 8005e34:	2300      	movs	r3, #0
 8005e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dc55      	bgt.n	8005eea <_dtoa_r+0x302>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	461a      	mov	r2, r3
 8005e42:	9306      	str	r3, [sp, #24]
 8005e44:	9308      	str	r3, [sp, #32]
 8005e46:	9223      	str	r2, [sp, #140]	; 0x8c
 8005e48:	e00b      	b.n	8005e62 <_dtoa_r+0x27a>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e7f3      	b.n	8005e36 <_dtoa_r+0x24e>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e54:	445b      	add	r3, fp
 8005e56:	9306      	str	r3, [sp, #24]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	9308      	str	r3, [sp, #32]
 8005e5e:	bfb8      	it	lt
 8005e60:	2301      	movlt	r3, #1
 8005e62:	2100      	movs	r1, #0
 8005e64:	2204      	movs	r2, #4
 8005e66:	69e8      	ldr	r0, [r5, #28]
 8005e68:	f102 0614 	add.w	r6, r2, #20
 8005e6c:	429e      	cmp	r6, r3
 8005e6e:	d940      	bls.n	8005ef2 <_dtoa_r+0x30a>
 8005e70:	6041      	str	r1, [r0, #4]
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 fd98 	bl	80069a8 <_Balloc>
 8005e78:	9003      	str	r0, [sp, #12]
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d13c      	bne.n	8005ef8 <_dtoa_r+0x310>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	f240 11af 	movw	r1, #431	; 0x1af
 8005e84:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <_dtoa_r+0x2f8>)
 8005e86:	e6c3      	b.n	8005c10 <_dtoa_r+0x28>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e7e1      	b.n	8005e50 <_dtoa_r+0x268>
 8005e8c:	2401      	movs	r4, #1
 8005e8e:	2300      	movs	r3, #0
 8005e90:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e92:	9322      	str	r3, [sp, #136]	; 0x88
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	2200      	movs	r2, #0
 8005e9a:	9306      	str	r3, [sp, #24]
 8005e9c:	9308      	str	r3, [sp, #32]
 8005e9e:	2312      	movs	r3, #18
 8005ea0:	e7d1      	b.n	8005e46 <_dtoa_r+0x25e>
 8005ea2:	bf00      	nop
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	636f4361 	.word	0x636f4361
 8005eac:	3fd287a7 	.word	0x3fd287a7
 8005eb0:	8b60c8b3 	.word	0x8b60c8b3
 8005eb4:	3fc68a28 	.word	0x3fc68a28
 8005eb8:	509f79fb 	.word	0x509f79fb
 8005ebc:	3fd34413 	.word	0x3fd34413
 8005ec0:	080078d7 	.word	0x080078d7
 8005ec4:	080078ee 	.word	0x080078ee
 8005ec8:	7ff00000 	.word	0x7ff00000
 8005ecc:	080078d3 	.word	0x080078d3
 8005ed0:	080078ca 	.word	0x080078ca
 8005ed4:	080078a7 	.word	0x080078a7
 8005ed8:	3ff80000 	.word	0x3ff80000
 8005edc:	080079d8 	.word	0x080079d8
 8005ee0:	08007946 	.word	0x08007946
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ee8:	e7d4      	b.n	8005e94 <_dtoa_r+0x2ac>
 8005eea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eec:	9306      	str	r3, [sp, #24]
 8005eee:	9308      	str	r3, [sp, #32]
 8005ef0:	e7b7      	b.n	8005e62 <_dtoa_r+0x27a>
 8005ef2:	3101      	adds	r1, #1
 8005ef4:	0052      	lsls	r2, r2, #1
 8005ef6:	e7b7      	b.n	8005e68 <_dtoa_r+0x280>
 8005ef8:	69eb      	ldr	r3, [r5, #28]
 8005efa:	9a03      	ldr	r2, [sp, #12]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	9b08      	ldr	r3, [sp, #32]
 8005f00:	2b0e      	cmp	r3, #14
 8005f02:	f200 80a8 	bhi.w	8006056 <_dtoa_r+0x46e>
 8005f06:	2c00      	cmp	r4, #0
 8005f08:	f000 80a5 	beq.w	8006056 <_dtoa_r+0x46e>
 8005f0c:	f1bb 0f00 	cmp.w	fp, #0
 8005f10:	dd34      	ble.n	8005f7c <_dtoa_r+0x394>
 8005f12:	4b9a      	ldr	r3, [pc, #616]	; (800617c <_dtoa_r+0x594>)
 8005f14:	f00b 020f 	and.w	r2, fp, #15
 8005f18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005f20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f28:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005f2c:	d016      	beq.n	8005f5c <_dtoa_r+0x374>
 8005f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f32:	4b93      	ldr	r3, [pc, #588]	; (8006180 <_dtoa_r+0x598>)
 8005f34:	2703      	movs	r7, #3
 8005f36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f3a:	f7fa fbf7 	bl	800072c <__aeabi_ddiv>
 8005f3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f42:	f004 040f 	and.w	r4, r4, #15
 8005f46:	4e8e      	ldr	r6, [pc, #568]	; (8006180 <_dtoa_r+0x598>)
 8005f48:	b954      	cbnz	r4, 8005f60 <_dtoa_r+0x378>
 8005f4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f52:	f7fa fbeb 	bl	800072c <__aeabi_ddiv>
 8005f56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f5a:	e029      	b.n	8005fb0 <_dtoa_r+0x3c8>
 8005f5c:	2702      	movs	r7, #2
 8005f5e:	e7f2      	b.n	8005f46 <_dtoa_r+0x35e>
 8005f60:	07e1      	lsls	r1, r4, #31
 8005f62:	d508      	bpl.n	8005f76 <_dtoa_r+0x38e>
 8005f64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f6c:	f7fa fab4 	bl	80004d8 <__aeabi_dmul>
 8005f70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f74:	3701      	adds	r7, #1
 8005f76:	1064      	asrs	r4, r4, #1
 8005f78:	3608      	adds	r6, #8
 8005f7a:	e7e5      	b.n	8005f48 <_dtoa_r+0x360>
 8005f7c:	f000 80a5 	beq.w	80060ca <_dtoa_r+0x4e2>
 8005f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f84:	f1cb 0400 	rsb	r4, fp, #0
 8005f88:	4b7c      	ldr	r3, [pc, #496]	; (800617c <_dtoa_r+0x594>)
 8005f8a:	f004 020f 	and.w	r2, r4, #15
 8005f8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa fa9f 	bl	80004d8 <__aeabi_dmul>
 8005f9a:	2702      	movs	r7, #2
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fa2:	4e77      	ldr	r6, [pc, #476]	; (8006180 <_dtoa_r+0x598>)
 8005fa4:	1124      	asrs	r4, r4, #4
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	f040 8084 	bne.w	80060b4 <_dtoa_r+0x4cc>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1d2      	bne.n	8005f56 <_dtoa_r+0x36e>
 8005fb0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8087 	beq.w	80060ce <_dtoa_r+0x4e6>
 8005fc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4b6f      	ldr	r3, [pc, #444]	; (8006184 <_dtoa_r+0x59c>)
 8005fc8:	f7fa fcf8 	bl	80009bc <__aeabi_dcmplt>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d07e      	beq.n	80060ce <_dtoa_r+0x4e6>
 8005fd0:	9b08      	ldr	r3, [sp, #32]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d07b      	beq.n	80060ce <_dtoa_r+0x4e6>
 8005fd6:	9b06      	ldr	r3, [sp, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dd38      	ble.n	800604e <_dtoa_r+0x466>
 8005fdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4b69      	ldr	r3, [pc, #420]	; (8006188 <_dtoa_r+0x5a0>)
 8005fe4:	f7fa fa78 	bl	80004d8 <__aeabi_dmul>
 8005fe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fec:	9c06      	ldr	r4, [sp, #24]
 8005fee:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005ff2:	3701      	adds	r7, #1
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	f7fa fa05 	bl	8000404 <__aeabi_i2d>
 8005ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffe:	f7fa fa6b 	bl	80004d8 <__aeabi_dmul>
 8006002:	2200      	movs	r2, #0
 8006004:	4b61      	ldr	r3, [pc, #388]	; (800618c <_dtoa_r+0x5a4>)
 8006006:	f7fa f8b1 	bl	800016c <__adddf3>
 800600a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800600e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006012:	9611      	str	r6, [sp, #68]	; 0x44
 8006014:	2c00      	cmp	r4, #0
 8006016:	d15d      	bne.n	80060d4 <_dtoa_r+0x4ec>
 8006018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800601c:	2200      	movs	r2, #0
 800601e:	4b5c      	ldr	r3, [pc, #368]	; (8006190 <_dtoa_r+0x5a8>)
 8006020:	f7fa f8a2 	bl	8000168 <__aeabi_dsub>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800602c:	4633      	mov	r3, r6
 800602e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006030:	f7fa fce2 	bl	80009f8 <__aeabi_dcmpgt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 8295 	bne.w	8006564 <_dtoa_r+0x97c>
 800603a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800603e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006040:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006044:	f7fa fcba 	bl	80009bc <__aeabi_dcmplt>
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 8289 	bne.w	8006560 <_dtoa_r+0x978>
 800604e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006052:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006058:	2b00      	cmp	r3, #0
 800605a:	f2c0 8151 	blt.w	8006300 <_dtoa_r+0x718>
 800605e:	f1bb 0f0e 	cmp.w	fp, #14
 8006062:	f300 814d 	bgt.w	8006300 <_dtoa_r+0x718>
 8006066:	4b45      	ldr	r3, [pc, #276]	; (800617c <_dtoa_r+0x594>)
 8006068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800606c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006070:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006074:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006076:	2b00      	cmp	r3, #0
 8006078:	f280 80da 	bge.w	8006230 <_dtoa_r+0x648>
 800607c:	9b08      	ldr	r3, [sp, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f300 80d6 	bgt.w	8006230 <_dtoa_r+0x648>
 8006084:	f040 826b 	bne.w	800655e <_dtoa_r+0x976>
 8006088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800608c:	2200      	movs	r2, #0
 800608e:	4b40      	ldr	r3, [pc, #256]	; (8006190 <_dtoa_r+0x5a8>)
 8006090:	f7fa fa22 	bl	80004d8 <__aeabi_dmul>
 8006094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006098:	f7fa fca4 	bl	80009e4 <__aeabi_dcmpge>
 800609c:	9c08      	ldr	r4, [sp, #32]
 800609e:	4626      	mov	r6, r4
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f040 8241 	bne.w	8006528 <_dtoa_r+0x940>
 80060a6:	2331      	movs	r3, #49	; 0x31
 80060a8:	9f03      	ldr	r7, [sp, #12]
 80060aa:	f10b 0b01 	add.w	fp, fp, #1
 80060ae:	f807 3b01 	strb.w	r3, [r7], #1
 80060b2:	e23d      	b.n	8006530 <_dtoa_r+0x948>
 80060b4:	07e2      	lsls	r2, r4, #31
 80060b6:	d505      	bpl.n	80060c4 <_dtoa_r+0x4dc>
 80060b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060bc:	f7fa fa0c 	bl	80004d8 <__aeabi_dmul>
 80060c0:	2301      	movs	r3, #1
 80060c2:	3701      	adds	r7, #1
 80060c4:	1064      	asrs	r4, r4, #1
 80060c6:	3608      	adds	r6, #8
 80060c8:	e76d      	b.n	8005fa6 <_dtoa_r+0x3be>
 80060ca:	2702      	movs	r7, #2
 80060cc:	e770      	b.n	8005fb0 <_dtoa_r+0x3c8>
 80060ce:	46d8      	mov	r8, fp
 80060d0:	9c08      	ldr	r4, [sp, #32]
 80060d2:	e78f      	b.n	8005ff4 <_dtoa_r+0x40c>
 80060d4:	9903      	ldr	r1, [sp, #12]
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <_dtoa_r+0x594>)
 80060d8:	4421      	add	r1, r4
 80060da:	9112      	str	r1, [sp, #72]	; 0x48
 80060dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060e2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80060e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060ea:	2900      	cmp	r1, #0
 80060ec:	d054      	beq.n	8006198 <_dtoa_r+0x5b0>
 80060ee:	2000      	movs	r0, #0
 80060f0:	4928      	ldr	r1, [pc, #160]	; (8006194 <_dtoa_r+0x5ac>)
 80060f2:	f7fa fb1b 	bl	800072c <__aeabi_ddiv>
 80060f6:	463b      	mov	r3, r7
 80060f8:	4632      	mov	r2, r6
 80060fa:	f7fa f835 	bl	8000168 <__aeabi_dsub>
 80060fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006102:	9f03      	ldr	r7, [sp, #12]
 8006104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006108:	f7fa fc96 	bl	8000a38 <__aeabi_d2iz>
 800610c:	4604      	mov	r4, r0
 800610e:	f7fa f979 	bl	8000404 <__aeabi_i2d>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800611a:	f7fa f825 	bl	8000168 <__aeabi_dsub>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	3430      	adds	r4, #48	; 0x30
 8006124:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800612c:	f807 4b01 	strb.w	r4, [r7], #1
 8006130:	f7fa fc44 	bl	80009bc <__aeabi_dcmplt>
 8006134:	2800      	cmp	r0, #0
 8006136:	d173      	bne.n	8006220 <_dtoa_r+0x638>
 8006138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800613c:	2000      	movs	r0, #0
 800613e:	4911      	ldr	r1, [pc, #68]	; (8006184 <_dtoa_r+0x59c>)
 8006140:	f7fa f812 	bl	8000168 <__aeabi_dsub>
 8006144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006148:	f7fa fc38 	bl	80009bc <__aeabi_dcmplt>
 800614c:	2800      	cmp	r0, #0
 800614e:	f040 80b6 	bne.w	80062be <_dtoa_r+0x6d6>
 8006152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006154:	429f      	cmp	r7, r3
 8006156:	f43f af7a 	beq.w	800604e <_dtoa_r+0x466>
 800615a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800615e:	2200      	movs	r2, #0
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <_dtoa_r+0x5a0>)
 8006162:	f7fa f9b9 	bl	80004d8 <__aeabi_dmul>
 8006166:	2200      	movs	r2, #0
 8006168:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800616c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <_dtoa_r+0x5a0>)
 8006172:	f7fa f9b1 	bl	80004d8 <__aeabi_dmul>
 8006176:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800617a:	e7c3      	b.n	8006104 <_dtoa_r+0x51c>
 800617c:	080079d8 	.word	0x080079d8
 8006180:	080079b0 	.word	0x080079b0
 8006184:	3ff00000 	.word	0x3ff00000
 8006188:	40240000 	.word	0x40240000
 800618c:	401c0000 	.word	0x401c0000
 8006190:	40140000 	.word	0x40140000
 8006194:	3fe00000 	.word	0x3fe00000
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	f7fa f99c 	bl	80004d8 <__aeabi_dmul>
 80061a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061a6:	9c03      	ldr	r4, [sp, #12]
 80061a8:	9314      	str	r3, [sp, #80]	; 0x50
 80061aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061ae:	f7fa fc43 	bl	8000a38 <__aeabi_d2iz>
 80061b2:	9015      	str	r0, [sp, #84]	; 0x54
 80061b4:	f7fa f926 	bl	8000404 <__aeabi_i2d>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061c0:	f7f9 ffd2 	bl	8000168 <__aeabi_dsub>
 80061c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061c6:	4606      	mov	r6, r0
 80061c8:	3330      	adds	r3, #48	; 0x30
 80061ca:	f804 3b01 	strb.w	r3, [r4], #1
 80061ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061d0:	460f      	mov	r7, r1
 80061d2:	429c      	cmp	r4, r3
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	d124      	bne.n	8006224 <_dtoa_r+0x63c>
 80061da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061de:	4baf      	ldr	r3, [pc, #700]	; (800649c <_dtoa_r+0x8b4>)
 80061e0:	f7f9 ffc4 	bl	800016c <__adddf3>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4630      	mov	r0, r6
 80061ea:	4639      	mov	r1, r7
 80061ec:	f7fa fc04 	bl	80009f8 <__aeabi_dcmpgt>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d163      	bne.n	80062bc <_dtoa_r+0x6d4>
 80061f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061f8:	2000      	movs	r0, #0
 80061fa:	49a8      	ldr	r1, [pc, #672]	; (800649c <_dtoa_r+0x8b4>)
 80061fc:	f7f9 ffb4 	bl	8000168 <__aeabi_dsub>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4630      	mov	r0, r6
 8006206:	4639      	mov	r1, r7
 8006208:	f7fa fbd8 	bl	80009bc <__aeabi_dcmplt>
 800620c:	2800      	cmp	r0, #0
 800620e:	f43f af1e 	beq.w	800604e <_dtoa_r+0x466>
 8006212:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006214:	1e7b      	subs	r3, r7, #1
 8006216:	9314      	str	r3, [sp, #80]	; 0x50
 8006218:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d0f8      	beq.n	8006212 <_dtoa_r+0x62a>
 8006220:	46c3      	mov	fp, r8
 8006222:	e03b      	b.n	800629c <_dtoa_r+0x6b4>
 8006224:	4b9e      	ldr	r3, [pc, #632]	; (80064a0 <_dtoa_r+0x8b8>)
 8006226:	f7fa f957 	bl	80004d8 <__aeabi_dmul>
 800622a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800622e:	e7bc      	b.n	80061aa <_dtoa_r+0x5c2>
 8006230:	9f03      	ldr	r7, [sp, #12]
 8006232:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800623a:	4640      	mov	r0, r8
 800623c:	4649      	mov	r1, r9
 800623e:	f7fa fa75 	bl	800072c <__aeabi_ddiv>
 8006242:	f7fa fbf9 	bl	8000a38 <__aeabi_d2iz>
 8006246:	4604      	mov	r4, r0
 8006248:	f7fa f8dc 	bl	8000404 <__aeabi_i2d>
 800624c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006250:	f7fa f942 	bl	80004d8 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4640      	mov	r0, r8
 800625a:	4649      	mov	r1, r9
 800625c:	f7f9 ff84 	bl	8000168 <__aeabi_dsub>
 8006260:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006264:	f807 6b01 	strb.w	r6, [r7], #1
 8006268:	9e03      	ldr	r6, [sp, #12]
 800626a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800626e:	1bbe      	subs	r6, r7, r6
 8006270:	45b4      	cmp	ip, r6
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	d136      	bne.n	80062e6 <_dtoa_r+0x6fe>
 8006278:	f7f9 ff78 	bl	800016c <__adddf3>
 800627c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006280:	4680      	mov	r8, r0
 8006282:	4689      	mov	r9, r1
 8006284:	f7fa fbb8 	bl	80009f8 <__aeabi_dcmpgt>
 8006288:	bb58      	cbnz	r0, 80062e2 <_dtoa_r+0x6fa>
 800628a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800628e:	4640      	mov	r0, r8
 8006290:	4649      	mov	r1, r9
 8006292:	f7fa fb89 	bl	80009a8 <__aeabi_dcmpeq>
 8006296:	b108      	cbz	r0, 800629c <_dtoa_r+0x6b4>
 8006298:	07e3      	lsls	r3, r4, #31
 800629a:	d422      	bmi.n	80062e2 <_dtoa_r+0x6fa>
 800629c:	4651      	mov	r1, sl
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 fbc2 	bl	8006a28 <_Bfree>
 80062a4:	2300      	movs	r3, #0
 80062a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062a8:	703b      	strb	r3, [r7, #0]
 80062aa:	f10b 0301 	add.w	r3, fp, #1
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f43f ace6 	beq.w	8005c84 <_dtoa_r+0x9c>
 80062b8:	601f      	str	r7, [r3, #0]
 80062ba:	e4e3      	b.n	8005c84 <_dtoa_r+0x9c>
 80062bc:	4627      	mov	r7, r4
 80062be:	463b      	mov	r3, r7
 80062c0:	461f      	mov	r7, r3
 80062c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062c6:	2a39      	cmp	r2, #57	; 0x39
 80062c8:	d107      	bne.n	80062da <_dtoa_r+0x6f2>
 80062ca:	9a03      	ldr	r2, [sp, #12]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1f7      	bne.n	80062c0 <_dtoa_r+0x6d8>
 80062d0:	2230      	movs	r2, #48	; 0x30
 80062d2:	9903      	ldr	r1, [sp, #12]
 80062d4:	f108 0801 	add.w	r8, r8, #1
 80062d8:	700a      	strb	r2, [r1, #0]
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	3201      	adds	r2, #1
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e79e      	b.n	8006220 <_dtoa_r+0x638>
 80062e2:	46d8      	mov	r8, fp
 80062e4:	e7eb      	b.n	80062be <_dtoa_r+0x6d6>
 80062e6:	2200      	movs	r2, #0
 80062e8:	4b6d      	ldr	r3, [pc, #436]	; (80064a0 <_dtoa_r+0x8b8>)
 80062ea:	f7fa f8f5 	bl	80004d8 <__aeabi_dmul>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4680      	mov	r8, r0
 80062f4:	4689      	mov	r9, r1
 80062f6:	f7fa fb57 	bl	80009a8 <__aeabi_dcmpeq>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d09b      	beq.n	8006236 <_dtoa_r+0x64e>
 80062fe:	e7cd      	b.n	800629c <_dtoa_r+0x6b4>
 8006300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006302:	2a00      	cmp	r2, #0
 8006304:	f000 80c4 	beq.w	8006490 <_dtoa_r+0x8a8>
 8006308:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800630a:	2a01      	cmp	r2, #1
 800630c:	f300 80a8 	bgt.w	8006460 <_dtoa_r+0x878>
 8006310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006312:	2a00      	cmp	r2, #0
 8006314:	f000 80a0 	beq.w	8006458 <_dtoa_r+0x870>
 8006318:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800631c:	464f      	mov	r7, r9
 800631e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006322:	2101      	movs	r1, #1
 8006324:	441a      	add	r2, r3
 8006326:	4628      	mov	r0, r5
 8006328:	4499      	add	r9, r3
 800632a:	9209      	str	r2, [sp, #36]	; 0x24
 800632c:	f000 fc32 	bl	8006b94 <__i2b>
 8006330:	4606      	mov	r6, r0
 8006332:	b15f      	cbz	r7, 800634c <_dtoa_r+0x764>
 8006334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	dd08      	ble.n	800634c <_dtoa_r+0x764>
 800633a:	42bb      	cmp	r3, r7
 800633c:	bfa8      	it	ge
 800633e:	463b      	movge	r3, r7
 8006340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006342:	eba9 0903 	sub.w	r9, r9, r3
 8006346:	1aff      	subs	r7, r7, r3
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	9309      	str	r3, [sp, #36]	; 0x24
 800634c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800634e:	b1f3      	cbz	r3, 800638e <_dtoa_r+0x7a6>
 8006350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80a0 	beq.w	8006498 <_dtoa_r+0x8b0>
 8006358:	2c00      	cmp	r4, #0
 800635a:	dd10      	ble.n	800637e <_dtoa_r+0x796>
 800635c:	4631      	mov	r1, r6
 800635e:	4622      	mov	r2, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 fcd5 	bl	8006d10 <__pow5mult>
 8006366:	4652      	mov	r2, sl
 8006368:	4601      	mov	r1, r0
 800636a:	4606      	mov	r6, r0
 800636c:	4628      	mov	r0, r5
 800636e:	f000 fc27 	bl	8006bc0 <__multiply>
 8006372:	4680      	mov	r8, r0
 8006374:	4651      	mov	r1, sl
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fb56 	bl	8006a28 <_Bfree>
 800637c:	46c2      	mov	sl, r8
 800637e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006380:	1b1a      	subs	r2, r3, r4
 8006382:	d004      	beq.n	800638e <_dtoa_r+0x7a6>
 8006384:	4651      	mov	r1, sl
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fcc2 	bl	8006d10 <__pow5mult>
 800638c:	4682      	mov	sl, r0
 800638e:	2101      	movs	r1, #1
 8006390:	4628      	mov	r0, r5
 8006392:	f000 fbff 	bl	8006b94 <__i2b>
 8006396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006398:	4604      	mov	r4, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f340 8082 	ble.w	80064a4 <_dtoa_r+0x8bc>
 80063a0:	461a      	mov	r2, r3
 80063a2:	4601      	mov	r1, r0
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 fcb3 	bl	8006d10 <__pow5mult>
 80063aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063ac:	4604      	mov	r4, r0
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	dd7b      	ble.n	80064aa <_dtoa_r+0x8c2>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063bc:	6918      	ldr	r0, [r3, #16]
 80063be:	f000 fb9b 	bl	8006af8 <__hi0bits>
 80063c2:	f1c0 0020 	rsb	r0, r0, #32
 80063c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c8:	4418      	add	r0, r3
 80063ca:	f010 001f 	ands.w	r0, r0, #31
 80063ce:	f000 8092 	beq.w	80064f6 <_dtoa_r+0x90e>
 80063d2:	f1c0 0320 	rsb	r3, r0, #32
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	f340 8085 	ble.w	80064e6 <_dtoa_r+0x8fe>
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	f1c0 001c 	rsb	r0, r0, #28
 80063e2:	4403      	add	r3, r0
 80063e4:	4481      	add	r9, r0
 80063e6:	4407      	add	r7, r0
 80063e8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ea:	f1b9 0f00 	cmp.w	r9, #0
 80063ee:	dd05      	ble.n	80063fc <_dtoa_r+0x814>
 80063f0:	4651      	mov	r1, sl
 80063f2:	464a      	mov	r2, r9
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 fce5 	bl	8006dc4 <__lshift>
 80063fa:	4682      	mov	sl, r0
 80063fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd05      	ble.n	800640e <_dtoa_r+0x826>
 8006402:	4621      	mov	r1, r4
 8006404:	461a      	mov	r2, r3
 8006406:	4628      	mov	r0, r5
 8006408:	f000 fcdc 	bl	8006dc4 <__lshift>
 800640c:	4604      	mov	r4, r0
 800640e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d072      	beq.n	80064fa <_dtoa_r+0x912>
 8006414:	4621      	mov	r1, r4
 8006416:	4650      	mov	r0, sl
 8006418:	f000 fd40 	bl	8006e9c <__mcmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	da6c      	bge.n	80064fa <_dtoa_r+0x912>
 8006420:	2300      	movs	r3, #0
 8006422:	4651      	mov	r1, sl
 8006424:	220a      	movs	r2, #10
 8006426:	4628      	mov	r0, r5
 8006428:	f000 fb20 	bl	8006a6c <__multadd>
 800642c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800642e:	4682      	mov	sl, r0
 8006430:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 81ac 	beq.w	8006792 <_dtoa_r+0xbaa>
 800643a:	2300      	movs	r3, #0
 800643c:	4631      	mov	r1, r6
 800643e:	220a      	movs	r2, #10
 8006440:	4628      	mov	r0, r5
 8006442:	f000 fb13 	bl	8006a6c <__multadd>
 8006446:	9b06      	ldr	r3, [sp, #24]
 8006448:	4606      	mov	r6, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	f300 8093 	bgt.w	8006576 <_dtoa_r+0x98e>
 8006450:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006452:	2b02      	cmp	r3, #2
 8006454:	dc59      	bgt.n	800650a <_dtoa_r+0x922>
 8006456:	e08e      	b.n	8006576 <_dtoa_r+0x98e>
 8006458:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800645a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800645e:	e75d      	b.n	800631c <_dtoa_r+0x734>
 8006460:	9b08      	ldr	r3, [sp, #32]
 8006462:	1e5c      	subs	r4, r3, #1
 8006464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006466:	42a3      	cmp	r3, r4
 8006468:	bfbf      	itttt	lt
 800646a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800646c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800646e:	1ae3      	sublt	r3, r4, r3
 8006470:	18d2      	addlt	r2, r2, r3
 8006472:	bfa8      	it	ge
 8006474:	1b1c      	subge	r4, r3, r4
 8006476:	9b08      	ldr	r3, [sp, #32]
 8006478:	bfbe      	ittt	lt
 800647a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800647c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800647e:	2400      	movlt	r4, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	bfb5      	itete	lt
 8006484:	eba9 0703 	sublt.w	r7, r9, r3
 8006488:	464f      	movge	r7, r9
 800648a:	2300      	movlt	r3, #0
 800648c:	9b08      	ldrge	r3, [sp, #32]
 800648e:	e747      	b.n	8006320 <_dtoa_r+0x738>
 8006490:	464f      	mov	r7, r9
 8006492:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006494:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006496:	e74c      	b.n	8006332 <_dtoa_r+0x74a>
 8006498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800649a:	e773      	b.n	8006384 <_dtoa_r+0x79c>
 800649c:	3fe00000 	.word	0x3fe00000
 80064a0:	40240000 	.word	0x40240000
 80064a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	dc18      	bgt.n	80064dc <_dtoa_r+0x8f4>
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	b9b3      	cbnz	r3, 80064dc <_dtoa_r+0x8f4>
 80064ae:	9b05      	ldr	r3, [sp, #20]
 80064b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b4:	b993      	cbnz	r3, 80064dc <_dtoa_r+0x8f4>
 80064b6:	9b05      	ldr	r3, [sp, #20]
 80064b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	0d1b      	lsrs	r3, r3, #20
 80064be:	051b      	lsls	r3, r3, #20
 80064c0:	b17b      	cbz	r3, 80064e2 <_dtoa_r+0x8fa>
 80064c2:	f04f 0801 	mov.w	r8, #1
 80064c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c8:	f109 0901 	add.w	r9, r9, #1
 80064cc:	3301      	adds	r3, #1
 80064ce:	9309      	str	r3, [sp, #36]	; 0x24
 80064d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f47f af6f 	bne.w	80063b6 <_dtoa_r+0x7ce>
 80064d8:	2001      	movs	r0, #1
 80064da:	e774      	b.n	80063c6 <_dtoa_r+0x7de>
 80064dc:	f04f 0800 	mov.w	r8, #0
 80064e0:	e7f6      	b.n	80064d0 <_dtoa_r+0x8e8>
 80064e2:	4698      	mov	r8, r3
 80064e4:	e7f4      	b.n	80064d0 <_dtoa_r+0x8e8>
 80064e6:	d080      	beq.n	80063ea <_dtoa_r+0x802>
 80064e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ea:	331c      	adds	r3, #28
 80064ec:	441a      	add	r2, r3
 80064ee:	4499      	add	r9, r3
 80064f0:	441f      	add	r7, r3
 80064f2:	9209      	str	r2, [sp, #36]	; 0x24
 80064f4:	e779      	b.n	80063ea <_dtoa_r+0x802>
 80064f6:	4603      	mov	r3, r0
 80064f8:	e7f6      	b.n	80064e8 <_dtoa_r+0x900>
 80064fa:	9b08      	ldr	r3, [sp, #32]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dc34      	bgt.n	800656a <_dtoa_r+0x982>
 8006500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006502:	2b02      	cmp	r3, #2
 8006504:	dd31      	ble.n	800656a <_dtoa_r+0x982>
 8006506:	9b08      	ldr	r3, [sp, #32]
 8006508:	9306      	str	r3, [sp, #24]
 800650a:	9b06      	ldr	r3, [sp, #24]
 800650c:	b963      	cbnz	r3, 8006528 <_dtoa_r+0x940>
 800650e:	4621      	mov	r1, r4
 8006510:	2205      	movs	r2, #5
 8006512:	4628      	mov	r0, r5
 8006514:	f000 faaa 	bl	8006a6c <__multadd>
 8006518:	4601      	mov	r1, r0
 800651a:	4604      	mov	r4, r0
 800651c:	4650      	mov	r0, sl
 800651e:	f000 fcbd 	bl	8006e9c <__mcmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	f73f adbf 	bgt.w	80060a6 <_dtoa_r+0x4be>
 8006528:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800652a:	9f03      	ldr	r7, [sp, #12]
 800652c:	ea6f 0b03 	mvn.w	fp, r3
 8006530:	f04f 0800 	mov.w	r8, #0
 8006534:	4621      	mov	r1, r4
 8006536:	4628      	mov	r0, r5
 8006538:	f000 fa76 	bl	8006a28 <_Bfree>
 800653c:	2e00      	cmp	r6, #0
 800653e:	f43f aead 	beq.w	800629c <_dtoa_r+0x6b4>
 8006542:	f1b8 0f00 	cmp.w	r8, #0
 8006546:	d005      	beq.n	8006554 <_dtoa_r+0x96c>
 8006548:	45b0      	cmp	r8, r6
 800654a:	d003      	beq.n	8006554 <_dtoa_r+0x96c>
 800654c:	4641      	mov	r1, r8
 800654e:	4628      	mov	r0, r5
 8006550:	f000 fa6a 	bl	8006a28 <_Bfree>
 8006554:	4631      	mov	r1, r6
 8006556:	4628      	mov	r0, r5
 8006558:	f000 fa66 	bl	8006a28 <_Bfree>
 800655c:	e69e      	b.n	800629c <_dtoa_r+0x6b4>
 800655e:	2400      	movs	r4, #0
 8006560:	4626      	mov	r6, r4
 8006562:	e7e1      	b.n	8006528 <_dtoa_r+0x940>
 8006564:	46c3      	mov	fp, r8
 8006566:	4626      	mov	r6, r4
 8006568:	e59d      	b.n	80060a6 <_dtoa_r+0x4be>
 800656a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80c8 	beq.w	8006702 <_dtoa_r+0xb1a>
 8006572:	9b08      	ldr	r3, [sp, #32]
 8006574:	9306      	str	r3, [sp, #24]
 8006576:	2f00      	cmp	r7, #0
 8006578:	dd05      	ble.n	8006586 <_dtoa_r+0x99e>
 800657a:	4631      	mov	r1, r6
 800657c:	463a      	mov	r2, r7
 800657e:	4628      	mov	r0, r5
 8006580:	f000 fc20 	bl	8006dc4 <__lshift>
 8006584:	4606      	mov	r6, r0
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	d05b      	beq.n	8006644 <_dtoa_r+0xa5c>
 800658c:	4628      	mov	r0, r5
 800658e:	6871      	ldr	r1, [r6, #4]
 8006590:	f000 fa0a 	bl	80069a8 <_Balloc>
 8006594:	4607      	mov	r7, r0
 8006596:	b928      	cbnz	r0, 80065a4 <_dtoa_r+0x9bc>
 8006598:	4602      	mov	r2, r0
 800659a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800659e:	4b81      	ldr	r3, [pc, #516]	; (80067a4 <_dtoa_r+0xbbc>)
 80065a0:	f7ff bb36 	b.w	8005c10 <_dtoa_r+0x28>
 80065a4:	6932      	ldr	r2, [r6, #16]
 80065a6:	f106 010c 	add.w	r1, r6, #12
 80065aa:	3202      	adds	r2, #2
 80065ac:	0092      	lsls	r2, r2, #2
 80065ae:	300c      	adds	r0, #12
 80065b0:	f000 fe2c 	bl	800720c <memcpy>
 80065b4:	2201      	movs	r2, #1
 80065b6:	4639      	mov	r1, r7
 80065b8:	4628      	mov	r0, r5
 80065ba:	f000 fc03 	bl	8006dc4 <__lshift>
 80065be:	46b0      	mov	r8, r6
 80065c0:	4606      	mov	r6, r0
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	9a03      	ldr	r2, [sp, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	9308      	str	r3, [sp, #32]
 80065ca:	9b06      	ldr	r3, [sp, #24]
 80065cc:	4413      	add	r3, r2
 80065ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d0:	9b04      	ldr	r3, [sp, #16]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	930a      	str	r3, [sp, #40]	; 0x28
 80065d8:	9b08      	ldr	r3, [sp, #32]
 80065da:	4621      	mov	r1, r4
 80065dc:	3b01      	subs	r3, #1
 80065de:	4650      	mov	r0, sl
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	f7ff fa76 	bl	8005ad2 <quorem>
 80065e6:	4641      	mov	r1, r8
 80065e8:	9006      	str	r0, [sp, #24]
 80065ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065ee:	4650      	mov	r0, sl
 80065f0:	f000 fc54 	bl	8006e9c <__mcmp>
 80065f4:	4632      	mov	r2, r6
 80065f6:	9009      	str	r0, [sp, #36]	; 0x24
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 fc6a 	bl	8006ed4 <__mdiff>
 8006600:	68c2      	ldr	r2, [r0, #12]
 8006602:	4607      	mov	r7, r0
 8006604:	bb02      	cbnz	r2, 8006648 <_dtoa_r+0xa60>
 8006606:	4601      	mov	r1, r0
 8006608:	4650      	mov	r0, sl
 800660a:	f000 fc47 	bl	8006e9c <__mcmp>
 800660e:	4602      	mov	r2, r0
 8006610:	4639      	mov	r1, r7
 8006612:	4628      	mov	r0, r5
 8006614:	920c      	str	r2, [sp, #48]	; 0x30
 8006616:	f000 fa07 	bl	8006a28 <_Bfree>
 800661a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800661c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800661e:	9f08      	ldr	r7, [sp, #32]
 8006620:	ea43 0102 	orr.w	r1, r3, r2
 8006624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006626:	4319      	orrs	r1, r3
 8006628:	d110      	bne.n	800664c <_dtoa_r+0xa64>
 800662a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800662e:	d029      	beq.n	8006684 <_dtoa_r+0xa9c>
 8006630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	dd02      	ble.n	800663c <_dtoa_r+0xa54>
 8006636:	9b06      	ldr	r3, [sp, #24]
 8006638:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800663c:	9b04      	ldr	r3, [sp, #16]
 800663e:	f883 9000 	strb.w	r9, [r3]
 8006642:	e777      	b.n	8006534 <_dtoa_r+0x94c>
 8006644:	4630      	mov	r0, r6
 8006646:	e7ba      	b.n	80065be <_dtoa_r+0x9d6>
 8006648:	2201      	movs	r2, #1
 800664a:	e7e1      	b.n	8006610 <_dtoa_r+0xa28>
 800664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	db04      	blt.n	800665c <_dtoa_r+0xa74>
 8006652:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006654:	430b      	orrs	r3, r1
 8006656:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006658:	430b      	orrs	r3, r1
 800665a:	d120      	bne.n	800669e <_dtoa_r+0xab6>
 800665c:	2a00      	cmp	r2, #0
 800665e:	dded      	ble.n	800663c <_dtoa_r+0xa54>
 8006660:	4651      	mov	r1, sl
 8006662:	2201      	movs	r2, #1
 8006664:	4628      	mov	r0, r5
 8006666:	f000 fbad 	bl	8006dc4 <__lshift>
 800666a:	4621      	mov	r1, r4
 800666c:	4682      	mov	sl, r0
 800666e:	f000 fc15 	bl	8006e9c <__mcmp>
 8006672:	2800      	cmp	r0, #0
 8006674:	dc03      	bgt.n	800667e <_dtoa_r+0xa96>
 8006676:	d1e1      	bne.n	800663c <_dtoa_r+0xa54>
 8006678:	f019 0f01 	tst.w	r9, #1
 800667c:	d0de      	beq.n	800663c <_dtoa_r+0xa54>
 800667e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006682:	d1d8      	bne.n	8006636 <_dtoa_r+0xa4e>
 8006684:	2339      	movs	r3, #57	; 0x39
 8006686:	9a04      	ldr	r2, [sp, #16]
 8006688:	7013      	strb	r3, [r2, #0]
 800668a:	463b      	mov	r3, r7
 800668c:	461f      	mov	r7, r3
 800668e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006692:	3b01      	subs	r3, #1
 8006694:	2a39      	cmp	r2, #57	; 0x39
 8006696:	d06b      	beq.n	8006770 <_dtoa_r+0xb88>
 8006698:	3201      	adds	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e74a      	b.n	8006534 <_dtoa_r+0x94c>
 800669e:	2a00      	cmp	r2, #0
 80066a0:	dd07      	ble.n	80066b2 <_dtoa_r+0xaca>
 80066a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066a6:	d0ed      	beq.n	8006684 <_dtoa_r+0xa9c>
 80066a8:	9a04      	ldr	r2, [sp, #16]
 80066aa:	f109 0301 	add.w	r3, r9, #1
 80066ae:	7013      	strb	r3, [r2, #0]
 80066b0:	e740      	b.n	8006534 <_dtoa_r+0x94c>
 80066b2:	9b08      	ldr	r3, [sp, #32]
 80066b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066b6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d042      	beq.n	8006744 <_dtoa_r+0xb5c>
 80066be:	4651      	mov	r1, sl
 80066c0:	2300      	movs	r3, #0
 80066c2:	220a      	movs	r2, #10
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 f9d1 	bl	8006a6c <__multadd>
 80066ca:	45b0      	cmp	r8, r6
 80066cc:	4682      	mov	sl, r0
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	f04f 020a 	mov.w	r2, #10
 80066d6:	4641      	mov	r1, r8
 80066d8:	4628      	mov	r0, r5
 80066da:	d107      	bne.n	80066ec <_dtoa_r+0xb04>
 80066dc:	f000 f9c6 	bl	8006a6c <__multadd>
 80066e0:	4680      	mov	r8, r0
 80066e2:	4606      	mov	r6, r0
 80066e4:	9b08      	ldr	r3, [sp, #32]
 80066e6:	3301      	adds	r3, #1
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	e775      	b.n	80065d8 <_dtoa_r+0x9f0>
 80066ec:	f000 f9be 	bl	8006a6c <__multadd>
 80066f0:	4631      	mov	r1, r6
 80066f2:	4680      	mov	r8, r0
 80066f4:	2300      	movs	r3, #0
 80066f6:	220a      	movs	r2, #10
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 f9b7 	bl	8006a6c <__multadd>
 80066fe:	4606      	mov	r6, r0
 8006700:	e7f0      	b.n	80066e4 <_dtoa_r+0xafc>
 8006702:	9b08      	ldr	r3, [sp, #32]
 8006704:	9306      	str	r3, [sp, #24]
 8006706:	9f03      	ldr	r7, [sp, #12]
 8006708:	4621      	mov	r1, r4
 800670a:	4650      	mov	r0, sl
 800670c:	f7ff f9e1 	bl	8005ad2 <quorem>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006716:	f807 9b01 	strb.w	r9, [r7], #1
 800671a:	1afa      	subs	r2, r7, r3
 800671c:	9b06      	ldr	r3, [sp, #24]
 800671e:	4293      	cmp	r3, r2
 8006720:	dd07      	ble.n	8006732 <_dtoa_r+0xb4a>
 8006722:	4651      	mov	r1, sl
 8006724:	2300      	movs	r3, #0
 8006726:	220a      	movs	r2, #10
 8006728:	4628      	mov	r0, r5
 800672a:	f000 f99f 	bl	8006a6c <__multadd>
 800672e:	4682      	mov	sl, r0
 8006730:	e7ea      	b.n	8006708 <_dtoa_r+0xb20>
 8006732:	9b06      	ldr	r3, [sp, #24]
 8006734:	f04f 0800 	mov.w	r8, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	bfcc      	ite	gt
 800673c:	461f      	movgt	r7, r3
 800673e:	2701      	movle	r7, #1
 8006740:	9b03      	ldr	r3, [sp, #12]
 8006742:	441f      	add	r7, r3
 8006744:	4651      	mov	r1, sl
 8006746:	2201      	movs	r2, #1
 8006748:	4628      	mov	r0, r5
 800674a:	f000 fb3b 	bl	8006dc4 <__lshift>
 800674e:	4621      	mov	r1, r4
 8006750:	4682      	mov	sl, r0
 8006752:	f000 fba3 	bl	8006e9c <__mcmp>
 8006756:	2800      	cmp	r0, #0
 8006758:	dc97      	bgt.n	800668a <_dtoa_r+0xaa2>
 800675a:	d102      	bne.n	8006762 <_dtoa_r+0xb7a>
 800675c:	f019 0f01 	tst.w	r9, #1
 8006760:	d193      	bne.n	800668a <_dtoa_r+0xaa2>
 8006762:	463b      	mov	r3, r7
 8006764:	461f      	mov	r7, r3
 8006766:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800676a:	2a30      	cmp	r2, #48	; 0x30
 800676c:	d0fa      	beq.n	8006764 <_dtoa_r+0xb7c>
 800676e:	e6e1      	b.n	8006534 <_dtoa_r+0x94c>
 8006770:	9a03      	ldr	r2, [sp, #12]
 8006772:	429a      	cmp	r2, r3
 8006774:	d18a      	bne.n	800668c <_dtoa_r+0xaa4>
 8006776:	2331      	movs	r3, #49	; 0x31
 8006778:	f10b 0b01 	add.w	fp, fp, #1
 800677c:	e797      	b.n	80066ae <_dtoa_r+0xac6>
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <_dtoa_r+0xbc0>)
 8006780:	f7ff ba9f 	b.w	8005cc2 <_dtoa_r+0xda>
 8006784:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006786:	2b00      	cmp	r3, #0
 8006788:	f47f aa77 	bne.w	8005c7a <_dtoa_r+0x92>
 800678c:	4b07      	ldr	r3, [pc, #28]	; (80067ac <_dtoa_r+0xbc4>)
 800678e:	f7ff ba98 	b.w	8005cc2 <_dtoa_r+0xda>
 8006792:	9b06      	ldr	r3, [sp, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dcb6      	bgt.n	8006706 <_dtoa_r+0xb1e>
 8006798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800679a:	2b02      	cmp	r3, #2
 800679c:	f73f aeb5 	bgt.w	800650a <_dtoa_r+0x922>
 80067a0:	e7b1      	b.n	8006706 <_dtoa_r+0xb1e>
 80067a2:	bf00      	nop
 80067a4:	08007946 	.word	0x08007946
 80067a8:	080078a6 	.word	0x080078a6
 80067ac:	080078ca 	.word	0x080078ca

080067b0 <_free_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4605      	mov	r5, r0
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d040      	beq.n	800683a <_free_r+0x8a>
 80067b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067bc:	1f0c      	subs	r4, r1, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bfb8      	it	lt
 80067c2:	18e4      	addlt	r4, r4, r3
 80067c4:	f000 f8e4 	bl	8006990 <__malloc_lock>
 80067c8:	4a1c      	ldr	r2, [pc, #112]	; (800683c <_free_r+0x8c>)
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	b933      	cbnz	r3, 80067dc <_free_r+0x2c>
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	4628      	mov	r0, r5
 80067d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067d8:	f000 b8e0 	b.w	800699c <__malloc_unlock>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d908      	bls.n	80067f2 <_free_r+0x42>
 80067e0:	6820      	ldr	r0, [r4, #0]
 80067e2:	1821      	adds	r1, r4, r0
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf01      	itttt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	1809      	addeq	r1, r1, r0
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	e7ed      	b.n	80067ce <_free_r+0x1e>
 80067f2:	461a      	mov	r2, r3
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	b10b      	cbz	r3, 80067fc <_free_r+0x4c>
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	d9fa      	bls.n	80067f2 <_free_r+0x42>
 80067fc:	6811      	ldr	r1, [r2, #0]
 80067fe:	1850      	adds	r0, r2, r1
 8006800:	42a0      	cmp	r0, r4
 8006802:	d10b      	bne.n	800681c <_free_r+0x6c>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	4401      	add	r1, r0
 8006808:	1850      	adds	r0, r2, r1
 800680a:	4283      	cmp	r3, r0
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	d1e0      	bne.n	80067d2 <_free_r+0x22>
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4408      	add	r0, r1
 8006816:	6010      	str	r0, [r2, #0]
 8006818:	6053      	str	r3, [r2, #4]
 800681a:	e7da      	b.n	80067d2 <_free_r+0x22>
 800681c:	d902      	bls.n	8006824 <_free_r+0x74>
 800681e:	230c      	movs	r3, #12
 8006820:	602b      	str	r3, [r5, #0]
 8006822:	e7d6      	b.n	80067d2 <_free_r+0x22>
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	1821      	adds	r1, r4, r0
 8006828:	428b      	cmp	r3, r1
 800682a:	bf01      	itttt	eq
 800682c:	6819      	ldreq	r1, [r3, #0]
 800682e:	685b      	ldreq	r3, [r3, #4]
 8006830:	1809      	addeq	r1, r1, r0
 8006832:	6021      	streq	r1, [r4, #0]
 8006834:	6063      	str	r3, [r4, #4]
 8006836:	6054      	str	r4, [r2, #4]
 8006838:	e7cb      	b.n	80067d2 <_free_r+0x22>
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	20000520 	.word	0x20000520

08006840 <malloc>:
 8006840:	4b02      	ldr	r3, [pc, #8]	; (800684c <malloc+0xc>)
 8006842:	4601      	mov	r1, r0
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	f000 b823 	b.w	8006890 <_malloc_r>
 800684a:	bf00      	nop
 800684c:	20000078 	.word	0x20000078

08006850 <sbrk_aligned>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4e0e      	ldr	r6, [pc, #56]	; (800688c <sbrk_aligned+0x3c>)
 8006854:	460c      	mov	r4, r1
 8006856:	6831      	ldr	r1, [r6, #0]
 8006858:	4605      	mov	r5, r0
 800685a:	b911      	cbnz	r1, 8006862 <sbrk_aligned+0x12>
 800685c:	f000 fcc6 	bl	80071ec <_sbrk_r>
 8006860:	6030      	str	r0, [r6, #0]
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 fcc1 	bl	80071ec <_sbrk_r>
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	d00a      	beq.n	8006884 <sbrk_aligned+0x34>
 800686e:	1cc4      	adds	r4, r0, #3
 8006870:	f024 0403 	bic.w	r4, r4, #3
 8006874:	42a0      	cmp	r0, r4
 8006876:	d007      	beq.n	8006888 <sbrk_aligned+0x38>
 8006878:	1a21      	subs	r1, r4, r0
 800687a:	4628      	mov	r0, r5
 800687c:	f000 fcb6 	bl	80071ec <_sbrk_r>
 8006880:	3001      	adds	r0, #1
 8006882:	d101      	bne.n	8006888 <sbrk_aligned+0x38>
 8006884:	f04f 34ff 	mov.w	r4, #4294967295
 8006888:	4620      	mov	r0, r4
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	20000524 	.word	0x20000524

08006890 <_malloc_r>:
 8006890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006894:	1ccd      	adds	r5, r1, #3
 8006896:	f025 0503 	bic.w	r5, r5, #3
 800689a:	3508      	adds	r5, #8
 800689c:	2d0c      	cmp	r5, #12
 800689e:	bf38      	it	cc
 80068a0:	250c      	movcc	r5, #12
 80068a2:	2d00      	cmp	r5, #0
 80068a4:	4607      	mov	r7, r0
 80068a6:	db01      	blt.n	80068ac <_malloc_r+0x1c>
 80068a8:	42a9      	cmp	r1, r5
 80068aa:	d905      	bls.n	80068b8 <_malloc_r+0x28>
 80068ac:	230c      	movs	r3, #12
 80068ae:	2600      	movs	r6, #0
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4630      	mov	r0, r6
 80068b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800698c <_malloc_r+0xfc>
 80068bc:	f000 f868 	bl	8006990 <__malloc_lock>
 80068c0:	f8d8 3000 	ldr.w	r3, [r8]
 80068c4:	461c      	mov	r4, r3
 80068c6:	bb5c      	cbnz	r4, 8006920 <_malloc_r+0x90>
 80068c8:	4629      	mov	r1, r5
 80068ca:	4638      	mov	r0, r7
 80068cc:	f7ff ffc0 	bl	8006850 <sbrk_aligned>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	4604      	mov	r4, r0
 80068d4:	d155      	bne.n	8006982 <_malloc_r+0xf2>
 80068d6:	f8d8 4000 	ldr.w	r4, [r8]
 80068da:	4626      	mov	r6, r4
 80068dc:	2e00      	cmp	r6, #0
 80068de:	d145      	bne.n	800696c <_malloc_r+0xdc>
 80068e0:	2c00      	cmp	r4, #0
 80068e2:	d048      	beq.n	8006976 <_malloc_r+0xe6>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	4631      	mov	r1, r6
 80068e8:	4638      	mov	r0, r7
 80068ea:	eb04 0903 	add.w	r9, r4, r3
 80068ee:	f000 fc7d 	bl	80071ec <_sbrk_r>
 80068f2:	4581      	cmp	r9, r0
 80068f4:	d13f      	bne.n	8006976 <_malloc_r+0xe6>
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	4638      	mov	r0, r7
 80068fa:	1a6d      	subs	r5, r5, r1
 80068fc:	4629      	mov	r1, r5
 80068fe:	f7ff ffa7 	bl	8006850 <sbrk_aligned>
 8006902:	3001      	adds	r0, #1
 8006904:	d037      	beq.n	8006976 <_malloc_r+0xe6>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	442b      	add	r3, r5
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	f8d8 3000 	ldr.w	r3, [r8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d038      	beq.n	8006986 <_malloc_r+0xf6>
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	42a2      	cmp	r2, r4
 8006918:	d12b      	bne.n	8006972 <_malloc_r+0xe2>
 800691a:	2200      	movs	r2, #0
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	e00f      	b.n	8006940 <_malloc_r+0xb0>
 8006920:	6822      	ldr	r2, [r4, #0]
 8006922:	1b52      	subs	r2, r2, r5
 8006924:	d41f      	bmi.n	8006966 <_malloc_r+0xd6>
 8006926:	2a0b      	cmp	r2, #11
 8006928:	d917      	bls.n	800695a <_malloc_r+0xca>
 800692a:	1961      	adds	r1, r4, r5
 800692c:	42a3      	cmp	r3, r4
 800692e:	6025      	str	r5, [r4, #0]
 8006930:	bf18      	it	ne
 8006932:	6059      	strne	r1, [r3, #4]
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	bf08      	it	eq
 8006938:	f8c8 1000 	streq.w	r1, [r8]
 800693c:	5162      	str	r2, [r4, r5]
 800693e:	604b      	str	r3, [r1, #4]
 8006940:	4638      	mov	r0, r7
 8006942:	f104 060b 	add.w	r6, r4, #11
 8006946:	f000 f829 	bl	800699c <__malloc_unlock>
 800694a:	f026 0607 	bic.w	r6, r6, #7
 800694e:	1d23      	adds	r3, r4, #4
 8006950:	1af2      	subs	r2, r6, r3
 8006952:	d0ae      	beq.n	80068b2 <_malloc_r+0x22>
 8006954:	1b9b      	subs	r3, r3, r6
 8006956:	50a3      	str	r3, [r4, r2]
 8006958:	e7ab      	b.n	80068b2 <_malloc_r+0x22>
 800695a:	42a3      	cmp	r3, r4
 800695c:	6862      	ldr	r2, [r4, #4]
 800695e:	d1dd      	bne.n	800691c <_malloc_r+0x8c>
 8006960:	f8c8 2000 	str.w	r2, [r8]
 8006964:	e7ec      	b.n	8006940 <_malloc_r+0xb0>
 8006966:	4623      	mov	r3, r4
 8006968:	6864      	ldr	r4, [r4, #4]
 800696a:	e7ac      	b.n	80068c6 <_malloc_r+0x36>
 800696c:	4634      	mov	r4, r6
 800696e:	6876      	ldr	r6, [r6, #4]
 8006970:	e7b4      	b.n	80068dc <_malloc_r+0x4c>
 8006972:	4613      	mov	r3, r2
 8006974:	e7cc      	b.n	8006910 <_malloc_r+0x80>
 8006976:	230c      	movs	r3, #12
 8006978:	4638      	mov	r0, r7
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	f000 f80e 	bl	800699c <__malloc_unlock>
 8006980:	e797      	b.n	80068b2 <_malloc_r+0x22>
 8006982:	6025      	str	r5, [r4, #0]
 8006984:	e7dc      	b.n	8006940 <_malloc_r+0xb0>
 8006986:	605b      	str	r3, [r3, #4]
 8006988:	deff      	udf	#255	; 0xff
 800698a:	bf00      	nop
 800698c:	20000520 	.word	0x20000520

08006990 <__malloc_lock>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__malloc_lock+0x8>)
 8006992:	f7ff b88e 	b.w	8005ab2 <__retarget_lock_acquire_recursive>
 8006996:	bf00      	nop
 8006998:	2000051c 	.word	0x2000051c

0800699c <__malloc_unlock>:
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <__malloc_unlock+0x8>)
 800699e:	f7ff b889 	b.w	8005ab4 <__retarget_lock_release_recursive>
 80069a2:	bf00      	nop
 80069a4:	2000051c 	.word	0x2000051c

080069a8 <_Balloc>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	69c6      	ldr	r6, [r0, #28]
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	b976      	cbnz	r6, 80069d0 <_Balloc+0x28>
 80069b2:	2010      	movs	r0, #16
 80069b4:	f7ff ff44 	bl	8006840 <malloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	61e0      	str	r0, [r4, #28]
 80069bc:	b920      	cbnz	r0, 80069c8 <_Balloc+0x20>
 80069be:	216b      	movs	r1, #107	; 0x6b
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <_Balloc+0x78>)
 80069c2:	4818      	ldr	r0, [pc, #96]	; (8006a24 <_Balloc+0x7c>)
 80069c4:	f000 fc30 	bl	8007228 <__assert_func>
 80069c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069cc:	6006      	str	r6, [r0, #0]
 80069ce:	60c6      	str	r6, [r0, #12]
 80069d0:	69e6      	ldr	r6, [r4, #28]
 80069d2:	68f3      	ldr	r3, [r6, #12]
 80069d4:	b183      	cbz	r3, 80069f8 <_Balloc+0x50>
 80069d6:	69e3      	ldr	r3, [r4, #28]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069de:	b9b8      	cbnz	r0, 8006a10 <_Balloc+0x68>
 80069e0:	2101      	movs	r1, #1
 80069e2:	fa01 f605 	lsl.w	r6, r1, r5
 80069e6:	1d72      	adds	r2, r6, #5
 80069e8:	4620      	mov	r0, r4
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	f000 fc3a 	bl	8007264 <_calloc_r>
 80069f0:	b160      	cbz	r0, 8006a0c <_Balloc+0x64>
 80069f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069f6:	e00e      	b.n	8006a16 <_Balloc+0x6e>
 80069f8:	2221      	movs	r2, #33	; 0x21
 80069fa:	2104      	movs	r1, #4
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 fc31 	bl	8007264 <_calloc_r>
 8006a02:	69e3      	ldr	r3, [r4, #28]
 8006a04:	60f0      	str	r0, [r6, #12]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e4      	bne.n	80069d6 <_Balloc+0x2e>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	6802      	ldr	r2, [r0, #0]
 8006a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a16:	2300      	movs	r3, #0
 8006a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a1c:	e7f7      	b.n	8006a0e <_Balloc+0x66>
 8006a1e:	bf00      	nop
 8006a20:	080078d7 	.word	0x080078d7
 8006a24:	08007957 	.word	0x08007957

08006a28 <_Bfree>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	69c6      	ldr	r6, [r0, #28]
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	b976      	cbnz	r6, 8006a50 <_Bfree+0x28>
 8006a32:	2010      	movs	r0, #16
 8006a34:	f7ff ff04 	bl	8006840 <malloc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	61e8      	str	r0, [r5, #28]
 8006a3c:	b920      	cbnz	r0, 8006a48 <_Bfree+0x20>
 8006a3e:	218f      	movs	r1, #143	; 0x8f
 8006a40:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <_Bfree+0x3c>)
 8006a42:	4809      	ldr	r0, [pc, #36]	; (8006a68 <_Bfree+0x40>)
 8006a44:	f000 fbf0 	bl	8007228 <__assert_func>
 8006a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a4c:	6006      	str	r6, [r0, #0]
 8006a4e:	60c6      	str	r6, [r0, #12]
 8006a50:	b13c      	cbz	r4, 8006a62 <_Bfree+0x3a>
 8006a52:	69eb      	ldr	r3, [r5, #28]
 8006a54:	6862      	ldr	r2, [r4, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a5c:	6021      	str	r1, [r4, #0]
 8006a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	080078d7 	.word	0x080078d7
 8006a68:	08007957 	.word	0x08007957

08006a6c <__multadd>:
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	4607      	mov	r7, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	461e      	mov	r6, r3
 8006a76:	2000      	movs	r0, #0
 8006a78:	690d      	ldr	r5, [r1, #16]
 8006a7a:	f101 0c14 	add.w	ip, r1, #20
 8006a7e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a82:	3001      	adds	r0, #1
 8006a84:	b299      	uxth	r1, r3
 8006a86:	fb02 6101 	mla	r1, r2, r1, r6
 8006a8a:	0c1e      	lsrs	r6, r3, #16
 8006a8c:	0c0b      	lsrs	r3, r1, #16
 8006a8e:	fb02 3306 	mla	r3, r2, r6, r3
 8006a92:	b289      	uxth	r1, r1
 8006a94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a98:	4285      	cmp	r5, r0
 8006a9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8006aa2:	dcec      	bgt.n	8006a7e <__multadd+0x12>
 8006aa4:	b30e      	cbz	r6, 8006aea <__multadd+0x7e>
 8006aa6:	68a3      	ldr	r3, [r4, #8]
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	dc19      	bgt.n	8006ae0 <__multadd+0x74>
 8006aac:	6861      	ldr	r1, [r4, #4]
 8006aae:	4638      	mov	r0, r7
 8006ab0:	3101      	adds	r1, #1
 8006ab2:	f7ff ff79 	bl	80069a8 <_Balloc>
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	b928      	cbnz	r0, 8006ac6 <__multadd+0x5a>
 8006aba:	4602      	mov	r2, r0
 8006abc:	21ba      	movs	r1, #186	; 0xba
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <__multadd+0x84>)
 8006ac0:	480c      	ldr	r0, [pc, #48]	; (8006af4 <__multadd+0x88>)
 8006ac2:	f000 fbb1 	bl	8007228 <__assert_func>
 8006ac6:	6922      	ldr	r2, [r4, #16]
 8006ac8:	f104 010c 	add.w	r1, r4, #12
 8006acc:	3202      	adds	r2, #2
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	300c      	adds	r0, #12
 8006ad2:	f000 fb9b 	bl	800720c <memcpy>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f7ff ffa5 	bl	8006a28 <_Bfree>
 8006ade:	4644      	mov	r4, r8
 8006ae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	615e      	str	r6, [r3, #20]
 8006ae8:	6125      	str	r5, [r4, #16]
 8006aea:	4620      	mov	r0, r4
 8006aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af0:	08007946 	.word	0x08007946
 8006af4:	08007957 	.word	0x08007957

08006af8 <__hi0bits>:
 8006af8:	0c02      	lsrs	r2, r0, #16
 8006afa:	0412      	lsls	r2, r2, #16
 8006afc:	4603      	mov	r3, r0
 8006afe:	b9ca      	cbnz	r2, 8006b34 <__hi0bits+0x3c>
 8006b00:	0403      	lsls	r3, r0, #16
 8006b02:	2010      	movs	r0, #16
 8006b04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b08:	bf04      	itt	eq
 8006b0a:	021b      	lsleq	r3, r3, #8
 8006b0c:	3008      	addeq	r0, #8
 8006b0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b12:	bf04      	itt	eq
 8006b14:	011b      	lsleq	r3, r3, #4
 8006b16:	3004      	addeq	r0, #4
 8006b18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b1c:	bf04      	itt	eq
 8006b1e:	009b      	lsleq	r3, r3, #2
 8006b20:	3002      	addeq	r0, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	db05      	blt.n	8006b32 <__hi0bits+0x3a>
 8006b26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006b2a:	f100 0001 	add.w	r0, r0, #1
 8006b2e:	bf08      	it	eq
 8006b30:	2020      	moveq	r0, #32
 8006b32:	4770      	bx	lr
 8006b34:	2000      	movs	r0, #0
 8006b36:	e7e5      	b.n	8006b04 <__hi0bits+0xc>

08006b38 <__lo0bits>:
 8006b38:	6803      	ldr	r3, [r0, #0]
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	f013 0007 	ands.w	r0, r3, #7
 8006b40:	d00b      	beq.n	8006b5a <__lo0bits+0x22>
 8006b42:	07d9      	lsls	r1, r3, #31
 8006b44:	d421      	bmi.n	8006b8a <__lo0bits+0x52>
 8006b46:	0798      	lsls	r0, r3, #30
 8006b48:	bf49      	itett	mi
 8006b4a:	085b      	lsrmi	r3, r3, #1
 8006b4c:	089b      	lsrpl	r3, r3, #2
 8006b4e:	2001      	movmi	r0, #1
 8006b50:	6013      	strmi	r3, [r2, #0]
 8006b52:	bf5c      	itt	pl
 8006b54:	2002      	movpl	r0, #2
 8006b56:	6013      	strpl	r3, [r2, #0]
 8006b58:	4770      	bx	lr
 8006b5a:	b299      	uxth	r1, r3
 8006b5c:	b909      	cbnz	r1, 8006b62 <__lo0bits+0x2a>
 8006b5e:	2010      	movs	r0, #16
 8006b60:	0c1b      	lsrs	r3, r3, #16
 8006b62:	b2d9      	uxtb	r1, r3
 8006b64:	b909      	cbnz	r1, 8006b6a <__lo0bits+0x32>
 8006b66:	3008      	adds	r0, #8
 8006b68:	0a1b      	lsrs	r3, r3, #8
 8006b6a:	0719      	lsls	r1, r3, #28
 8006b6c:	bf04      	itt	eq
 8006b6e:	091b      	lsreq	r3, r3, #4
 8006b70:	3004      	addeq	r0, #4
 8006b72:	0799      	lsls	r1, r3, #30
 8006b74:	bf04      	itt	eq
 8006b76:	089b      	lsreq	r3, r3, #2
 8006b78:	3002      	addeq	r0, #2
 8006b7a:	07d9      	lsls	r1, r3, #31
 8006b7c:	d403      	bmi.n	8006b86 <__lo0bits+0x4e>
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f100 0001 	add.w	r0, r0, #1
 8006b84:	d003      	beq.n	8006b8e <__lo0bits+0x56>
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	4770      	bx	lr
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	4770      	bx	lr
 8006b8e:	2020      	movs	r0, #32
 8006b90:	4770      	bx	lr
	...

08006b94 <__i2b>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	460c      	mov	r4, r1
 8006b98:	2101      	movs	r1, #1
 8006b9a:	f7ff ff05 	bl	80069a8 <_Balloc>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <__i2b+0x1a>
 8006ba2:	f240 1145 	movw	r1, #325	; 0x145
 8006ba6:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <__i2b+0x24>)
 8006ba8:	4804      	ldr	r0, [pc, #16]	; (8006bbc <__i2b+0x28>)
 8006baa:	f000 fb3d 	bl	8007228 <__assert_func>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	6144      	str	r4, [r0, #20]
 8006bb2:	6103      	str	r3, [r0, #16]
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08007946 	.word	0x08007946
 8006bbc:	08007957 	.word	0x08007957

08006bc0 <__multiply>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	4691      	mov	r9, r2
 8006bc6:	690a      	ldr	r2, [r1, #16]
 8006bc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bcc:	460c      	mov	r4, r1
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	bfbe      	ittt	lt
 8006bd2:	460b      	movlt	r3, r1
 8006bd4:	464c      	movlt	r4, r9
 8006bd6:	4699      	movlt	r9, r3
 8006bd8:	6927      	ldr	r7, [r4, #16]
 8006bda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bde:	68a3      	ldr	r3, [r4, #8]
 8006be0:	6861      	ldr	r1, [r4, #4]
 8006be2:	eb07 060a 	add.w	r6, r7, sl
 8006be6:	42b3      	cmp	r3, r6
 8006be8:	b085      	sub	sp, #20
 8006bea:	bfb8      	it	lt
 8006bec:	3101      	addlt	r1, #1
 8006bee:	f7ff fedb 	bl	80069a8 <_Balloc>
 8006bf2:	b930      	cbnz	r0, 8006c02 <__multiply+0x42>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006bfa:	4b43      	ldr	r3, [pc, #268]	; (8006d08 <__multiply+0x148>)
 8006bfc:	4843      	ldr	r0, [pc, #268]	; (8006d0c <__multiply+0x14c>)
 8006bfe:	f000 fb13 	bl	8007228 <__assert_func>
 8006c02:	f100 0514 	add.w	r5, r0, #20
 8006c06:	462b      	mov	r3, r5
 8006c08:	2200      	movs	r2, #0
 8006c0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c0e:	4543      	cmp	r3, r8
 8006c10:	d321      	bcc.n	8006c56 <__multiply+0x96>
 8006c12:	f104 0314 	add.w	r3, r4, #20
 8006c16:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c1a:	f109 0314 	add.w	r3, r9, #20
 8006c1e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c22:	9202      	str	r2, [sp, #8]
 8006c24:	1b3a      	subs	r2, r7, r4
 8006c26:	3a15      	subs	r2, #21
 8006c28:	f022 0203 	bic.w	r2, r2, #3
 8006c2c:	3204      	adds	r2, #4
 8006c2e:	f104 0115 	add.w	r1, r4, #21
 8006c32:	428f      	cmp	r7, r1
 8006c34:	bf38      	it	cc
 8006c36:	2204      	movcc	r2, #4
 8006c38:	9201      	str	r2, [sp, #4]
 8006c3a:	9a02      	ldr	r2, [sp, #8]
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d80c      	bhi.n	8006c5c <__multiply+0x9c>
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	dd03      	ble.n	8006c4e <__multiply+0x8e>
 8006c46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d05a      	beq.n	8006d04 <__multiply+0x144>
 8006c4e:	6106      	str	r6, [r0, #16]
 8006c50:	b005      	add	sp, #20
 8006c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c56:	f843 2b04 	str.w	r2, [r3], #4
 8006c5a:	e7d8      	b.n	8006c0e <__multiply+0x4e>
 8006c5c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c60:	f1ba 0f00 	cmp.w	sl, #0
 8006c64:	d023      	beq.n	8006cae <__multiply+0xee>
 8006c66:	46a9      	mov	r9, r5
 8006c68:	f04f 0c00 	mov.w	ip, #0
 8006c6c:	f104 0e14 	add.w	lr, r4, #20
 8006c70:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c74:	f8d9 1000 	ldr.w	r1, [r9]
 8006c78:	fa1f fb82 	uxth.w	fp, r2
 8006c7c:	b289      	uxth	r1, r1
 8006c7e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c82:	4461      	add	r1, ip
 8006c84:	f8d9 c000 	ldr.w	ip, [r9]
 8006c88:	0c12      	lsrs	r2, r2, #16
 8006c8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c8e:	fb0a c202 	mla	r2, sl, r2, ip
 8006c92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c96:	b289      	uxth	r1, r1
 8006c98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c9c:	4577      	cmp	r7, lr
 8006c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ca2:	f849 1b04 	str.w	r1, [r9], #4
 8006ca6:	d8e3      	bhi.n	8006c70 <__multiply+0xb0>
 8006ca8:	9a01      	ldr	r2, [sp, #4]
 8006caa:	f845 c002 	str.w	ip, [r5, r2]
 8006cae:	9a03      	ldr	r2, [sp, #12]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cb6:	f1b9 0f00 	cmp.w	r9, #0
 8006cba:	d021      	beq.n	8006d00 <__multiply+0x140>
 8006cbc:	46ae      	mov	lr, r5
 8006cbe:	f04f 0a00 	mov.w	sl, #0
 8006cc2:	6829      	ldr	r1, [r5, #0]
 8006cc4:	f104 0c14 	add.w	ip, r4, #20
 8006cc8:	f8bc b000 	ldrh.w	fp, [ip]
 8006ccc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cd0:	b289      	uxth	r1, r1
 8006cd2:	fb09 220b 	mla	r2, r9, fp, r2
 8006cd6:	4452      	add	r2, sl
 8006cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cdc:	f84e 1b04 	str.w	r1, [lr], #4
 8006ce0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ce4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ce8:	f8be 1000 	ldrh.w	r1, [lr]
 8006cec:	4567      	cmp	r7, ip
 8006cee:	fb09 110a 	mla	r1, r9, sl, r1
 8006cf2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006cf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cfa:	d8e5      	bhi.n	8006cc8 <__multiply+0x108>
 8006cfc:	9a01      	ldr	r2, [sp, #4]
 8006cfe:	50a9      	str	r1, [r5, r2]
 8006d00:	3504      	adds	r5, #4
 8006d02:	e79a      	b.n	8006c3a <__multiply+0x7a>
 8006d04:	3e01      	subs	r6, #1
 8006d06:	e79c      	b.n	8006c42 <__multiply+0x82>
 8006d08:	08007946 	.word	0x08007946
 8006d0c:	08007957 	.word	0x08007957

08006d10 <__pow5mult>:
 8006d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d14:	4615      	mov	r5, r2
 8006d16:	f012 0203 	ands.w	r2, r2, #3
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	460f      	mov	r7, r1
 8006d1e:	d007      	beq.n	8006d30 <__pow5mult+0x20>
 8006d20:	4c25      	ldr	r4, [pc, #148]	; (8006db8 <__pow5mult+0xa8>)
 8006d22:	3a01      	subs	r2, #1
 8006d24:	2300      	movs	r3, #0
 8006d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d2a:	f7ff fe9f 	bl	8006a6c <__multadd>
 8006d2e:	4607      	mov	r7, r0
 8006d30:	10ad      	asrs	r5, r5, #2
 8006d32:	d03d      	beq.n	8006db0 <__pow5mult+0xa0>
 8006d34:	69f4      	ldr	r4, [r6, #28]
 8006d36:	b97c      	cbnz	r4, 8006d58 <__pow5mult+0x48>
 8006d38:	2010      	movs	r0, #16
 8006d3a:	f7ff fd81 	bl	8006840 <malloc>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	61f0      	str	r0, [r6, #28]
 8006d42:	b928      	cbnz	r0, 8006d50 <__pow5mult+0x40>
 8006d44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <__pow5mult+0xac>)
 8006d4a:	481d      	ldr	r0, [pc, #116]	; (8006dc0 <__pow5mult+0xb0>)
 8006d4c:	f000 fa6c 	bl	8007228 <__assert_func>
 8006d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d54:	6004      	str	r4, [r0, #0]
 8006d56:	60c4      	str	r4, [r0, #12]
 8006d58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d60:	b94c      	cbnz	r4, 8006d76 <__pow5mult+0x66>
 8006d62:	f240 2171 	movw	r1, #625	; 0x271
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ff14 	bl	8006b94 <__i2b>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d74:	6003      	str	r3, [r0, #0]
 8006d76:	f04f 0900 	mov.w	r9, #0
 8006d7a:	07eb      	lsls	r3, r5, #31
 8006d7c:	d50a      	bpl.n	8006d94 <__pow5mult+0x84>
 8006d7e:	4639      	mov	r1, r7
 8006d80:	4622      	mov	r2, r4
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ff1c 	bl	8006bc0 <__multiply>
 8006d88:	4680      	mov	r8, r0
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff fe4b 	bl	8006a28 <_Bfree>
 8006d92:	4647      	mov	r7, r8
 8006d94:	106d      	asrs	r5, r5, #1
 8006d96:	d00b      	beq.n	8006db0 <__pow5mult+0xa0>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	b938      	cbnz	r0, 8006dac <__pow5mult+0x9c>
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7ff ff0d 	bl	8006bc0 <__multiply>
 8006da6:	6020      	str	r0, [r4, #0]
 8006da8:	f8c0 9000 	str.w	r9, [r0]
 8006dac:	4604      	mov	r4, r0
 8006dae:	e7e4      	b.n	8006d7a <__pow5mult+0x6a>
 8006db0:	4638      	mov	r0, r7
 8006db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db6:	bf00      	nop
 8006db8:	08007aa0 	.word	0x08007aa0
 8006dbc:	080078d7 	.word	0x080078d7
 8006dc0:	08007957 	.word	0x08007957

08006dc4 <__lshift>:
 8006dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc8:	460c      	mov	r4, r1
 8006dca:	4607      	mov	r7, r0
 8006dcc:	4691      	mov	r9, r2
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	6849      	ldr	r1, [r1, #4]
 8006dd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dd6:	68a3      	ldr	r3, [r4, #8]
 8006dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ddc:	f108 0601 	add.w	r6, r8, #1
 8006de0:	42b3      	cmp	r3, r6
 8006de2:	db0b      	blt.n	8006dfc <__lshift+0x38>
 8006de4:	4638      	mov	r0, r7
 8006de6:	f7ff fddf 	bl	80069a8 <_Balloc>
 8006dea:	4605      	mov	r5, r0
 8006dec:	b948      	cbnz	r0, 8006e02 <__lshift+0x3e>
 8006dee:	4602      	mov	r2, r0
 8006df0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006df4:	4b27      	ldr	r3, [pc, #156]	; (8006e94 <__lshift+0xd0>)
 8006df6:	4828      	ldr	r0, [pc, #160]	; (8006e98 <__lshift+0xd4>)
 8006df8:	f000 fa16 	bl	8007228 <__assert_func>
 8006dfc:	3101      	adds	r1, #1
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	e7ee      	b.n	8006de0 <__lshift+0x1c>
 8006e02:	2300      	movs	r3, #0
 8006e04:	f100 0114 	add.w	r1, r0, #20
 8006e08:	f100 0210 	add.w	r2, r0, #16
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	4553      	cmp	r3, sl
 8006e10:	db33      	blt.n	8006e7a <__lshift+0xb6>
 8006e12:	6920      	ldr	r0, [r4, #16]
 8006e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e18:	f104 0314 	add.w	r3, r4, #20
 8006e1c:	f019 091f 	ands.w	r9, r9, #31
 8006e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e28:	d02b      	beq.n	8006e82 <__lshift+0xbe>
 8006e2a:	468a      	mov	sl, r1
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	fa00 f009 	lsl.w	r0, r0, r9
 8006e38:	4310      	orrs	r0, r2
 8006e3a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e42:	459c      	cmp	ip, r3
 8006e44:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e48:	d8f3      	bhi.n	8006e32 <__lshift+0x6e>
 8006e4a:	ebac 0304 	sub.w	r3, ip, r4
 8006e4e:	3b15      	subs	r3, #21
 8006e50:	f023 0303 	bic.w	r3, r3, #3
 8006e54:	3304      	adds	r3, #4
 8006e56:	f104 0015 	add.w	r0, r4, #21
 8006e5a:	4584      	cmp	ip, r0
 8006e5c:	bf38      	it	cc
 8006e5e:	2304      	movcc	r3, #4
 8006e60:	50ca      	str	r2, [r1, r3]
 8006e62:	b10a      	cbz	r2, 8006e68 <__lshift+0xa4>
 8006e64:	f108 0602 	add.w	r6, r8, #2
 8006e68:	3e01      	subs	r6, #1
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	612e      	str	r6, [r5, #16]
 8006e70:	f7ff fdda 	bl	8006a28 <_Bfree>
 8006e74:	4628      	mov	r0, r5
 8006e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e7e:	3301      	adds	r3, #1
 8006e80:	e7c5      	b.n	8006e0e <__lshift+0x4a>
 8006e82:	3904      	subs	r1, #4
 8006e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e88:	459c      	cmp	ip, r3
 8006e8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e8e:	d8f9      	bhi.n	8006e84 <__lshift+0xc0>
 8006e90:	e7ea      	b.n	8006e68 <__lshift+0xa4>
 8006e92:	bf00      	nop
 8006e94:	08007946 	.word	0x08007946
 8006e98:	08007957 	.word	0x08007957

08006e9c <__mcmp>:
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	690a      	ldr	r2, [r1, #16]
 8006ea0:	6900      	ldr	r0, [r0, #16]
 8006ea2:	b530      	push	{r4, r5, lr}
 8006ea4:	1a80      	subs	r0, r0, r2
 8006ea6:	d10d      	bne.n	8006ec4 <__mcmp+0x28>
 8006ea8:	3314      	adds	r3, #20
 8006eaa:	3114      	adds	r1, #20
 8006eac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006eb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006eb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ebc:	4295      	cmp	r5, r2
 8006ebe:	d002      	beq.n	8006ec6 <__mcmp+0x2a>
 8006ec0:	d304      	bcc.n	8006ecc <__mcmp+0x30>
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	bd30      	pop	{r4, r5, pc}
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	d3f4      	bcc.n	8006eb4 <__mcmp+0x18>
 8006eca:	e7fb      	b.n	8006ec4 <__mcmp+0x28>
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	e7f8      	b.n	8006ec4 <__mcmp+0x28>
	...

08006ed4 <__mdiff>:
 8006ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	460d      	mov	r5, r1
 8006eda:	4607      	mov	r7, r0
 8006edc:	4611      	mov	r1, r2
 8006ede:	4628      	mov	r0, r5
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	f7ff ffdb 	bl	8006e9c <__mcmp>
 8006ee6:	1e06      	subs	r6, r0, #0
 8006ee8:	d111      	bne.n	8006f0e <__mdiff+0x3a>
 8006eea:	4631      	mov	r1, r6
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7ff fd5b 	bl	80069a8 <_Balloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	b928      	cbnz	r0, 8006f02 <__mdiff+0x2e>
 8006ef6:	f240 2137 	movw	r1, #567	; 0x237
 8006efa:	4b3a      	ldr	r3, [pc, #232]	; (8006fe4 <__mdiff+0x110>)
 8006efc:	483a      	ldr	r0, [pc, #232]	; (8006fe8 <__mdiff+0x114>)
 8006efe:	f000 f993 	bl	8007228 <__assert_func>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f08:	4610      	mov	r0, r2
 8006f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	bfa4      	itt	ge
 8006f10:	4623      	movge	r3, r4
 8006f12:	462c      	movge	r4, r5
 8006f14:	4638      	mov	r0, r7
 8006f16:	6861      	ldr	r1, [r4, #4]
 8006f18:	bfa6      	itte	ge
 8006f1a:	461d      	movge	r5, r3
 8006f1c:	2600      	movge	r6, #0
 8006f1e:	2601      	movlt	r6, #1
 8006f20:	f7ff fd42 	bl	80069a8 <_Balloc>
 8006f24:	4602      	mov	r2, r0
 8006f26:	b918      	cbnz	r0, 8006f30 <__mdiff+0x5c>
 8006f28:	f240 2145 	movw	r1, #581	; 0x245
 8006f2c:	4b2d      	ldr	r3, [pc, #180]	; (8006fe4 <__mdiff+0x110>)
 8006f2e:	e7e5      	b.n	8006efc <__mdiff+0x28>
 8006f30:	f102 0814 	add.w	r8, r2, #20
 8006f34:	46c2      	mov	sl, r8
 8006f36:	f04f 0c00 	mov.w	ip, #0
 8006f3a:	6927      	ldr	r7, [r4, #16]
 8006f3c:	60c6      	str	r6, [r0, #12]
 8006f3e:	692e      	ldr	r6, [r5, #16]
 8006f40:	f104 0014 	add.w	r0, r4, #20
 8006f44:	f105 0914 	add.w	r9, r5, #20
 8006f48:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006f4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f50:	3410      	adds	r4, #16
 8006f52:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006f56:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f5a:	fa1f f18b 	uxth.w	r1, fp
 8006f5e:	4461      	add	r1, ip
 8006f60:	fa1f fc83 	uxth.w	ip, r3
 8006f64:	0c1b      	lsrs	r3, r3, #16
 8006f66:	eba1 010c 	sub.w	r1, r1, ip
 8006f6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f72:	b289      	uxth	r1, r1
 8006f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006f78:	454e      	cmp	r6, r9
 8006f7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f7e:	f84a 1b04 	str.w	r1, [sl], #4
 8006f82:	d8e6      	bhi.n	8006f52 <__mdiff+0x7e>
 8006f84:	1b73      	subs	r3, r6, r5
 8006f86:	3b15      	subs	r3, #21
 8006f88:	f023 0303 	bic.w	r3, r3, #3
 8006f8c:	3515      	adds	r5, #21
 8006f8e:	3304      	adds	r3, #4
 8006f90:	42ae      	cmp	r6, r5
 8006f92:	bf38      	it	cc
 8006f94:	2304      	movcc	r3, #4
 8006f96:	4418      	add	r0, r3
 8006f98:	4443      	add	r3, r8
 8006f9a:	461e      	mov	r6, r3
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	4575      	cmp	r5, lr
 8006fa0:	d30e      	bcc.n	8006fc0 <__mdiff+0xec>
 8006fa2:	f10e 0103 	add.w	r1, lr, #3
 8006fa6:	1a09      	subs	r1, r1, r0
 8006fa8:	f021 0103 	bic.w	r1, r1, #3
 8006fac:	3803      	subs	r0, #3
 8006fae:	4586      	cmp	lr, r0
 8006fb0:	bf38      	it	cc
 8006fb2:	2100      	movcc	r1, #0
 8006fb4:	440b      	add	r3, r1
 8006fb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fba:	b189      	cbz	r1, 8006fe0 <__mdiff+0x10c>
 8006fbc:	6117      	str	r7, [r2, #16]
 8006fbe:	e7a3      	b.n	8006f08 <__mdiff+0x34>
 8006fc0:	f855 8b04 	ldr.w	r8, [r5], #4
 8006fc4:	fa1f f188 	uxth.w	r1, r8
 8006fc8:	4461      	add	r1, ip
 8006fca:	140c      	asrs	r4, r1, #16
 8006fcc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fd0:	b289      	uxth	r1, r1
 8006fd2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006fd6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006fda:	f846 1b04 	str.w	r1, [r6], #4
 8006fde:	e7de      	b.n	8006f9e <__mdiff+0xca>
 8006fe0:	3f01      	subs	r7, #1
 8006fe2:	e7e8      	b.n	8006fb6 <__mdiff+0xe2>
 8006fe4:	08007946 	.word	0x08007946
 8006fe8:	08007957 	.word	0x08007957

08006fec <__d2b>:
 8006fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4617      	mov	r7, r2
 8006ff2:	461c      	mov	r4, r3
 8006ff4:	9e08      	ldr	r6, [sp, #32]
 8006ff6:	f7ff fcd7 	bl	80069a8 <_Balloc>
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	b930      	cbnz	r0, 800700c <__d2b+0x20>
 8006ffe:	4602      	mov	r2, r0
 8007000:	f240 310f 	movw	r1, #783	; 0x30f
 8007004:	4b22      	ldr	r3, [pc, #136]	; (8007090 <__d2b+0xa4>)
 8007006:	4823      	ldr	r0, [pc, #140]	; (8007094 <__d2b+0xa8>)
 8007008:	f000 f90e 	bl	8007228 <__assert_func>
 800700c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007010:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007014:	bb24      	cbnz	r4, 8007060 <__d2b+0x74>
 8007016:	2f00      	cmp	r7, #0
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	d026      	beq.n	800706a <__d2b+0x7e>
 800701c:	4668      	mov	r0, sp
 800701e:	9700      	str	r7, [sp, #0]
 8007020:	f7ff fd8a 	bl	8006b38 <__lo0bits>
 8007024:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007028:	b1e8      	cbz	r0, 8007066 <__d2b+0x7a>
 800702a:	f1c0 0320 	rsb	r3, r0, #32
 800702e:	fa02 f303 	lsl.w	r3, r2, r3
 8007032:	430b      	orrs	r3, r1
 8007034:	40c2      	lsrs	r2, r0
 8007036:	616b      	str	r3, [r5, #20]
 8007038:	9201      	str	r2, [sp, #4]
 800703a:	9b01      	ldr	r3, [sp, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	bf14      	ite	ne
 8007040:	2102      	movne	r1, #2
 8007042:	2101      	moveq	r1, #1
 8007044:	61ab      	str	r3, [r5, #24]
 8007046:	6129      	str	r1, [r5, #16]
 8007048:	b1bc      	cbz	r4, 800707a <__d2b+0x8e>
 800704a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800704e:	4404      	add	r4, r0
 8007050:	6034      	str	r4, [r6, #0]
 8007052:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007058:	6018      	str	r0, [r3, #0]
 800705a:	4628      	mov	r0, r5
 800705c:	b003      	add	sp, #12
 800705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007064:	e7d7      	b.n	8007016 <__d2b+0x2a>
 8007066:	6169      	str	r1, [r5, #20]
 8007068:	e7e7      	b.n	800703a <__d2b+0x4e>
 800706a:	a801      	add	r0, sp, #4
 800706c:	f7ff fd64 	bl	8006b38 <__lo0bits>
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	2101      	movs	r1, #1
 8007074:	616b      	str	r3, [r5, #20]
 8007076:	3020      	adds	r0, #32
 8007078:	e7e5      	b.n	8007046 <__d2b+0x5a>
 800707a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800707e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007082:	6030      	str	r0, [r6, #0]
 8007084:	6918      	ldr	r0, [r3, #16]
 8007086:	f7ff fd37 	bl	8006af8 <__hi0bits>
 800708a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800708e:	e7e2      	b.n	8007056 <__d2b+0x6a>
 8007090:	08007946 	.word	0x08007946
 8007094:	08007957 	.word	0x08007957

08007098 <__sflush_r>:
 8007098:	898a      	ldrh	r2, [r1, #12]
 800709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709c:	4605      	mov	r5, r0
 800709e:	0710      	lsls	r0, r2, #28
 80070a0:	460c      	mov	r4, r1
 80070a2:	d457      	bmi.n	8007154 <__sflush_r+0xbc>
 80070a4:	684b      	ldr	r3, [r1, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dc04      	bgt.n	80070b4 <__sflush_r+0x1c>
 80070aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dc01      	bgt.n	80070b4 <__sflush_r+0x1c>
 80070b0:	2000      	movs	r0, #0
 80070b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	d0fa      	beq.n	80070b0 <__sflush_r+0x18>
 80070ba:	2300      	movs	r3, #0
 80070bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070c0:	682f      	ldr	r7, [r5, #0]
 80070c2:	6a21      	ldr	r1, [r4, #32]
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	d032      	beq.n	800712e <__sflush_r+0x96>
 80070c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	075a      	lsls	r2, r3, #29
 80070ce:	d505      	bpl.n	80070dc <__sflush_r+0x44>
 80070d0:	6863      	ldr	r3, [r4, #4]
 80070d2:	1ac0      	subs	r0, r0, r3
 80070d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070d6:	b10b      	cbz	r3, 80070dc <__sflush_r+0x44>
 80070d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070da:	1ac0      	subs	r0, r0, r3
 80070dc:	2300      	movs	r3, #0
 80070de:	4602      	mov	r2, r0
 80070e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070e2:	4628      	mov	r0, r5
 80070e4:	6a21      	ldr	r1, [r4, #32]
 80070e6:	47b0      	blx	r6
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	d106      	bne.n	80070fc <__sflush_r+0x64>
 80070ee:	6829      	ldr	r1, [r5, #0]
 80070f0:	291d      	cmp	r1, #29
 80070f2:	d82b      	bhi.n	800714c <__sflush_r+0xb4>
 80070f4:	4a28      	ldr	r2, [pc, #160]	; (8007198 <__sflush_r+0x100>)
 80070f6:	410a      	asrs	r2, r1
 80070f8:	07d6      	lsls	r6, r2, #31
 80070fa:	d427      	bmi.n	800714c <__sflush_r+0xb4>
 80070fc:	2200      	movs	r2, #0
 80070fe:	6062      	str	r2, [r4, #4]
 8007100:	6922      	ldr	r2, [r4, #16]
 8007102:	04d9      	lsls	r1, r3, #19
 8007104:	6022      	str	r2, [r4, #0]
 8007106:	d504      	bpl.n	8007112 <__sflush_r+0x7a>
 8007108:	1c42      	adds	r2, r0, #1
 800710a:	d101      	bne.n	8007110 <__sflush_r+0x78>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b903      	cbnz	r3, 8007112 <__sflush_r+0x7a>
 8007110:	6560      	str	r0, [r4, #84]	; 0x54
 8007112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007114:	602f      	str	r7, [r5, #0]
 8007116:	2900      	cmp	r1, #0
 8007118:	d0ca      	beq.n	80070b0 <__sflush_r+0x18>
 800711a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711e:	4299      	cmp	r1, r3
 8007120:	d002      	beq.n	8007128 <__sflush_r+0x90>
 8007122:	4628      	mov	r0, r5
 8007124:	f7ff fb44 	bl	80067b0 <_free_r>
 8007128:	2000      	movs	r0, #0
 800712a:	6360      	str	r0, [r4, #52]	; 0x34
 800712c:	e7c1      	b.n	80070b2 <__sflush_r+0x1a>
 800712e:	2301      	movs	r3, #1
 8007130:	4628      	mov	r0, r5
 8007132:	47b0      	blx	r6
 8007134:	1c41      	adds	r1, r0, #1
 8007136:	d1c8      	bne.n	80070ca <__sflush_r+0x32>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0c5      	beq.n	80070ca <__sflush_r+0x32>
 800713e:	2b1d      	cmp	r3, #29
 8007140:	d001      	beq.n	8007146 <__sflush_r+0xae>
 8007142:	2b16      	cmp	r3, #22
 8007144:	d101      	bne.n	800714a <__sflush_r+0xb2>
 8007146:	602f      	str	r7, [r5, #0]
 8007148:	e7b2      	b.n	80070b0 <__sflush_r+0x18>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	e7ae      	b.n	80070b2 <__sflush_r+0x1a>
 8007154:	690f      	ldr	r7, [r1, #16]
 8007156:	2f00      	cmp	r7, #0
 8007158:	d0aa      	beq.n	80070b0 <__sflush_r+0x18>
 800715a:	0793      	lsls	r3, r2, #30
 800715c:	bf18      	it	ne
 800715e:	2300      	movne	r3, #0
 8007160:	680e      	ldr	r6, [r1, #0]
 8007162:	bf08      	it	eq
 8007164:	694b      	ldreq	r3, [r1, #20]
 8007166:	1bf6      	subs	r6, r6, r7
 8007168:	600f      	str	r7, [r1, #0]
 800716a:	608b      	str	r3, [r1, #8]
 800716c:	2e00      	cmp	r6, #0
 800716e:	dd9f      	ble.n	80070b0 <__sflush_r+0x18>
 8007170:	4633      	mov	r3, r6
 8007172:	463a      	mov	r2, r7
 8007174:	4628      	mov	r0, r5
 8007176:	6a21      	ldr	r1, [r4, #32]
 8007178:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800717c:	47e0      	blx	ip
 800717e:	2800      	cmp	r0, #0
 8007180:	dc06      	bgt.n	8007190 <__sflush_r+0xf8>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	e790      	b.n	80070b2 <__sflush_r+0x1a>
 8007190:	4407      	add	r7, r0
 8007192:	1a36      	subs	r6, r6, r0
 8007194:	e7ea      	b.n	800716c <__sflush_r+0xd4>
 8007196:	bf00      	nop
 8007198:	dfbffffe 	.word	0xdfbffffe

0800719c <_fflush_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	4605      	mov	r5, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	b913      	cbnz	r3, 80071ac <_fflush_r+0x10>
 80071a6:	2500      	movs	r5, #0
 80071a8:	4628      	mov	r0, r5
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	b118      	cbz	r0, 80071b6 <_fflush_r+0x1a>
 80071ae:	6a03      	ldr	r3, [r0, #32]
 80071b0:	b90b      	cbnz	r3, 80071b6 <_fflush_r+0x1a>
 80071b2:	f7fe fb87 	bl	80058c4 <__sinit>
 80071b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f3      	beq.n	80071a6 <_fflush_r+0xa>
 80071be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071c0:	07d0      	lsls	r0, r2, #31
 80071c2:	d404      	bmi.n	80071ce <_fflush_r+0x32>
 80071c4:	0599      	lsls	r1, r3, #22
 80071c6:	d402      	bmi.n	80071ce <_fflush_r+0x32>
 80071c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ca:	f7fe fc72 	bl	8005ab2 <__retarget_lock_acquire_recursive>
 80071ce:	4628      	mov	r0, r5
 80071d0:	4621      	mov	r1, r4
 80071d2:	f7ff ff61 	bl	8007098 <__sflush_r>
 80071d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071d8:	4605      	mov	r5, r0
 80071da:	07da      	lsls	r2, r3, #31
 80071dc:	d4e4      	bmi.n	80071a8 <_fflush_r+0xc>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	059b      	lsls	r3, r3, #22
 80071e2:	d4e1      	bmi.n	80071a8 <_fflush_r+0xc>
 80071e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e6:	f7fe fc65 	bl	8005ab4 <__retarget_lock_release_recursive>
 80071ea:	e7dd      	b.n	80071a8 <_fflush_r+0xc>

080071ec <_sbrk_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	2300      	movs	r3, #0
 80071f0:	4d05      	ldr	r5, [pc, #20]	; (8007208 <_sbrk_r+0x1c>)
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	f7fb f87c 	bl	80022f4 <_sbrk>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_sbrk_r+0x1a>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b103      	cbz	r3, 8007206 <_sbrk_r+0x1a>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	20000518 	.word	0x20000518

0800720c <memcpy>:
 800720c:	440a      	add	r2, r1
 800720e:	4291      	cmp	r1, r2
 8007210:	f100 33ff 	add.w	r3, r0, #4294967295
 8007214:	d100      	bne.n	8007218 <memcpy+0xc>
 8007216:	4770      	bx	lr
 8007218:	b510      	push	{r4, lr}
 800721a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800721e:	4291      	cmp	r1, r2
 8007220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007224:	d1f9      	bne.n	800721a <memcpy+0xe>
 8007226:	bd10      	pop	{r4, pc}

08007228 <__assert_func>:
 8007228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800722a:	4614      	mov	r4, r2
 800722c:	461a      	mov	r2, r3
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <__assert_func+0x2c>)
 8007230:	4605      	mov	r5, r0
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68d8      	ldr	r0, [r3, #12]
 8007236:	b14c      	cbz	r4, 800724c <__assert_func+0x24>
 8007238:	4b07      	ldr	r3, [pc, #28]	; (8007258 <__assert_func+0x30>)
 800723a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800723e:	9100      	str	r1, [sp, #0]
 8007240:	462b      	mov	r3, r5
 8007242:	4906      	ldr	r1, [pc, #24]	; (800725c <__assert_func+0x34>)
 8007244:	f000 f842 	bl	80072cc <fiprintf>
 8007248:	f000 f852 	bl	80072f0 <abort>
 800724c:	4b04      	ldr	r3, [pc, #16]	; (8007260 <__assert_func+0x38>)
 800724e:	461c      	mov	r4, r3
 8007250:	e7f3      	b.n	800723a <__assert_func+0x12>
 8007252:	bf00      	nop
 8007254:	20000078 	.word	0x20000078
 8007258:	08007ab6 	.word	0x08007ab6
 800725c:	08007ac3 	.word	0x08007ac3
 8007260:	08007af1 	.word	0x08007af1

08007264 <_calloc_r>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	fba1 5402 	umull	r5, r4, r1, r2
 800726a:	b934      	cbnz	r4, 800727a <_calloc_r+0x16>
 800726c:	4629      	mov	r1, r5
 800726e:	f7ff fb0f 	bl	8006890 <_malloc_r>
 8007272:	4606      	mov	r6, r0
 8007274:	b928      	cbnz	r0, 8007282 <_calloc_r+0x1e>
 8007276:	4630      	mov	r0, r6
 8007278:	bd70      	pop	{r4, r5, r6, pc}
 800727a:	220c      	movs	r2, #12
 800727c:	2600      	movs	r6, #0
 800727e:	6002      	str	r2, [r0, #0]
 8007280:	e7f9      	b.n	8007276 <_calloc_r+0x12>
 8007282:	462a      	mov	r2, r5
 8007284:	4621      	mov	r1, r4
 8007286:	f7fe fb96 	bl	80059b6 <memset>
 800728a:	e7f4      	b.n	8007276 <_calloc_r+0x12>

0800728c <__ascii_mbtowc>:
 800728c:	b082      	sub	sp, #8
 800728e:	b901      	cbnz	r1, 8007292 <__ascii_mbtowc+0x6>
 8007290:	a901      	add	r1, sp, #4
 8007292:	b142      	cbz	r2, 80072a6 <__ascii_mbtowc+0x1a>
 8007294:	b14b      	cbz	r3, 80072aa <__ascii_mbtowc+0x1e>
 8007296:	7813      	ldrb	r3, [r2, #0]
 8007298:	600b      	str	r3, [r1, #0]
 800729a:	7812      	ldrb	r2, [r2, #0]
 800729c:	1e10      	subs	r0, r2, #0
 800729e:	bf18      	it	ne
 80072a0:	2001      	movne	r0, #1
 80072a2:	b002      	add	sp, #8
 80072a4:	4770      	bx	lr
 80072a6:	4610      	mov	r0, r2
 80072a8:	e7fb      	b.n	80072a2 <__ascii_mbtowc+0x16>
 80072aa:	f06f 0001 	mvn.w	r0, #1
 80072ae:	e7f8      	b.n	80072a2 <__ascii_mbtowc+0x16>

080072b0 <__ascii_wctomb>:
 80072b0:	4603      	mov	r3, r0
 80072b2:	4608      	mov	r0, r1
 80072b4:	b141      	cbz	r1, 80072c8 <__ascii_wctomb+0x18>
 80072b6:	2aff      	cmp	r2, #255	; 0xff
 80072b8:	d904      	bls.n	80072c4 <__ascii_wctomb+0x14>
 80072ba:	228a      	movs	r2, #138	; 0x8a
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	4770      	bx	lr
 80072c4:	2001      	movs	r0, #1
 80072c6:	700a      	strb	r2, [r1, #0]
 80072c8:	4770      	bx	lr
	...

080072cc <fiprintf>:
 80072cc:	b40e      	push	{r1, r2, r3}
 80072ce:	b503      	push	{r0, r1, lr}
 80072d0:	4601      	mov	r1, r0
 80072d2:	ab03      	add	r3, sp, #12
 80072d4:	4805      	ldr	r0, [pc, #20]	; (80072ec <fiprintf+0x20>)
 80072d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072da:	6800      	ldr	r0, [r0, #0]
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	f000 f835 	bl	800734c <_vfiprintf_r>
 80072e2:	b002      	add	sp, #8
 80072e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072e8:	b003      	add	sp, #12
 80072ea:	4770      	bx	lr
 80072ec:	20000078 	.word	0x20000078

080072f0 <abort>:
 80072f0:	2006      	movs	r0, #6
 80072f2:	b508      	push	{r3, lr}
 80072f4:	f000 fa02 	bl	80076fc <raise>
 80072f8:	2001      	movs	r0, #1
 80072fa:	f7fa ffa4 	bl	8002246 <_exit>

080072fe <__sfputc_r>:
 80072fe:	6893      	ldr	r3, [r2, #8]
 8007300:	b410      	push	{r4}
 8007302:	3b01      	subs	r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	6093      	str	r3, [r2, #8]
 8007308:	da07      	bge.n	800731a <__sfputc_r+0x1c>
 800730a:	6994      	ldr	r4, [r2, #24]
 800730c:	42a3      	cmp	r3, r4
 800730e:	db01      	blt.n	8007314 <__sfputc_r+0x16>
 8007310:	290a      	cmp	r1, #10
 8007312:	d102      	bne.n	800731a <__sfputc_r+0x1c>
 8007314:	bc10      	pop	{r4}
 8007316:	f000 b933 	b.w	8007580 <__swbuf_r>
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	1c58      	adds	r0, r3, #1
 800731e:	6010      	str	r0, [r2, #0]
 8007320:	7019      	strb	r1, [r3, #0]
 8007322:	4608      	mov	r0, r1
 8007324:	bc10      	pop	{r4}
 8007326:	4770      	bx	lr

08007328 <__sfputs_r>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	4606      	mov	r6, r0
 800732c:	460f      	mov	r7, r1
 800732e:	4614      	mov	r4, r2
 8007330:	18d5      	adds	r5, r2, r3
 8007332:	42ac      	cmp	r4, r5
 8007334:	d101      	bne.n	800733a <__sfputs_r+0x12>
 8007336:	2000      	movs	r0, #0
 8007338:	e007      	b.n	800734a <__sfputs_r+0x22>
 800733a:	463a      	mov	r2, r7
 800733c:	4630      	mov	r0, r6
 800733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007342:	f7ff ffdc 	bl	80072fe <__sfputc_r>
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	d1f3      	bne.n	8007332 <__sfputs_r+0xa>
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800734c <_vfiprintf_r>:
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	460d      	mov	r5, r1
 8007352:	4614      	mov	r4, r2
 8007354:	4698      	mov	r8, r3
 8007356:	4606      	mov	r6, r0
 8007358:	b09d      	sub	sp, #116	; 0x74
 800735a:	b118      	cbz	r0, 8007364 <_vfiprintf_r+0x18>
 800735c:	6a03      	ldr	r3, [r0, #32]
 800735e:	b90b      	cbnz	r3, 8007364 <_vfiprintf_r+0x18>
 8007360:	f7fe fab0 	bl	80058c4 <__sinit>
 8007364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007366:	07d9      	lsls	r1, r3, #31
 8007368:	d405      	bmi.n	8007376 <_vfiprintf_r+0x2a>
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	059a      	lsls	r2, r3, #22
 800736e:	d402      	bmi.n	8007376 <_vfiprintf_r+0x2a>
 8007370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007372:	f7fe fb9e 	bl	8005ab2 <__retarget_lock_acquire_recursive>
 8007376:	89ab      	ldrh	r3, [r5, #12]
 8007378:	071b      	lsls	r3, r3, #28
 800737a:	d501      	bpl.n	8007380 <_vfiprintf_r+0x34>
 800737c:	692b      	ldr	r3, [r5, #16]
 800737e:	b99b      	cbnz	r3, 80073a8 <_vfiprintf_r+0x5c>
 8007380:	4629      	mov	r1, r5
 8007382:	4630      	mov	r0, r6
 8007384:	f000 f93a 	bl	80075fc <__swsetup_r>
 8007388:	b170      	cbz	r0, 80073a8 <_vfiprintf_r+0x5c>
 800738a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800738c:	07dc      	lsls	r4, r3, #31
 800738e:	d504      	bpl.n	800739a <_vfiprintf_r+0x4e>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	b01d      	add	sp, #116	; 0x74
 8007396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	0598      	lsls	r0, r3, #22
 800739e:	d4f7      	bmi.n	8007390 <_vfiprintf_r+0x44>
 80073a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073a2:	f7fe fb87 	bl	8005ab4 <__retarget_lock_release_recursive>
 80073a6:	e7f3      	b.n	8007390 <_vfiprintf_r+0x44>
 80073a8:	2300      	movs	r3, #0
 80073aa:	9309      	str	r3, [sp, #36]	; 0x24
 80073ac:	2320      	movs	r3, #32
 80073ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073b2:	2330      	movs	r3, #48	; 0x30
 80073b4:	f04f 0901 	mov.w	r9, #1
 80073b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80073bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800756c <_vfiprintf_r+0x220>
 80073c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073c4:	4623      	mov	r3, r4
 80073c6:	469a      	mov	sl, r3
 80073c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073cc:	b10a      	cbz	r2, 80073d2 <_vfiprintf_r+0x86>
 80073ce:	2a25      	cmp	r2, #37	; 0x25
 80073d0:	d1f9      	bne.n	80073c6 <_vfiprintf_r+0x7a>
 80073d2:	ebba 0b04 	subs.w	fp, sl, r4
 80073d6:	d00b      	beq.n	80073f0 <_vfiprintf_r+0xa4>
 80073d8:	465b      	mov	r3, fp
 80073da:	4622      	mov	r2, r4
 80073dc:	4629      	mov	r1, r5
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff ffa2 	bl	8007328 <__sfputs_r>
 80073e4:	3001      	adds	r0, #1
 80073e6:	f000 80a9 	beq.w	800753c <_vfiprintf_r+0x1f0>
 80073ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ec:	445a      	add	r2, fp
 80073ee:	9209      	str	r2, [sp, #36]	; 0x24
 80073f0:	f89a 3000 	ldrb.w	r3, [sl]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 80a1 	beq.w	800753c <_vfiprintf_r+0x1f0>
 80073fa:	2300      	movs	r3, #0
 80073fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007404:	f10a 0a01 	add.w	sl, sl, #1
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	9307      	str	r3, [sp, #28]
 800740c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007410:	931a      	str	r3, [sp, #104]	; 0x68
 8007412:	4654      	mov	r4, sl
 8007414:	2205      	movs	r2, #5
 8007416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741a:	4854      	ldr	r0, [pc, #336]	; (800756c <_vfiprintf_r+0x220>)
 800741c:	f7fe fb4b 	bl	8005ab6 <memchr>
 8007420:	9a04      	ldr	r2, [sp, #16]
 8007422:	b9d8      	cbnz	r0, 800745c <_vfiprintf_r+0x110>
 8007424:	06d1      	lsls	r1, r2, #27
 8007426:	bf44      	itt	mi
 8007428:	2320      	movmi	r3, #32
 800742a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800742e:	0713      	lsls	r3, r2, #28
 8007430:	bf44      	itt	mi
 8007432:	232b      	movmi	r3, #43	; 0x2b
 8007434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007438:	f89a 3000 	ldrb.w	r3, [sl]
 800743c:	2b2a      	cmp	r3, #42	; 0x2a
 800743e:	d015      	beq.n	800746c <_vfiprintf_r+0x120>
 8007440:	4654      	mov	r4, sl
 8007442:	2000      	movs	r0, #0
 8007444:	f04f 0c0a 	mov.w	ip, #10
 8007448:	9a07      	ldr	r2, [sp, #28]
 800744a:	4621      	mov	r1, r4
 800744c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007450:	3b30      	subs	r3, #48	; 0x30
 8007452:	2b09      	cmp	r3, #9
 8007454:	d94d      	bls.n	80074f2 <_vfiprintf_r+0x1a6>
 8007456:	b1b0      	cbz	r0, 8007486 <_vfiprintf_r+0x13a>
 8007458:	9207      	str	r2, [sp, #28]
 800745a:	e014      	b.n	8007486 <_vfiprintf_r+0x13a>
 800745c:	eba0 0308 	sub.w	r3, r0, r8
 8007460:	fa09 f303 	lsl.w	r3, r9, r3
 8007464:	4313      	orrs	r3, r2
 8007466:	46a2      	mov	sl, r4
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	e7d2      	b.n	8007412 <_vfiprintf_r+0xc6>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	1d19      	adds	r1, r3, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	9103      	str	r1, [sp, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfbb      	ittet	lt
 8007478:	425b      	neglt	r3, r3
 800747a:	f042 0202 	orrlt.w	r2, r2, #2
 800747e:	9307      	strge	r3, [sp, #28]
 8007480:	9307      	strlt	r3, [sp, #28]
 8007482:	bfb8      	it	lt
 8007484:	9204      	strlt	r2, [sp, #16]
 8007486:	7823      	ldrb	r3, [r4, #0]
 8007488:	2b2e      	cmp	r3, #46	; 0x2e
 800748a:	d10c      	bne.n	80074a6 <_vfiprintf_r+0x15a>
 800748c:	7863      	ldrb	r3, [r4, #1]
 800748e:	2b2a      	cmp	r3, #42	; 0x2a
 8007490:	d134      	bne.n	80074fc <_vfiprintf_r+0x1b0>
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	3402      	adds	r4, #2
 8007496:	1d1a      	adds	r2, r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	9203      	str	r2, [sp, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfb8      	it	lt
 80074a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007570 <_vfiprintf_r+0x224>
 80074aa:	2203      	movs	r2, #3
 80074ac:	4650      	mov	r0, sl
 80074ae:	7821      	ldrb	r1, [r4, #0]
 80074b0:	f7fe fb01 	bl	8005ab6 <memchr>
 80074b4:	b138      	cbz	r0, 80074c6 <_vfiprintf_r+0x17a>
 80074b6:	2240      	movs	r2, #64	; 0x40
 80074b8:	9b04      	ldr	r3, [sp, #16]
 80074ba:	eba0 000a 	sub.w	r0, r0, sl
 80074be:	4082      	lsls	r2, r0
 80074c0:	4313      	orrs	r3, r2
 80074c2:	3401      	adds	r4, #1
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ca:	2206      	movs	r2, #6
 80074cc:	4829      	ldr	r0, [pc, #164]	; (8007574 <_vfiprintf_r+0x228>)
 80074ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074d2:	f7fe faf0 	bl	8005ab6 <memchr>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d03f      	beq.n	800755a <_vfiprintf_r+0x20e>
 80074da:	4b27      	ldr	r3, [pc, #156]	; (8007578 <_vfiprintf_r+0x22c>)
 80074dc:	bb1b      	cbnz	r3, 8007526 <_vfiprintf_r+0x1da>
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	3307      	adds	r3, #7
 80074e2:	f023 0307 	bic.w	r3, r3, #7
 80074e6:	3308      	adds	r3, #8
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ec:	443b      	add	r3, r7
 80074ee:	9309      	str	r3, [sp, #36]	; 0x24
 80074f0:	e768      	b.n	80073c4 <_vfiprintf_r+0x78>
 80074f2:	460c      	mov	r4, r1
 80074f4:	2001      	movs	r0, #1
 80074f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80074fa:	e7a6      	b.n	800744a <_vfiprintf_r+0xfe>
 80074fc:	2300      	movs	r3, #0
 80074fe:	f04f 0c0a 	mov.w	ip, #10
 8007502:	4619      	mov	r1, r3
 8007504:	3401      	adds	r4, #1
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	4620      	mov	r0, r4
 800750a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800750e:	3a30      	subs	r2, #48	; 0x30
 8007510:	2a09      	cmp	r2, #9
 8007512:	d903      	bls.n	800751c <_vfiprintf_r+0x1d0>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0c6      	beq.n	80074a6 <_vfiprintf_r+0x15a>
 8007518:	9105      	str	r1, [sp, #20]
 800751a:	e7c4      	b.n	80074a6 <_vfiprintf_r+0x15a>
 800751c:	4604      	mov	r4, r0
 800751e:	2301      	movs	r3, #1
 8007520:	fb0c 2101 	mla	r1, ip, r1, r2
 8007524:	e7f0      	b.n	8007508 <_vfiprintf_r+0x1bc>
 8007526:	ab03      	add	r3, sp, #12
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	462a      	mov	r2, r5
 800752c:	4630      	mov	r0, r6
 800752e:	4b13      	ldr	r3, [pc, #76]	; (800757c <_vfiprintf_r+0x230>)
 8007530:	a904      	add	r1, sp, #16
 8007532:	f7fd fd79 	bl	8005028 <_printf_float>
 8007536:	4607      	mov	r7, r0
 8007538:	1c78      	adds	r0, r7, #1
 800753a:	d1d6      	bne.n	80074ea <_vfiprintf_r+0x19e>
 800753c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d405      	bmi.n	800754e <_vfiprintf_r+0x202>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	059a      	lsls	r2, r3, #22
 8007546:	d402      	bmi.n	800754e <_vfiprintf_r+0x202>
 8007548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754a:	f7fe fab3 	bl	8005ab4 <__retarget_lock_release_recursive>
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	065b      	lsls	r3, r3, #25
 8007552:	f53f af1d 	bmi.w	8007390 <_vfiprintf_r+0x44>
 8007556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007558:	e71c      	b.n	8007394 <_vfiprintf_r+0x48>
 800755a:	ab03      	add	r3, sp, #12
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	462a      	mov	r2, r5
 8007560:	4630      	mov	r0, r6
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <_vfiprintf_r+0x230>)
 8007564:	a904      	add	r1, sp, #16
 8007566:	f7fd ffff 	bl	8005568 <_printf_i>
 800756a:	e7e4      	b.n	8007536 <_vfiprintf_r+0x1ea>
 800756c:	08007bf3 	.word	0x08007bf3
 8007570:	08007bf9 	.word	0x08007bf9
 8007574:	08007bfd 	.word	0x08007bfd
 8007578:	08005029 	.word	0x08005029
 800757c:	08007329 	.word	0x08007329

08007580 <__swbuf_r>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	460e      	mov	r6, r1
 8007584:	4614      	mov	r4, r2
 8007586:	4605      	mov	r5, r0
 8007588:	b118      	cbz	r0, 8007592 <__swbuf_r+0x12>
 800758a:	6a03      	ldr	r3, [r0, #32]
 800758c:	b90b      	cbnz	r3, 8007592 <__swbuf_r+0x12>
 800758e:	f7fe f999 	bl	80058c4 <__sinit>
 8007592:	69a3      	ldr	r3, [r4, #24]
 8007594:	60a3      	str	r3, [r4, #8]
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	071a      	lsls	r2, r3, #28
 800759a:	d525      	bpl.n	80075e8 <__swbuf_r+0x68>
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	b31b      	cbz	r3, 80075e8 <__swbuf_r+0x68>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	6922      	ldr	r2, [r4, #16]
 80075a4:	b2f6      	uxtb	r6, r6
 80075a6:	1a98      	subs	r0, r3, r2
 80075a8:	6963      	ldr	r3, [r4, #20]
 80075aa:	4637      	mov	r7, r6
 80075ac:	4283      	cmp	r3, r0
 80075ae:	dc04      	bgt.n	80075ba <__swbuf_r+0x3a>
 80075b0:	4621      	mov	r1, r4
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7ff fdf2 	bl	800719c <_fflush_r>
 80075b8:	b9e0      	cbnz	r0, 80075f4 <__swbuf_r+0x74>
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	3b01      	subs	r3, #1
 80075be:	60a3      	str	r3, [r4, #8]
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	701e      	strb	r6, [r3, #0]
 80075c8:	6962      	ldr	r2, [r4, #20]
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d004      	beq.n	80075da <__swbuf_r+0x5a>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	07db      	lsls	r3, r3, #31
 80075d4:	d506      	bpl.n	80075e4 <__swbuf_r+0x64>
 80075d6:	2e0a      	cmp	r6, #10
 80075d8:	d104      	bne.n	80075e4 <__swbuf_r+0x64>
 80075da:	4621      	mov	r1, r4
 80075dc:	4628      	mov	r0, r5
 80075de:	f7ff fddd 	bl	800719c <_fflush_r>
 80075e2:	b938      	cbnz	r0, 80075f4 <__swbuf_r+0x74>
 80075e4:	4638      	mov	r0, r7
 80075e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e8:	4621      	mov	r1, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f806 	bl	80075fc <__swsetup_r>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d0d5      	beq.n	80075a0 <__swbuf_r+0x20>
 80075f4:	f04f 37ff 	mov.w	r7, #4294967295
 80075f8:	e7f4      	b.n	80075e4 <__swbuf_r+0x64>
	...

080075fc <__swsetup_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <__swsetup_r+0xac>)
 8007600:	4605      	mov	r5, r0
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	460c      	mov	r4, r1
 8007606:	b118      	cbz	r0, 8007610 <__swsetup_r+0x14>
 8007608:	6a03      	ldr	r3, [r0, #32]
 800760a:	b90b      	cbnz	r3, 8007610 <__swsetup_r+0x14>
 800760c:	f7fe f95a 	bl	80058c4 <__sinit>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007616:	0718      	lsls	r0, r3, #28
 8007618:	d422      	bmi.n	8007660 <__swsetup_r+0x64>
 800761a:	06d9      	lsls	r1, r3, #27
 800761c:	d407      	bmi.n	800762e <__swsetup_r+0x32>
 800761e:	2309      	movs	r3, #9
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	e034      	b.n	8007698 <__swsetup_r+0x9c>
 800762e:	0758      	lsls	r0, r3, #29
 8007630:	d512      	bpl.n	8007658 <__swsetup_r+0x5c>
 8007632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007634:	b141      	cbz	r1, 8007648 <__swsetup_r+0x4c>
 8007636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800763a:	4299      	cmp	r1, r3
 800763c:	d002      	beq.n	8007644 <__swsetup_r+0x48>
 800763e:	4628      	mov	r0, r5
 8007640:	f7ff f8b6 	bl	80067b0 <_free_r>
 8007644:	2300      	movs	r3, #0
 8007646:	6363      	str	r3, [r4, #52]	; 0x34
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	2300      	movs	r3, #0
 8007652:	6063      	str	r3, [r4, #4]
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	f043 0308 	orr.w	r3, r3, #8
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	b94b      	cbnz	r3, 8007678 <__swsetup_r+0x7c>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800766a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800766e:	d003      	beq.n	8007678 <__swsetup_r+0x7c>
 8007670:	4621      	mov	r1, r4
 8007672:	4628      	mov	r0, r5
 8007674:	f000 f883 	bl	800777e <__smakebuf_r>
 8007678:	89a0      	ldrh	r0, [r4, #12]
 800767a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800767e:	f010 0301 	ands.w	r3, r0, #1
 8007682:	d00a      	beq.n	800769a <__swsetup_r+0x9e>
 8007684:	2300      	movs	r3, #0
 8007686:	60a3      	str	r3, [r4, #8]
 8007688:	6963      	ldr	r3, [r4, #20]
 800768a:	425b      	negs	r3, r3
 800768c:	61a3      	str	r3, [r4, #24]
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	b943      	cbnz	r3, 80076a4 <__swsetup_r+0xa8>
 8007692:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007696:	d1c4      	bne.n	8007622 <__swsetup_r+0x26>
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	0781      	lsls	r1, r0, #30
 800769c:	bf58      	it	pl
 800769e:	6963      	ldrpl	r3, [r4, #20]
 80076a0:	60a3      	str	r3, [r4, #8]
 80076a2:	e7f4      	b.n	800768e <__swsetup_r+0x92>
 80076a4:	2000      	movs	r0, #0
 80076a6:	e7f7      	b.n	8007698 <__swsetup_r+0x9c>
 80076a8:	20000078 	.word	0x20000078

080076ac <_raise_r>:
 80076ac:	291f      	cmp	r1, #31
 80076ae:	b538      	push	{r3, r4, r5, lr}
 80076b0:	4604      	mov	r4, r0
 80076b2:	460d      	mov	r5, r1
 80076b4:	d904      	bls.n	80076c0 <_raise_r+0x14>
 80076b6:	2316      	movs	r3, #22
 80076b8:	6003      	str	r3, [r0, #0]
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076c2:	b112      	cbz	r2, 80076ca <_raise_r+0x1e>
 80076c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076c8:	b94b      	cbnz	r3, 80076de <_raise_r+0x32>
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 f830 	bl	8007730 <_getpid_r>
 80076d0:	462a      	mov	r2, r5
 80076d2:	4601      	mov	r1, r0
 80076d4:	4620      	mov	r0, r4
 80076d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076da:	f000 b817 	b.w	800770c <_kill_r>
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d00a      	beq.n	80076f8 <_raise_r+0x4c>
 80076e2:	1c59      	adds	r1, r3, #1
 80076e4:	d103      	bne.n	80076ee <_raise_r+0x42>
 80076e6:	2316      	movs	r3, #22
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	2001      	movs	r0, #1
 80076ec:	e7e7      	b.n	80076be <_raise_r+0x12>
 80076ee:	2400      	movs	r4, #0
 80076f0:	4628      	mov	r0, r5
 80076f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076f6:	4798      	blx	r3
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7e0      	b.n	80076be <_raise_r+0x12>

080076fc <raise>:
 80076fc:	4b02      	ldr	r3, [pc, #8]	; (8007708 <raise+0xc>)
 80076fe:	4601      	mov	r1, r0
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	f7ff bfd3 	b.w	80076ac <_raise_r>
 8007706:	bf00      	nop
 8007708:	20000078 	.word	0x20000078

0800770c <_kill_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	2300      	movs	r3, #0
 8007710:	4d06      	ldr	r5, [pc, #24]	; (800772c <_kill_r+0x20>)
 8007712:	4604      	mov	r4, r0
 8007714:	4608      	mov	r0, r1
 8007716:	4611      	mov	r1, r2
 8007718:	602b      	str	r3, [r5, #0]
 800771a:	f7fa fd84 	bl	8002226 <_kill>
 800771e:	1c43      	adds	r3, r0, #1
 8007720:	d102      	bne.n	8007728 <_kill_r+0x1c>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	b103      	cbz	r3, 8007728 <_kill_r+0x1c>
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	bd38      	pop	{r3, r4, r5, pc}
 800772a:	bf00      	nop
 800772c:	20000518 	.word	0x20000518

08007730 <_getpid_r>:
 8007730:	f7fa bd72 	b.w	8002218 <_getpid>

08007734 <__swhatbuf_r>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	460c      	mov	r4, r1
 8007738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773c:	4615      	mov	r5, r2
 800773e:	2900      	cmp	r1, #0
 8007740:	461e      	mov	r6, r3
 8007742:	b096      	sub	sp, #88	; 0x58
 8007744:	da0c      	bge.n	8007760 <__swhatbuf_r+0x2c>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	2100      	movs	r1, #0
 800774a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800774e:	bf0c      	ite	eq
 8007750:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007754:	2340      	movne	r3, #64	; 0x40
 8007756:	2000      	movs	r0, #0
 8007758:	6031      	str	r1, [r6, #0]
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	b016      	add	sp, #88	; 0x58
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	466a      	mov	r2, sp
 8007762:	f000 f849 	bl	80077f8 <_fstat_r>
 8007766:	2800      	cmp	r0, #0
 8007768:	dbed      	blt.n	8007746 <__swhatbuf_r+0x12>
 800776a:	9901      	ldr	r1, [sp, #4]
 800776c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007770:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007774:	4259      	negs	r1, r3
 8007776:	4159      	adcs	r1, r3
 8007778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777c:	e7eb      	b.n	8007756 <__swhatbuf_r+0x22>

0800777e <__smakebuf_r>:
 800777e:	898b      	ldrh	r3, [r1, #12]
 8007780:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007782:	079d      	lsls	r5, r3, #30
 8007784:	4606      	mov	r6, r0
 8007786:	460c      	mov	r4, r1
 8007788:	d507      	bpl.n	800779a <__smakebuf_r+0x1c>
 800778a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	2301      	movs	r3, #1
 8007794:	6163      	str	r3, [r4, #20]
 8007796:	b002      	add	sp, #8
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	466a      	mov	r2, sp
 800779c:	ab01      	add	r3, sp, #4
 800779e:	f7ff ffc9 	bl	8007734 <__swhatbuf_r>
 80077a2:	9900      	ldr	r1, [sp, #0]
 80077a4:	4605      	mov	r5, r0
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7ff f872 	bl	8006890 <_malloc_r>
 80077ac:	b948      	cbnz	r0, 80077c2 <__smakebuf_r+0x44>
 80077ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077b2:	059a      	lsls	r2, r3, #22
 80077b4:	d4ef      	bmi.n	8007796 <__smakebuf_r+0x18>
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	f043 0302 	orr.w	r3, r3, #2
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	e7e3      	b.n	800778a <__smakebuf_r+0xc>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	6020      	str	r0, [r4, #0]
 80077c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	9b00      	ldr	r3, [sp, #0]
 80077ce:	6120      	str	r0, [r4, #16]
 80077d0:	6163      	str	r3, [r4, #20]
 80077d2:	9b01      	ldr	r3, [sp, #4]
 80077d4:	b15b      	cbz	r3, 80077ee <__smakebuf_r+0x70>
 80077d6:	4630      	mov	r0, r6
 80077d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077dc:	f000 f81e 	bl	800781c <_isatty_r>
 80077e0:	b128      	cbz	r0, 80077ee <__smakebuf_r+0x70>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f023 0303 	bic.w	r3, r3, #3
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	431d      	orrs	r5, r3
 80077f2:	81a5      	strh	r5, [r4, #12]
 80077f4:	e7cf      	b.n	8007796 <__smakebuf_r+0x18>
	...

080077f8 <_fstat_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	2300      	movs	r3, #0
 80077fc:	4d06      	ldr	r5, [pc, #24]	; (8007818 <_fstat_r+0x20>)
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	f7fa fd50 	bl	80022aa <_fstat>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d102      	bne.n	8007814 <_fstat_r+0x1c>
 800780e:	682b      	ldr	r3, [r5, #0]
 8007810:	b103      	cbz	r3, 8007814 <_fstat_r+0x1c>
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	bd38      	pop	{r3, r4, r5, pc}
 8007816:	bf00      	nop
 8007818:	20000518 	.word	0x20000518

0800781c <_isatty_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	2300      	movs	r3, #0
 8007820:	4d05      	ldr	r5, [pc, #20]	; (8007838 <_isatty_r+0x1c>)
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f7fa fd4e 	bl	80022c8 <_isatty>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_isatty_r+0x1a>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_isatty_r+0x1a>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	20000518 	.word	0x20000518

0800783c <_init>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr

08007848 <_fini>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr
