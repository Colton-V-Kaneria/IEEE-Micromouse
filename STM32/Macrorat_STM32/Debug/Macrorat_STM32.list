
Macrorat_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007d88  08007d88  00017d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008134  08008134  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008134  08008134  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008134  08008134  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800813c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001e4  08008320  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08008320  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7b0  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dbd  00000000  00000000  0002aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  0002c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095e  00000000  00000000  0002d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018db2  00000000  00000000  0002dd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd40  00000000  00000000  00046b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f9a7  00000000  00000000  00053840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004390  00000000  00000000  000e31e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e7578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d6c 	.word	0x08007d6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007d6c 	.word	0x08007d6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800117c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001184:	e000      	b.n	8001188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <measure_dist>:
static void ADC1_Select_CH9(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t measure_dist(dist_t dist) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;
	GPIO_TypeDef* receiver_port;
	uint16_t receiver_pin;

	switch(dist) {
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d83a      	bhi.n	800122e <measure_dist+0x86>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <measure_dist+0x18>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	080011e9 	.word	0x080011e9
 80011c8:	08001201 	.word	0x08001201
 80011cc:	08001219 	.word	0x08001219
		case FL:
			emitter_port = EMIT_FL_GPIO_Port;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <measure_dist+0xcc>)
 80011d2:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FL_Pin;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_FL_GPIO_Port;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <measure_dist+0xcc>)
 80011dc:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_FL_Pin;
 80011de:	2302      	movs	r3, #2
 80011e0:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH9();
 80011e2:	f000 fe39 	bl	8001e58 <ADC1_Select_CH9>
			break;
 80011e6:	e023      	b.n	8001230 <measure_dist+0x88>
		case L:
			emitter_port = EMIT_L_GPIO_Port;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <measure_dist+0xcc>)
 80011ea:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_L_Pin;
 80011ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f0:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_L_GPIO_Port;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <measure_dist+0xcc>)
 80011f4:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_L_Pin;
 80011f6:	2301      	movs	r3, #1
 80011f8:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH8();
 80011fa:	f000 fe0f 	bl	8001e1c <ADC1_Select_CH8>
			break;
 80011fe:	e017      	b.n	8001230 <measure_dist+0x88>
		case R:
			emitter_port = EMIT_R_GPIO_Port;
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <measure_dist+0xcc>)
 8001202:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_R_Pin;
 8001204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001208:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_R_GPIO_Port;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <measure_dist+0xd0>)
 800120c:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_R_Pin;
 800120e:	2320      	movs	r3, #32
 8001210:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH5();
 8001212:	f000 fde5 	bl	8001de0 <ADC1_Select_CH5>
			break;
 8001216:	e00b      	b.n	8001230 <measure_dist+0x88>
		case FR:
			emitter_port = EMIT_FR_GPIO_Port;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <measure_dist+0xcc>)
 800121a:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FR_Pin;
 800121c:	2320      	movs	r3, #32
 800121e:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_FR_GPIO_Port;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <measure_dist+0xd0>)
 8001222:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_FR_Pin;
 8001224:	2310      	movs	r3, #16
 8001226:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH4();
 8001228:	f000 fdbc 	bl	8001da4 <ADC1_Select_CH4>
			break;
 800122c:	e000      	b.n	8001230 <measure_dist+0x88>
		default:
			break;
 800122e:	bf00      	nop
	}

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 8001230:	8a7b      	ldrh	r3, [r7, #18]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f002 faae 	bl	8003798 <HAL_GPIO_WritePin>
//	HAL_Delay(5);

	HAL_ADC_Start(&hadc1);
 800123c:	480f      	ldr	r0, [pc, #60]	; (800127c <measure_dist+0xd4>)
 800123e:	f001 fc99 	bl	8002b74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001242:	f04f 31ff 	mov.w	r1, #4294967295
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <measure_dist+0xd4>)
 8001248:	f001 fd6e 	bl	8002d28 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <measure_dist+0xd4>)
 800124e:	f001 fe71 	bl	8002f34 <HAL_ADC_GetValue>
 8001252:	4603      	mov	r3, r0
 8001254:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <measure_dist+0xd4>)
 8001258:	f001 fd3a 	bl	8002cd0 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 800125c:	8a7b      	ldrh	r3, [r7, #18]
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f002 fa98 	bl	8003798 <HAL_GPIO_WritePin>

	return adc_val;
 8001268:	893b      	ldrh	r3, [r7, #8]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40010800 	.word	0x40010800
 800127c:	20000200 	.word	0x20000200

08001280 <scaled_average>:

uint16_t scaled_average(dist_t sensor)	// dist tells us which sensor's distance we are measuring
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	static int IR_index = 0;

	IR_data[sensor][IR_index] = measure_dist(sensor); // puts newest distance into array
 800128a:	79fc      	ldrb	r4, [r7, #7]
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <scaled_average+0xe8>)
 800128e:	681d      	ldr	r5, [r3, #0]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff88 	bl	80011a8 <measure_dist>
 8001298:	4603      	mov	r3, r0
 800129a:	4619      	mov	r1, r3
 800129c:	4a33      	ldr	r2, [pc, #204]	; (800136c <scaled_average+0xec>)
 800129e:	4623      	mov	r3, r4
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	1b1b      	subs	r3, r3, r4
 80012a4:	442b      	add	r3, r5
 80012a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	int sum = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 15; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	e00f      	b.n	80012d4 <scaled_average+0x54>
	{
		sum += IR_data[sensor][i];
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	492d      	ldr	r1, [pc, #180]	; (800136c <scaled_average+0xec>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 15; i++)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b0e      	cmp	r3, #14
 80012d8:	ddec      	ble.n	80012b4 <scaled_average+0x34>
	}

	IR_index = (IR_index + 1) % 15;
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <scaled_average+0xe8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <scaled_average+0xf0>)
 80012e2:	fb83 1302 	smull	r1, r3, r3, r2
 80012e6:	4413      	add	r3, r2
 80012e8:	10d9      	asrs	r1, r3, #3
 80012ea:	17d3      	asrs	r3, r2, #31
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	460b      	mov	r3, r1
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	1a5b      	subs	r3, r3, r1
 80012f4:	1ad1      	subs	r1, r2, r3
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <scaled_average+0xe8>)
 80012f8:	6019      	str	r1, [r3, #0]

	return (sum / 15.0) * (wall_nominal[sensor] / (float)(wall_standard[sensor]));
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff f882 	bl	8000404 <__aeabi_i2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <scaled_average+0xf4>)
 8001306:	f7ff fa11 	bl	800072c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	461d      	mov	r5, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <scaled_average+0xf8>)
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fcde 	bl	8000cdc <__aeabi_i2f>
 8001320:	4606      	mov	r6, r0
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a15      	ldr	r2, [pc, #84]	; (800137c <scaled_average+0xfc>)
 8001326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcd2 	bl	8000cd4 <__aeabi_ui2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4630      	mov	r0, r6
 8001336:	f7ff fdd9 	bl	8000eec <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f873 	bl	8000428 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7ff f8c5 	bl	80004d8 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fb97 	bl	8000a88 <__aeabi_d2uiz>
 800135a:	4603      	mov	r3, r0
 800135c:	b29b      	uxth	r3, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001366:	bf00      	nop
 8001368:	200003f0 	.word	0x200003f0
 800136c:	20000310 	.word	0x20000310
 8001370:	88888889 	.word	0x88888889
 8001374:	402e0000 	.word	0x402e0000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000000 	.word	0x20000000

08001380 <calc_v_batt>:

float calc_v_batt()
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	ADC1_Select_CH1();
 8001384:	f000 fcf0 	bl	8001d68 <ADC1_Select_CH1>

	HAL_ADC_Start(&hadc1);
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <calc_v_batt+0x70>)
 800138a:	f001 fbf3 	bl	8002b74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800138e:	f04f 31ff 	mov.w	r1, #4294967295
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <calc_v_batt+0x70>)
 8001394:	f001 fcc8 	bl	8002d28 <HAL_ADC_PollForConversion>
	battery_reading = HAL_ADC_GetValue(&hadc1);
 8001398:	4815      	ldr	r0, [pc, #84]	; (80013f0 <calc_v_batt+0x70>)
 800139a:	f001 fdcb 	bl	8002f34 <HAL_ADC_GetValue>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <calc_v_batt+0x74>)
 80013a4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80013a6:	4812      	ldr	r0, [pc, #72]	; (80013f0 <calc_v_batt+0x70>)
 80013a8:	f001 fc92 	bl	8002cd0 <HAL_ADC_Stop>

	// multiply by ratio to convert to V, then multiply by 3
    return battery_reading * v_ratio * 3;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <calc_v_batt+0x74>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f827 	bl	8000404 <__aeabi_i2d>
 80013b6:	a30c      	add	r3, pc, #48	; (adr r3, 80013e8 <calc_v_batt+0x68>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f88c 	bl	80004d8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <calc_v_batt+0x78>)
 80013ce:	f7ff f883 	bl	80004d8 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fb75 	bl	8000ac8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
//	v_meter = measure_battery(BATTERY);
//	fl_v_meter = (float)(v_meter)/1206;
//	fl_batt_volt = (float)(v_meter*3)/1206;
    //batt volt obtained through voltage division

}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	97635e74 	.word	0x97635e74
 80013ec:	3f4adea8 	.word	0x3f4adea8
 80013f0:	20000200 	.word	0x20000200
 80013f4:	200003dc 	.word	0x200003dc
 80013f8:	40080000 	.word	0x40080000

080013fc <calc_PWM>:

int calc_PWM(float voltage)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	v_batt = calc_v_batt();
 8001404:	f7ff ffbc 	bl	8001380 <calc_v_batt>
 8001408:	4603      	mov	r3, r0
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <calc_PWM+0x3c>)
 800140c:	6013      	str	r3, [r2, #0]
	return (voltage/v_batt)*2047;
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <calc_PWM+0x3c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fd69 	bl	8000eec <__aeabi_fdiv>
 800141a:	4603      	mov	r3, r0
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <calc_PWM+0x40>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fcb0 	bl	8000d84 <__aeabi_fmul>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe72 	bl	8001110 <__aeabi_f2iz>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200003e0 	.word	0x200003e0
 800143c:	44ffe000 	.word	0x44ffe000

08001440 <calc_distance>:

int calc_distance()
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return (d_L + d_R)/2;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <calc_distance+0x1c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <calc_distance+0x20>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4413      	add	r3, r2
 800144e:	0fda      	lsrs	r2, r3, #31
 8001450:	4413      	add	r3, r2
 8001452:	105b      	asrs	r3, r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000398 	.word	0x20000398
 8001460:	2000039c 	.word	0x2000039c
 8001464:	00000000 	.word	0x00000000

08001468 <calc_angle>:

int calc_angle()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
//	else if (angle < -180)
//	{
//		angle += 360;
//	}

	return (int)((d_R - d_L)/(2.0 * RW) * (180.0/M_PI));
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <calc_angle+0x50>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <calc_angle+0x54>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe ffc4 	bl	8000404 <__aeabi_i2d>
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <calc_angle+0x58>)
 8001482:	f7ff f953 	bl	800072c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	a308      	add	r3, pc, #32	; (adr r3, 80014b0 <calc_angle+0x48>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f820 	bl	80004d8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff faca 	bl	8000a38 <__aeabi_d2iz>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	1a63c1f8 	.word	0x1a63c1f8
 80014b4:	404ca5dc 	.word	0x404ca5dc
 80014b8:	2000039c 	.word	0x2000039c
 80014bc:	20000398 	.word	0x20000398
 80014c0:	40548000 	.word	0x40548000
 80014c4:	00000000 	.word	0x00000000

080014c8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	// this is the left encoder timer
	if (htim->Instance == TIM3) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <HAL_TIM_IC_CaptureCallback+0x120>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d13b      	bne.n	8001552 <HAL_TIM_IC_CaptureCallback+0x8a>
		//enc_left = __HAL_TIM_GET_COUNTER(htim);
		raw_count_left = __HAL_TIM_GET_COUNTER(htim);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b42      	ldr	r3, [pc, #264]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x124>)
 80014e4:	801a      	strh	r2, [r3, #0]
		enc_left -= (int16_t)(raw_count_left - prev_count_left);
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a40      	ldr	r2, [pc, #256]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x124>)
 80014ec:	8811      	ldrh	r1, [r2, #0]
 80014ee:	4a41      	ldr	r2, [pc, #260]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014f0:	8812      	ldrh	r2, [r2, #0]
 80014f2:	1a8a      	subs	r2, r1, r2
 80014f4:	b292      	uxth	r2, r2
 80014f6:	b212      	sxth	r2, r2
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014fc:	6013      	str	r3, [r2, #0]
		d_L = (enc_left / 360.0) * (M_PI * diameter);
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ff7e 	bl	8000404 <__aeabi_i2d>
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800150e:	f7ff f90d 	bl	800072c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	a331      	add	r3, pc, #196	; (adr r3, 80015e0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7fe ffda 	bl	80004d8 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fa84 	bl	8000a38 <__aeabi_d2iz>
 8001530:	4603      	mov	r3, r0
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001534:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();	// updates distance whenever d_L changes
 8001536:	f7ff ff83 	bl	8001440 <calc_distance>
 800153a:	4603      	mov	r3, r0
 800153c:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x138>)
 800153e:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 8001540:	f7ff ff92 	bl	8001468 <calc_angle>
 8001544:	4603      	mov	r3, r0
 8001546:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001548:	6013      	str	r3, [r2, #0]

		prev_count_left = raw_count_left;
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x124>)
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001550:	801a      	strh	r2, [r3, #0]
	}
	if (htim->Instance == TIM4) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d13b      	bne.n	80015d4 <HAL_TIM_IC_CaptureCallback+0x10c>
		//enc_right = __HAL_TIM_GET_COUNTER(htim);
		raw_count_right = __HAL_TIM_GET_COUNTER(htim);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001566:	801a      	strh	r2, [r3, #0]
		enc_right -= (int16_t)(raw_count_right - prev_count_right);
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_TIM_IC_CaptureCallback+0x148>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <HAL_TIM_IC_CaptureCallback+0x144>)
 800156e:	8811      	ldrh	r1, [r2, #0]
 8001570:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	1a8a      	subs	r2, r1, r2
 8001576:	b292      	uxth	r2, r2
 8001578:	b212      	sxth	r2, r2
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	4a24      	ldr	r2, [pc, #144]	; (8001610 <HAL_TIM_IC_CaptureCallback+0x148>)
 800157e:	6013      	str	r3, [r2, #0]
		d_R = (enc_right / 360.0) * (M_PI * diameter);
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff3d 	bl	8000404 <__aeabi_i2d>
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001590:	f7ff f8cc 	bl	800072c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	a310      	add	r3, pc, #64	; (adr r3, 80015e0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7fe ff99 	bl	80004d8 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fa43 	bl	8000a38 <__aeabi_d2iz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a18      	ldr	r2, [pc, #96]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x150>)
 80015b6:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();
 80015b8:	f7ff ff42 	bl	8001440 <calc_distance>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x138>)
 80015c0:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 80015c2:	f7ff ff51 	bl	8001468 <calc_angle>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015ca:	6013      	str	r3, [r2, #0]

		prev_count_right = raw_count_right;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_TIM_IC_CaptureCallback+0x144>)
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80015d2:	801a      	strh	r2, [r3, #0]
	}
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	f3af 8000 	nop.w
 80015e0:	54442d18 	.word	0x54442d18
 80015e4:	405921fb 	.word	0x405921fb
 80015e8:	40000400 	.word	0x40000400
 80015ec:	200003c8 	.word	0x200003c8
 80015f0:	20000388 	.word	0x20000388
 80015f4:	200003cc 	.word	0x200003cc
 80015f8:	40768000 	.word	0x40768000
 80015fc:	20000398 	.word	0x20000398
 8001600:	200003a0 	.word	0x200003a0
 8001604:	200003c0 	.word	0x200003c0
 8001608:	40000800 	.word	0x40000800
 800160c:	200003ca 	.word	0x200003ca
 8001610:	2000038c 	.word	0x2000038c
 8001614:	200003ce 	.word	0x200003ce
 8001618:	2000039c 	.word	0x2000039c

0800161c <reset_encoders>:

void reset_encoders()
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	enc_left = 0;
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <reset_encoders+0x18>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
	enc_right = 0;
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <reset_encoders+0x1c>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000388 	.word	0x20000388
 8001638:	2000038c 	.word	0x2000038c

0800163c <wallCheck>:
		sensor = (sensor + 1) % 4;
	} while (sensor != FL);
}

int wallCheck(dist_t sensor)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	if (IR_dists[sensor] > 0.5 * wall_nominal[sensor])
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <wallCheck+0x54>)
 800164a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fed8 	bl	8000404 <__aeabi_i2d>
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <wallCheck+0x58>)
 800165c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fecf 	bl	8000404 <__aeabi_i2d>
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <wallCheck+0x5c>)
 800166c:	f7fe ff34 	bl	80004d8 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7ff f9be 	bl	80009f8 <__aeabi_dcmpgt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <wallCheck+0x4a>
	{
		return 1;
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <wallCheck+0x4c>
	}
	else
	{
		return 0;
 8001686:	2300      	movs	r3, #0
	}
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bdb0      	pop	{r4, r5, r7, pc}
 8001690:	20000308 	.word	0x20000308
 8001694:	20000008 	.word	0x20000008
 8001698:	3fe00000 	.word	0x3fe00000

0800169c <max>:
	return (a < b) ? a : b;
}


float max(float a, float b)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	return (a > b) ? a : b;
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fd27 	bl	80010fc <__aeabi_fcmpgt>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <max+0x1c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	e000      	b.n	80016ba <max+0x1e>
 80016b8:	683b      	ldr	r3, [r7, #0]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <stop>:

	HAL_Delay(50);
}

void stop()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	movement = stopped;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <stop+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]

	// set both motors to stop
	HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d4:	4810      	ldr	r0, [pc, #64]	; (8001718 <stop+0x54>)
 80016d6:	f002 f85f 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e0:	480e      	ldr	r0, [pc, #56]	; (800171c <stop+0x58>)
 80016e2:	f002 f859 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <stop+0x58>)
 80016ee:	f002 f853 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <stop+0x58>)
 80016fa:	f002 f84d 	bl	8003798 <HAL_GPIO_WritePin>

	TIM2->CCR4 = 0;
 80016fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
	TIM2->CCR3 = 0;
 8001706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170a:	2200      	movs	r2, #0
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200003ec 	.word	0x200003ec
 8001718:	40010800 	.word	0x40010800
 800171c:	40010c00 	.word	0x40010c00

08001720 <move_forward>:

void move_forward()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	movement = forward;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <move_forward+0x68>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]

	prev_cell_distance = d_center;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <move_forward+0x6c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <move_forward+0x70>)
 8001730:	6013      	str	r3, [r2, #0]

	// set both motors to move forward
	HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001738:	4816      	ldr	r0, [pc, #88]	; (8001794 <move_forward+0x74>)
 800173a:	f002 f82d 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001744:	4814      	ldr	r0, [pc, #80]	; (8001798 <move_forward+0x78>)
 8001746:	f002 f827 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 1);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <move_forward+0x78>)
 8001752:	f002 f821 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175c:	480e      	ldr	r0, [pc, #56]	; (8001798 <move_forward+0x78>)
 800175e:	f002 f81b 	bl	8003798 <HAL_GPIO_WritePin>

	while (1)
	{
		if (d_center - prev_cell_distance >= 180)
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <move_forward+0x6c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <move_forward+0x70>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2bb3      	cmp	r3, #179	; 0xb3
 800176e:	dc00      	bgt.n	8001772 <move_forward+0x52>
 8001770:	e7f7      	b.n	8001762 <move_forward+0x42>
		{
			break;
 8001772:	bf00      	nop
		}
	}

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <move_forward+0x7c>)
 800177a:	f002 f825 	bl	80037c8 <HAL_GPIO_TogglePin>
	stop();
 800177e:	f7ff ffa1 	bl	80016c4 <stop>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200003ec 	.word	0x200003ec
 800178c:	200003a0 	.word	0x200003a0
 8001790:	200003a8 	.word	0x200003a8
 8001794:	40010800 	.word	0x40010800
 8001798:	40010c00 	.word	0x40010c00
 800179c:	40011000 	.word	0x40011000

080017a0 <right_turn>:
	stop();
	reset_encoders();
}

void right_turn()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	movement = turn_R;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <right_turn+0x74>)
 80017a6:	2203      	movs	r2, #3
 80017a8:	701a      	strb	r2, [r3, #0]

	reset_encoders();
 80017aa:	f7ff ff37 	bl	800161c <reset_encoders>

	initial_angle = angle;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <right_turn+0x78>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1a      	ldr	r2, [pc, #104]	; (800181c <right_turn+0x7c>)
 80017b4:	6013      	str	r3, [r2, #0]

	// set left motor to forward and right motor to backward
	HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 1);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <right_turn+0x80>)
 80017be:	f001 ffeb 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <right_turn+0x84>)
 80017ca:	f001 ffe5 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <right_turn+0x84>)
 80017d6:	f001 ffdf 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 1);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	4810      	ldr	r0, [pc, #64]	; (8001824 <right_turn+0x84>)
 80017e2:	f001 ffd9 	bl	8003798 <HAL_GPIO_WritePin>

	while (1)
	{
	  if (abs(angle - initial_angle) >= 90)
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <right_turn+0x78>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <right_turn+0x7c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bfb8      	it	lt
 80017f4:	425b      	neglt	r3, r3
 80017f6:	2b59      	cmp	r3, #89	; 0x59
 80017f8:	dc00      	bgt.n	80017fc <right_turn+0x5c>
 80017fa:	e7f4      	b.n	80017e6 <right_turn+0x46>
	  {
		 break;
 80017fc:	bf00      	nop
	  }
	}

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <right_turn+0x88>)
 8001804:	f001 ffe0 	bl	80037c8 <HAL_GPIO_TogglePin>
	stop();
 8001808:	f7ff ff5c 	bl	80016c4 <stop>
	reset_encoders();
 800180c:	f7ff ff06 	bl	800161c <reset_encoders>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200003ec 	.word	0x200003ec
 8001818:	200003c0 	.word	0x200003c0
 800181c:	200003c4 	.word	0x200003c4
 8001820:	40010800 	.word	0x40010800
 8001824:	40010c00 	.word	0x40010c00
 8001828:	40011000 	.word	0x40011000

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001830:	f001 f866 	bl	8002900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001834:	f000 f832 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001838:	f000 f9f4 	bl	8001c24 <MX_GPIO_Init>
  MX_TIM2_Init();
 800183c:	f000 f8c8 	bl	80019d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001840:	f000 f888 	bl	8001954 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001844:	f000 f946 	bl	8001ad4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001848:	f000 f998 	bl	8001b7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);		// start timer 2 in interrupt mode
 800184c:	480f      	ldr	r0, [pc, #60]	; (800188c <main+0x60>)
 800184e:	f002 fd8d 	bl	800436c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001852:	2108      	movs	r1, #8
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <main+0x60>)
 8001856:	f002 fe33 	bl	80044c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800185a:	210c      	movs	r1, #12
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <main+0x60>)
 800185e:	f002 fe2f 	bl	80044c0 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001862:	213c      	movs	r1, #60	; 0x3c
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <main+0x64>)
 8001866:	f002 ff6f 	bl	8004748 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800186a:	213c      	movs	r1, #60	; 0x3c
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <main+0x68>)
 800186e:	f002 ff6b 	bl	8004748 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);	//turn off buzzer?
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <main+0x6c>)
 800187a:	f001 ff8d 	bl	8003798 <HAL_GPIO_WritePin>

  move_forward();
 800187e:	f7ff ff4f 	bl	8001720 <move_forward>
  right_turn();
 8001882:	f7ff ff8d 	bl	80017a0 <right_turn>
  move_forward();
 8001886:	f7ff ff4b 	bl	8001720 <move_forward>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800188a:	e7fe      	b.n	800188a <main+0x5e>
 800188c:	20000230 	.word	0x20000230
 8001890:	20000278 	.word	0x20000278
 8001894:	200002c0 	.word	0x200002c0
 8001898:	40010c00 	.word	0x40010c00

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a6:	2228      	movs	r2, #40	; 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 fb1d 	bl	8005eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018da:	2301      	movs	r3, #1
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018de:	2302      	movs	r3, #2
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 ff82 	bl	80037fc <HAL_RCC_OscConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018fe:	f000 fd8d 	bl	800241c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001902:	230f      	movs	r3, #15
 8001904:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001914:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001918:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2102      	movs	r1, #2
 8001920:	4618      	mov	r0, r3
 8001922:	f002 f9ed 	bl	8003d00 <HAL_RCC_ClockConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800192c:	f000 fd76 	bl	800241c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001930:	2302      	movs	r3, #2
 8001932:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fb5a 	bl	8003ff4 <HAL_RCCEx_PeriphCLKConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001946:	f000 fd69 	bl	800241c <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3750      	adds	r7, #80	; 0x50
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_ADC1_Init+0x74>)
 8001966:	4a19      	ldr	r2, [pc, #100]	; (80019cc <MX_ADC1_Init+0x78>)
 8001968:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_ADC1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_ADC1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_ADC1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_ADC1_Init+0x74>)
 800197e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001982:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_ADC1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_ADC1_Init+0x74>)
 800198c:	2201      	movs	r2, #1
 800198e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_ADC1_Init+0x74>)
 8001992:	f001 f817 	bl	80029c4 <HAL_ADC_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 fd3e 	bl	800241c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019a0:	2309      	movs	r3, #9
 80019a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_ADC1_Init+0x74>)
 80019b2:	f001 facb 	bl	8002f4c <HAL_ADC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80019bc:	f000 fd2e 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000200 	.word	0x20000200
 80019cc:	40012400 	.word	0x40012400

080019d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08e      	sub	sp, #56	; 0x38
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a0a:	2248      	movs	r2, #72	; 0x48
 8001a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a28:	4829      	ldr	r0, [pc, #164]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a2a:	f002 fc4f 	bl	80042cc <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a34:	f000 fcf2 	bl	800241c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4822      	ldr	r0, [pc, #136]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a46:	f003 f8f7 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a50:	f000 fce4 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a54:	481e      	ldr	r0, [pc, #120]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a56:	f002 fcdb 	bl	8004410 <HAL_TIM_PWM_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a60:	f000 fcdc 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4619      	mov	r1, r3
 8001a72:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a74:	f003 fc66 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a7e:	f000 fccd 	bl	800241c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a82:	2360      	movs	r3, #96	; 0x60
 8001a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1024;
 8001a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2208      	movs	r2, #8
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001a9c:	f003 f80a 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001aa6:	f000 fcb9 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	220c      	movs	r2, #12
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001ab2:	f002 ffff 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001abc:	f000 fcae 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM2_Init+0x100>)
 8001ac2:	f000 fdd7 	bl	8002674 <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3738      	adds	r7, #56	; 0x38
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000230 	.word	0x20000230

08001ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	2224      	movs	r2, #36	; 0x24
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 fa01 	bl	8005eea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001af2:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <MX_TIM3_Init+0xa4>)
 8001af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b16:	2303      	movs	r3, #3
 8001b18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001b42:	f002 fd5f 	bl	8004604 <HAL_TIM_Encoder_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b4c:	f000 fc66 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_TIM3_Init+0xa0>)
 8001b5e:	f003 fbf1 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b68:	f000 fc58 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3730      	adds	r7, #48	; 0x30
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000278 	.word	0x20000278
 8001b78:	40000400 	.word	0x40000400

08001b7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 f9ad 	bl	8005eea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b98:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001b9a:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <MX_TIM4_Init+0xa4>)
 8001b9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	4619      	mov	r1, r3
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001bea:	f002 fd0b 	bl	8004604 <HAL_TIM_Encoder_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001bf4:	f000 fc12 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_TIM4_Init+0xa0>)
 8001c06:	f003 fb9d 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c10:	f000 fc04 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200002c0 	.word	0x200002c0
 8001c20:	40000800 	.word	0x40000800

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c38:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a38      	ldr	r2, [pc, #224]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a32      	ldr	r2, [pc, #200]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9e:	4821      	ldr	r0, [pc, #132]	; (8001d24 <MX_GPIO_Init+0x100>)
 8001ca0:	f001 fd7a 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f64f 5120 	movw	r1, #64800	; 0xfd20
 8001caa:	481f      	ldr	r0, [pc, #124]	; (8001d28 <MX_GPIO_Init+0x104>)
 8001cac:	f001 fd74 	bl	8003798 <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb6:	481d      	ldr	r0, [pc, #116]	; (8001d2c <MX_GPIO_Init+0x108>)
 8001cb8:	f001 fd6e 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4813      	ldr	r0, [pc, #76]	; (8001d24 <MX_GPIO_Init+0x100>)
 8001cd6:	f001 fbdb 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_FWD_Pin
                           ML_BWD_Pin MR_BWD_Pin EMIT_FR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8001cda:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001cde:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480d      	ldr	r0, [pc, #52]	; (8001d28 <MX_GPIO_Init+0x104>)
 8001cf4:	f001 fbcc 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : ML_FWD_Pin */
  GPIO_InitStruct.Pin = ML_FWD_Pin;
 8001cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_GPIO_Init+0x108>)
 8001d12:	f001 fbbd 	bl	8003490 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40011000 	.word	0x40011000
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40010800 	.word	0x40010800

08001d30 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e009      	b.n	8001d56 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	60ba      	str	r2, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fa06 	bl	800115c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dbf1      	blt.n	8001d42 <_write+0x12>
  }
  return len;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <ADC1_Select_CH1>:

static void ADC1_Select_CH1(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001d80:	2301      	movs	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <ADC1_Select_CH1+0x38>)
 8001d8a:	f001 f8df 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <ADC1_Select_CH1+0x30>
	{
		Error_Handler();
 8001d94:	f000 fb42 	bl	800241c <Error_Handler>
	}
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000200 	.word	0x20000200

08001da4 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8001db4:	2304      	movs	r3, #4
 8001db6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <ADC1_Select_CH4+0x38>)
 8001dc6:	f001 f8c1 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <ADC1_Select_CH4+0x30>
	{
		Error_Handler();
 8001dd0:	f000 fb24 	bl	800241c <Error_Handler>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000200 	.word	0x20000200

08001de0 <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8001df0:	2305      	movs	r3, #5
 8001df2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <ADC1_Select_CH5+0x38>)
 8001e02:	f001 f8a3 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <ADC1_Select_CH5+0x30>
	{
		Error_Handler();
 8001e0c:	f000 fb06 	bl	800241c <Error_Handler>
	}
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000200 	.word	0x20000200

08001e1c <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001e34:	2301      	movs	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <ADC1_Select_CH8+0x38>)
 8001e3e:	f001 f885 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <ADC1_Select_CH8+0x30>
	{
		Error_Handler();
 8001e48:	f000 fae8 	bl	800241c <Error_Handler>
	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000200 	.word	0x20000200

08001e58 <ADC1_Select_CH9>:

static void ADC1_Select_CH9(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8001e68:	2309      	movs	r3, #9
 8001e6a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001e70:	2301      	movs	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	; (8001e90 <ADC1_Select_CH9+0x38>)
 8001e7a:	f001 f867 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <ADC1_Select_CH9+0x30>
	{
		Error_Handler();
 8001e84:	f000 faca 	bl	800241c <Error_Handler>
	}
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000200 	.word	0x20000200
 8001e94:	00000000 	.word	0x00000000

08001e98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	if (time_count % ((int)(callback_period * 1000)) == 0)
	{
		switch(movement)
 8001ea0:	4b97      	ldr	r3, [pc, #604]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	f200 829f 	bhi.w	80023e8 <HAL_TIM_PeriodElapsedCallback+0x550>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	080023e9 	.word	0x080023e9
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08002155 	.word	0x08002155
 8001ebc:	08002231 	.word	0x08002231
 8001ec0:	0800230d 	.word	0x0800230d
		{
			case stopped:
				break;
			case forward:
				angle = 0;
 8001ec4:	4b8f      	ldr	r3, [pc, #572]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

				fwd_movement = d_center - prev_d_center;
 8001eca:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b8f      	ldr	r3, [pc, #572]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	4a8e      	ldr	r2, [pc, #568]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ed6:	6013      	str	r3, [r2, #0]

				// find the difference between intended distance and actual distance
				fwd_error = fwd_movement - intended_distance;
 8001ed8:	4b8d      	ldr	r3, [pc, #564]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	4a8d      	ldr	r2, [pc, #564]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ee4:	6013      	str	r3, [r2, #0]

				IR_dists[L] = scaled_average(L);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff f9ca 	bl	8001280 <scaled_average>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b8a      	ldr	r3, [pc, #552]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ef2:	805a      	strh	r2, [r3, #2]
				IR_dists[R] = scaled_average(R);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff f9c3 	bl	8001280 <scaled_average>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b87      	ldr	r3, [pc, #540]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f00:	809a      	strh	r2, [r3, #4]

				left_side_error = wall_nominal[L] - IR_dists[L];
 8001f02:	4b87      	ldr	r3, [pc, #540]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001f04:	885b      	ldrh	r3, [r3, #2]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b84      	ldr	r3, [pc, #528]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	4a85      	ldr	r2, [pc, #532]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f10:	6013      	str	r3, [r2, #0]
				right_side_error = wall_nominal[R] - IR_dists[R];
 8001f12:	4b83      	ldr	r3, [pc, #524]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001f14:	889b      	ldrh	r3, [r3, #4]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b80      	ldr	r3, [pc, #512]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	4a82      	ldr	r2, [pc, #520]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f20:	6013      	str	r3, [r2, #0]

				if (wallCheck(L) && wallCheck(R))
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff fb8a 	bl	800163c <wallCheck>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff fb84 	bl	800163c <wallCheck>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_TIM_PeriodElapsedCallback+0xb8>
				{
					str_error = right_side_error - left_side_error;
 8001f3a:	4b7b      	ldr	r3, [pc, #492]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b79      	ldr	r3, [pc, #484]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a79      	ldr	r2, [pc, #484]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001f46:	6013      	str	r3, [r2, #0]
					rot_error = 0;
 8001f48:	4b79      	ldr	r3, [pc, #484]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e009      	b.n	8001f64 <HAL_TIM_PeriodElapsedCallback+0xcc>
				}
				else	// no walls on either side
				{
					rot_error = enc_right - enc_left; // right diff - left diff
 8001f50:	4b78      	ldr	r3, [pc, #480]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b78      	ldr	r3, [pc, #480]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	4a75      	ldr	r2, [pc, #468]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f5c:	6013      	str	r3, [r2, #0]
					str_error = 0;
 8001f5e:	4b73      	ldr	r3, [pc, #460]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
				}

				new_v_motor_L = base_v_fwd_L - K_fwd * fwd_error + K_rot * rot_error + K_str * str_error;
 8001f64:	4b75      	ldr	r3, [pc, #468]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fa5e 	bl	8000428 <__aeabi_f2d>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	460d      	mov	r5, r1
 8001f70:	4b69      	ldr	r3, [pc, #420]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fa45 	bl	8000404 <__aeabi_i2d>
 8001f7a:	a35b      	add	r3, pc, #364	; (adr r3, 80020e8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe faaa 	bl	80004d8 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4620      	mov	r0, r4
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	f7fe f8ec 	bl	8000168 <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4614      	mov	r4, r2
 8001f96:	461d      	mov	r5, r3
 8001f98:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa31 	bl	8000404 <__aeabi_i2d>
 8001fa2:	a353      	add	r3, pc, #332	; (adr r3, 80020f0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fa96 	bl	80004d8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe f8da 	bl	800016c <__adddf3>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4614      	mov	r4, r2
 8001fbe:	461d      	mov	r5, r3
 8001fc0:	4b5a      	ldr	r3, [pc, #360]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fa1d 	bl	8000404 <__aeabi_i2d>
 8001fca:	a34b      	add	r3, pc, #300	; (adr r3, 80020f8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fa82 	bl	80004d8 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe f8c6 	bl	800016c <__adddf3>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd6e 	bl	8000ac8 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a54      	ldr	r2, [pc, #336]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ff0:	6013      	str	r3, [r2, #0]
				new_v_motor_L = max(new_v_motor_L, 0);
 8001ff2:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fb4e 	bl	800169c <max>
 8002000:	4603      	mov	r3, r0
 8002002:	4a4f      	ldr	r2, [pc, #316]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002004:	6013      	str	r3, [r2, #0]
				new_v_motor_R = base_v_fwd_R - K_fwd * fwd_error - K_rot * rot_error - K_str * str_error;
 8002006:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa0d 	bl	8000428 <__aeabi_f2d>
 800200e:	4604      	mov	r4, r0
 8002010:	460d      	mov	r5, r1
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe f9f4 	bl	8000404 <__aeabi_i2d>
 800201c:	a332      	add	r3, pc, #200	; (adr r3, 80020e8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fa59 	bl	80004d8 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe f89b 	bl	8000168 <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4614      	mov	r4, r2
 8002038:	461d      	mov	r5, r3
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f9e0 	bl	8000404 <__aeabi_i2d>
 8002044:	a32a      	add	r3, pc, #168	; (adr r3, 80020f0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fa45 	bl	80004d8 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe f887 	bl	8000168 <__aeabi_dsub>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4614      	mov	r4, r2
 8002060:	461d      	mov	r5, r3
 8002062:	4b32      	ldr	r3, [pc, #200]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9cc 	bl	8000404 <__aeabi_i2d>
 800206c:	a322      	add	r3, pc, #136	; (adr r3, 80020f8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe fa31 	bl	80004d8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	f7fe f873 	bl	8000168 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fd1d 	bl	8000ac8 <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	4a2d      	ldr	r2, [pc, #180]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002092:	6013      	str	r3, [r2, #0]
				new_v_motor_R = max(new_v_motor_R, 0);
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fafd 	bl	800169c <max>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80020a6:	6013      	str	r3, [r2, #0]

				// IMPORTANT: left motor is channel 4, right motor is channel 3
				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff f9a5 	bl	80013fc <calc_PWM>
 80020b2:	4602      	mov	r2, r0
 80020b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff f99c 	bl	80013fc <calc_PWM>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ca:	63da      	str	r2, [r3, #60]	; 0x3c

				prev_d_center = d_center;
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020d2:	6013      	str	r3, [r2, #0]
				prev_enc_left = enc_left;
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80020da:	6013      	str	r3, [r2, #0]
				prev_enc_right = enc_right;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80020e2:	6013      	str	r3, [r2, #0]
				break;
 80020e4:	e180      	b.n	80023e8 <HAL_TIM_PeriodElapsedCallback+0x550>
 80020e6:	bf00      	nop
 80020e8:	9999999a 	.word	0x9999999a
 80020ec:	3fb99999 	.word	0x3fb99999
 80020f0:	47ae147b 	.word	0x47ae147b
 80020f4:	3f747ae1 	.word	0x3f747ae1
 80020f8:	eb1c432d 	.word	0xeb1c432d
 80020fc:	3f3a36e2 	.word	0x3f3a36e2
 8002100:	200003ec 	.word	0x200003ec
 8002104:	200003c0 	.word	0x200003c0
 8002108:	200003a0 	.word	0x200003a0
 800210c:	200003a4 	.word	0x200003a4
 8002110:	200003d0 	.word	0x200003d0
 8002114:	200003e4 	.word	0x200003e4
 8002118:	200003ac 	.word	0x200003ac
 800211c:	20000308 	.word	0x20000308
 8002120:	20000008 	.word	0x20000008
 8002124:	200003b8 	.word	0x200003b8
 8002128:	200003bc 	.word	0x200003bc
 800212c:	200003b4 	.word	0x200003b4
 8002130:	200003b0 	.word	0x200003b0
 8002134:	2000038c 	.word	0x2000038c
 8002138:	20000388 	.word	0x20000388
 800213c:	3ee66666 	.word	0x3ee66666
 8002140:	200003d4 	.word	0x200003d4
 8002144:	3f24bc6a 	.word	0x3f24bc6a
 8002148:	200003d8 	.word	0x200003d8
 800214c:	20000390 	.word	0x20000390
 8002150:	20000394 	.word	0x20000394
			case turn_L:
				rot_error = enc_right + enc_left;
 8002154:	4ba9      	ldr	r3, [pc, #676]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4ba9      	ldr	r3, [pc, #676]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4413      	add	r3, r2
 800215e:	4aa9      	ldr	r2, [pc, #676]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002160:	6013      	str	r3, [r2, #0]

				new_v_motor_L = base_v_turn_L + K_turn * rot_error;	// angle is positive here so we should be good
 8002162:	4ba9      	ldr	r3, [pc, #676]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f95f 	bl	8000428 <__aeabi_f2d>
 800216a:	4604      	mov	r4, r0
 800216c:	460d      	mov	r5, r1
 800216e:	4ba5      	ldr	r3, [pc, #660]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f946 	bl	8000404 <__aeabi_i2d>
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	f7fe f9aa 	bl	80004d8 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fd ffee 	bl	800016c <__adddf3>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fc96 	bl	8000ac8 <__aeabi_d2f>
 800219c:	4603      	mov	r3, r0
 800219e:	4a9b      	ldr	r2, [pc, #620]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80021a0:	6013      	str	r3, [r2, #0]
				new_v_motor_L = max(new_v_motor_L, 0);
 80021a2:	4b9a      	ldr	r3, [pc, #616]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fa76 	bl	800169c <max>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a96      	ldr	r2, [pc, #600]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80021b4:	6013      	str	r3, [r2, #0]
				new_v_motor_R = base_v_turn_R - K_turn * rot_error;
 80021b6:	4b96      	ldr	r3, [pc, #600]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f935 	bl	8000428 <__aeabi_f2d>
 80021be:	4604      	mov	r4, r0
 80021c0:	460d      	mov	r5, r1
 80021c2:	4b90      	ldr	r3, [pc, #576]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f91c 	bl	8000404 <__aeabi_i2d>
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	f7fe f980 	bl	80004d8 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4620      	mov	r0, r4
 80021de:	4629      	mov	r1, r5
 80021e0:	f7fd ffc2 	bl	8000168 <__aeabi_dsub>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fc6c 	bl	8000ac8 <__aeabi_d2f>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a88      	ldr	r2, [pc, #544]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80021f4:	6013      	str	r3, [r2, #0]
				new_v_motor_R = max(new_v_motor_R, 0);
 80021f6:	4b87      	ldr	r3, [pc, #540]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f04f 0100 	mov.w	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fa4c 	bl	800169c <max>
 8002204:	4603      	mov	r3, r0
 8002206:	4a83      	ldr	r2, [pc, #524]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002208:	6013      	str	r3, [r2, #0]

				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 800220a:	4b80      	ldr	r3, [pc, #512]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f8f4 	bl	80013fc <calc_PWM>
 8002214:	4602      	mov	r2, r0
 8002216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 800221c:	4b7d      	ldr	r3, [pc, #500]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f8eb 	bl	80013fc <calc_PWM>
 8002226:	4602      	mov	r2, r0
 8002228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800222e:	e0db      	b.n	80023e8 <HAL_TIM_PeriodElapsedCallback+0x550>
			case turn_R:
				rot_error = enc_left + enc_right;
 8002230:	4b73      	ldr	r3, [pc, #460]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b71      	ldr	r3, [pc, #452]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4413      	add	r3, r2
 800223a:	4a72      	ldr	r2, [pc, #456]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800223c:	6013      	str	r3, [r2, #0]

				new_v_motor_L = base_v_turn_L - K_turn * rot_error;
 800223e:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f8f1 	bl	8000428 <__aeabi_f2d>
 8002246:	4604      	mov	r4, r0
 8002248:	460d      	mov	r5, r1
 800224a:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f8d8 	bl	8000404 <__aeabi_i2d>
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	f7fe f93c 	bl	80004d8 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f7fd ff7e 	bl	8000168 <__aeabi_dsub>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc28 	bl	8000ac8 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	4a64      	ldr	r2, [pc, #400]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800227c:	6013      	str	r3, [r2, #0]
				new_v_motor_L = max(new_v_motor_L, 0);
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fa08 	bl	800169c <max>
 800228c:	4603      	mov	r3, r0
 800228e:	4a5f      	ldr	r2, [pc, #380]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002290:	6013      	str	r3, [r2, #0]
				new_v_motor_R = base_v_turn_R + K_turn * rot_error;
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f8c7 	bl	8000428 <__aeabi_f2d>
 800229a:	4604      	mov	r4, r0
 800229c:	460d      	mov	r5, r1
 800229e:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f8ae 	bl	8000404 <__aeabi_i2d>
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	f7fe f912 	bl	80004d8 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fd ff56 	bl	800016c <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fbfe 	bl	8000ac8 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a51      	ldr	r2, [pc, #324]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80022d0:	6013      	str	r3, [r2, #0]
				new_v_motor_R = max(new_v_motor_R, 0);
 80022d2:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f9de 	bl	800169c <max>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a4c      	ldr	r2, [pc, #304]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80022e4:	6013      	str	r3, [r2, #0]

				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f886 	bl	80013fc <calc_PWM>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 80022f8:	4b46      	ldr	r3, [pc, #280]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f87d 	bl	80013fc <calc_PWM>
 8002302:	4602      	mov	r2, r0
 8002304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800230a:	e06d      	b.n	80023e8 <HAL_TIM_PeriodElapsedCallback+0x550>
			case turn_180:
				rot_error = enc_right + enc_left;
 800230c:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x564>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4413      	add	r3, r2
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002318:	6013      	str	r3, [r2, #0]

				new_v_motor_L = base_v_turn_L + K_turn * rot_error;
 800231a:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f883 	bl	8000428 <__aeabi_f2d>
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f86a 	bl	8000404 <__aeabi_i2d>
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	f7fe f8ce 	bl	80004d8 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4620      	mov	r0, r4
 8002342:	4629      	mov	r1, r5
 8002344:	f7fd ff12 	bl	800016c <__adddf3>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fbba 	bl	8000ac8 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002358:	6013      	str	r3, [r2, #0]
				new_v_motor_L = max(new_v_motor_L, 0);
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f99a 	bl	800169c <max>
 8002368:	4603      	mov	r3, r0
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800236c:	6013      	str	r3, [r2, #0]
				new_v_motor_R = base_v_turn_R - K_turn * rot_error;
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f859 	bl	8000428 <__aeabi_f2d>
 8002376:	4604      	mov	r4, r0
 8002378:	460d      	mov	r5, r1
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f840 	bl	8000404 <__aeabi_i2d>
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	f7fe f8a4 	bl	80004d8 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd fee6 	bl	8000168 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7fe fb90 	bl	8000ac8 <__aeabi_d2f>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80023ac:	6013      	str	r3, [r2, #0]
				new_v_motor_R = max(new_v_motor_R, 0);
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f970 	bl	800169c <max>
 80023bc:	4603      	mov	r3, r0
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80023c0:	6013      	str	r3, [r2, #0]

				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f818 	bl	80013fc <calc_PWM>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f80f 	bl	80013fc <calc_PWM>
 80023de:	4602      	mov	r2, r0
 80023e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80023e6:	bf00      	nop
		}
	}

	time_count++;
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80023f0:	6013      	str	r3, [r2, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000038c 	.word	0x2000038c
 8002400:	20000388 	.word	0x20000388
 8002404:	200003b0 	.word	0x200003b0
 8002408:	3f07ae14 	.word	0x3f07ae14
 800240c:	200003d4 	.word	0x200003d4
 8002410:	3f3eb852 	.word	0x3f3eb852
 8002414:	200003d8 	.word	0x200003d8
 8002418:	200003e8 	.word	0x200003e8

0800241c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002424:	e7fe      	b.n	8002424 <Error_Handler+0x8>
	...

08002428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_MspInit+0x5c>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_MspInit+0x5c>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6193      	str	r3, [r2, #24]
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_MspInit+0x5c>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_MspInit+0x5c>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_MspInit+0x5c>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_MspInit+0x5c>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_MspInit+0x60>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_MspInit+0x60>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000
 8002488:	40010000 	.word	0x40010000

0800248c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_ADC_MspInit+0x98>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d137      	bne.n	800251c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a17      	ldr	r2, [pc, #92]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	6193      	str	r3, [r2, #24]
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_ADC_MspInit+0x9c>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_METER_Pin|RECIV_FR_Pin|RECIV_R_Pin;
 80024f4:	2332      	movs	r3, #50	; 0x32
 80024f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f8:	2303      	movs	r3, #3
 80024fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	4619      	mov	r1, r3
 8002502:	480a      	ldr	r0, [pc, #40]	; (800252c <HAL_ADC_MspInit+0xa0>)
 8002504:	f000 ffc4 	bl	8003490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 8002508:	2303      	movs	r3, #3
 800250a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250c:	2303      	movs	r3, #3
 800250e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0318 	add.w	r3, r7, #24
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <HAL_ADC_MspInit+0xa4>)
 8002518:	f000 ffba 	bl	8003490 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012400 	.word	0x40012400
 8002528:	40021000 	.word	0x40021000
 800252c:	40010800 	.word	0x40010800
 8002530:	40010c00 	.word	0x40010c00

08002534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d113      	bne.n	800256e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_TIM_Base_MspInit+0x44>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <HAL_TIM_Base_MspInit+0x44>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	61d3      	str	r3, [r2, #28]
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_TIM_Base_MspInit+0x44>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	210f      	movs	r1, #15
 8002562:	201c      	movs	r0, #28
 8002564:	f000 ff5d 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002568:	201c      	movs	r0, #28
 800256a:	f000 ff76 	bl	800345a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0318 	add.w	r3, r7, #24
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a32      	ldr	r2, [pc, #200]	; (8002660 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d12c      	bne.n	80025f6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4a30      	ldr	r2, [pc, #192]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	61d3      	str	r3, [r2, #28]
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	4619      	mov	r1, r3
 80025de:	4822      	ldr	r0, [pc, #136]	; (8002668 <HAL_TIM_Encoder_MspInit+0xec>)
 80025e0:	f000 ff56 	bl	8003490 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2100      	movs	r1, #0
 80025e8:	201d      	movs	r0, #29
 80025ea:	f000 ff1a 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025ee:	201d      	movs	r0, #29
 80025f0:	f000 ff33 	bl	800345a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025f4:	e030      	b.n	8002658 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <HAL_TIM_Encoder_MspInit+0xf0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d12b      	bne.n	8002658 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	61d3      	str	r3, [r2, #28]
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a11      	ldr	r2, [pc, #68]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8002630:	23c0      	movs	r3, #192	; 0xc0
 8002632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	4619      	mov	r1, r3
 8002642:	480b      	ldr	r0, [pc, #44]	; (8002670 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002644:	f000 ff24 	bl	8003490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	201e      	movs	r0, #30
 800264e:	f000 fee8 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002652:	201e      	movs	r0, #30
 8002654:	f000 ff01 	bl	800345a <HAL_NVIC_EnableIRQ>
}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40000400 	.word	0x40000400
 8002664:	40021000 	.word	0x40021000
 8002668:	40010800 	.word	0x40010800
 800266c:	40000800 	.word	0x40000800
 8002670:	40010c00 	.word	0x40010c00

08002674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002692:	d117      	bne.n	80026c4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_TIM_MspPostInit+0x58>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_TIM_MspPostInit+0x58>)
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	6193      	str	r3, [r2, #24]
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_TIM_MspPostInit+0x58>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 80026ac:	230c      	movs	r3, #12
 80026ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2302      	movs	r3, #2
 80026b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4619      	mov	r1, r3
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <HAL_TIM_MspPostInit+0x5c>)
 80026c0:	f000 fee6 	bl	8003490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010800 	.word	0x40010800

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271a:	f000 f937 	bl	800298c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <TIM2_IRQHandler+0x10>)
 800272a:	f002 f8bb 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000230 	.word	0x20000230

08002738 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM3_IRQHandler+0x10>)
 800273e:	f002 f8b1 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000278 	.word	0x20000278

0800274c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TIM4_IRQHandler+0x10>)
 8002752:	f002 f8a7 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200002c0 	.word	0x200002c0

08002760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <_kill>:

int _kill(int pid, int sig)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002778:	f003 fc0a 	bl	8005f90 <__errno>
 800277c:	4603      	mov	r3, r0
 800277e:	2216      	movs	r2, #22
 8002780:	601a      	str	r2, [r3, #0]
  return -1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_exit>:

void _exit (int status)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002796:	f04f 31ff 	mov.w	r1, #4294967295
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffe7 	bl	800276e <_kill>
  while (1) {}    /* Make sure we hang here */
 80027a0:	e7fe      	b.n	80027a0 <_exit+0x12>

080027a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e00a      	b.n	80027ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027b4:	f3af 8000 	nop.w
 80027b8:	4601      	mov	r1, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	60ba      	str	r2, [r7, #8]
 80027c0:	b2ca      	uxtb	r2, r1
 80027c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3301      	adds	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	dbf0      	blt.n	80027b4 <_read+0x12>
  }

  return len;
 80027d2:	687b      	ldr	r3, [r7, #4]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002802:	605a      	str	r2, [r3, #4]
  return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <_isatty>:

int _isatty(int file)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <_sbrk+0x5c>)
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <_sbrk+0x60>)
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <_sbrk+0x64>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <_sbrk+0x64>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <_sbrk+0x68>)
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d207      	bcs.n	800287c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800286c:	f003 fb90 	bl	8005f90 <__errno>
 8002870:	4603      	mov	r3, r0
 8002872:	220c      	movs	r2, #12
 8002874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e009      	b.n	8002890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a05      	ldr	r2, [pc, #20]	; (80028a0 <_sbrk+0x64>)
 800288c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20005000 	.word	0x20005000
 800289c:	00000400 	.word	0x00000400
 80028a0:	200003f4 	.word	0x200003f4
 80028a4:	20000548 	.word	0x20000548

080028a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028b4:	f7ff fff8 	bl	80028a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b8:	480b      	ldr	r0, [pc, #44]	; (80028e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028ba:	490c      	ldr	r1, [pc, #48]	; (80028ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028bc:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028d0:	4c09      	ldr	r4, [pc, #36]	; (80028f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028de:	f003 fb5d 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028e2:	f7fe ffa3 	bl	800182c <main>
  bx lr
 80028e6:	4770      	bx	lr
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80028f0:	0800813c 	.word	0x0800813c
  ldr r2, =_sbss
 80028f4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80028f8:	20000548 	.word	0x20000548

080028fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC1_2_IRQHandler>
	...

08002900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_Init+0x28>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_Init+0x28>)
 800290a:	f043 0310 	orr.w	r3, r3, #16
 800290e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002910:	2003      	movs	r0, #3
 8002912:	f000 fd7b 	bl	800340c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002916:	200e      	movs	r0, #14
 8002918:	f000 f808 	bl	800292c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800291c:	f7ff fd84 	bl	8002428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40022000 	.word	0x40022000

0800292c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_InitTick+0x54>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_InitTick+0x58>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002942:	fbb3 f3f1 	udiv	r3, r3, r1
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fd93 	bl	8003476 <HAL_SYSTICK_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00e      	b.n	8002978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b0f      	cmp	r3, #15
 800295e:	d80a      	bhi.n	8002976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f000 fd5b 	bl	8003422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800296c:	4a06      	ldr	r2, [pc, #24]	; (8002988 <HAL_InitTick+0x5c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000010 	.word	0x20000010
 8002984:	20000018 	.word	0x20000018
 8002988:	20000014 	.word	0x20000014

0800298c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_IncTick+0x1c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_IncTick+0x20>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a03      	ldr	r2, [pc, #12]	; (80029ac <HAL_IncTick+0x20>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	20000018 	.word	0x20000018
 80029ac:	200003f8 	.word	0x200003f8

080029b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return uwTick;
 80029b4:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <HAL_GetTick+0x10>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	200003f8 	.word	0x200003f8

080029c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0be      	b.n	8002b64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fd42 	bl	800248c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fbf1 	bl	80031f0 <ADC_ConversionStop_Disable>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8099 	bne.w	8002b52 <HAL_ADC_Init+0x18e>
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8095 	bne.w	8002b52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	f043 0202 	orr.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7b1b      	ldrb	r3, [r3, #12]
 8002a4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5c:	d003      	beq.n	8002a66 <HAL_ADC_Init+0xa2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d102      	bne.n	8002a6c <HAL_ADC_Init+0xa8>
 8002a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6a:	e000      	b.n	8002a6e <HAL_ADC_Init+0xaa>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7d1b      	ldrb	r3, [r3, #20]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d119      	bne.n	8002ab0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7b1b      	ldrb	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	035a      	lsls	r2, r3, #13
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	e00b      	b.n	8002ab0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <HAL_ADC_Init+0x1a8>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae0:	d003      	beq.n	8002aea <HAL_ADC_Init+0x126>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d104      	bne.n	8002af4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_ADC_Init+0x1ac>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b2e:	e018      	b.n	8002b62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	f023 0312 	bic.w	r3, r3, #18
 8002b38:	f043 0210 	orr.w	r2, r3, #16
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b50:	e007      	b.n	8002b62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	ffe1f7fd 	.word	0xffe1f7fd
 8002b70:	ff1f0efe 	.word	0xff1f0efe

08002b74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_Start+0x1a>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e098      	b.n	8002cc0 <HAL_ADC_Start+0x14c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fad0 	bl	800313c <ADC_Enable>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 8087 	bne.w	8002cb6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <HAL_ADC_Start+0x154>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_Start+0x5e>
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_ADC_Start+0x158>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d026      	beq.n	8002c3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bfc:	e01d      	b.n	8002c3a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <HAL_ADC_Start+0x158>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_ADC_Start+0xaa>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <HAL_ADC_Start+0x154>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <HAL_ADC_Start+0xc6>
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_ADC_Start+0x158>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f023 0206 	bic.w	r2, r3, #6
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c52:	e002      	b.n	8002c5a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0202 	mvn.w	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c7a:	d113      	bne.n	8002ca4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_ADC_Start+0x154>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d105      	bne.n	8002c92 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_ADC_Start+0x158>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	e00c      	b.n	8002cbe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e003      	b.n	8002cbe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40012800 	.word	0x40012800
 8002ccc:	40012400 	.word	0x40012400

08002cd0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Stop+0x1a>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e01a      	b.n	8002d20 <HAL_ADC_Stop+0x50>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa7c 	bl	80031f0 <ADC_ConversionStop_Disable>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d3e:	f7ff fe37 	bl	80029b0 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0d3      	b.n	8002f12 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d131      	bne.n	8002ddc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d12a      	bne.n	8002ddc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d86:	e021      	b.n	8002dcc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d01d      	beq.n	8002dcc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_ADC_PollForConversion+0x7e>
 8002d96:	f7ff fe0b 	bl	80029b0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d212      	bcs.n	8002dcc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0a2      	b.n	8002f12 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0d6      	beq.n	8002d88 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dda:	e070      	b.n	8002ebe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_ADC_PollForConversion+0x1f4>)
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	2002      	movs	r0, #2
 8002de2:	f001 f9bd 	bl	8004160 <HAL_RCCEx_GetPeriphCLKFreq>
 8002de6:	4603      	mov	r3, r0
 8002de8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <HAL_ADC_PollForConversion+0x1f8>)
 8002df4:	400b      	ands	r3, r1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_ADC_PollForConversion+0x104>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_ADC_PollForConversion+0x1fc>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_ADC_PollForConversion+0x104>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_ADC_PollForConversion+0x200>)
 8002e10:	400b      	ands	r3, r1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_ADC_PollForConversion+0x100>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68d9      	ldr	r1, [r3, #12]
 8002e1c:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_ADC_PollForConversion+0x204>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_PollForConversion+0x100>
 8002e24:	2314      	movs	r3, #20
 8002e26:	e020      	b.n	8002e6a <HAL_ADC_PollForConversion+0x142>
 8002e28:	2329      	movs	r3, #41	; 0x29
 8002e2a:	e01e      	b.n	8002e6a <HAL_ADC_PollForConversion+0x142>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_ADC_PollForConversion+0x200>)
 8002e34:	400b      	ands	r3, r1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_ADC_PollForConversion+0x120>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68d9      	ldr	r1, [r3, #12]
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_ADC_PollForConversion+0x204>)
 8002e42:	400b      	ands	r3, r1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_ADC_PollForConversion+0x13c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_ADC_PollForConversion+0x208>)
 8002e50:	400b      	ands	r3, r1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x140>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68d9      	ldr	r1, [r3, #12]
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_ADC_PollForConversion+0x208>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x140>
 8002e64:	2354      	movs	r3, #84	; 0x54
 8002e66:	e000      	b.n	8002e6a <HAL_ADC_PollForConversion+0x142>
 8002e68:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e70:	e021      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d01a      	beq.n	8002eb0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_ADC_PollForConversion+0x168>
 8002e80:	f7ff fd96 	bl	80029b0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d20f      	bcs.n	8002eb0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d90b      	bls.n	8002eb0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e030      	b.n	8002f12 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d8d9      	bhi.n	8002e72 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f06f 0212 	mvn.w	r2, #18
 8002ec6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ede:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ee2:	d115      	bne.n	8002f10 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d111      	bne.n	8002f10 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd90      	pop	{r4, r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000010 	.word	0x20000010
 8002f20:	24924924 	.word	0x24924924
 8002f24:	00924924 	.word	0x00924924
 8002f28:	12492492 	.word	0x12492492
 8002f2c:	00492492 	.word	0x00492492
 8002f30:	00249249 	.word	0x00249249

08002f34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x20>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e0dc      	b.n	8003126 <HAL_ADC_ConfigChannel+0x1da>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d81c      	bhi.n	8002fb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b05      	subs	r3, #5
 8002f8e:	221f      	movs	r2, #31
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	4019      	ands	r1, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b05      	subs	r3, #5
 8002fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb4:	e03c      	b.n	8003030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d81c      	bhi.n	8002ff8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b23      	subs	r3, #35	; 0x23
 8002fd0:	221f      	movs	r2, #31
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4019      	ands	r1, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b23      	subs	r3, #35	; 0x23
 8002fea:	fa00 f203 	lsl.w	r2, r0, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff6:	e01b      	b.n	8003030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	3b41      	subs	r3, #65	; 0x41
 800300a:	221f      	movs	r2, #31
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	4019      	ands	r1, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3b41      	subs	r3, #65	; 0x41
 8003024:	fa00 f203 	lsl.w	r2, r0, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d91c      	bls.n	8003072 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68d9      	ldr	r1, [r3, #12]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	3b1e      	subs	r3, #30
 800304a:	2207      	movs	r2, #7
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	4019      	ands	r1, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6898      	ldr	r0, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	3b1e      	subs	r3, #30
 8003064:	fa00 f203 	lsl.w	r2, r0, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	e019      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6919      	ldr	r1, [r3, #16]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	2207      	movs	r2, #7
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	4019      	ands	r1, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6898      	ldr	r0, [r3, #8]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	fa00 f203 	lsl.w	r2, r0, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d003      	beq.n	80030b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030b2:	2b11      	cmp	r3, #17
 80030b4:	d132      	bne.n	800311c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_ADC_ConfigChannel+0x1e4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d125      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d126      	bne.n	800311c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d11a      	bne.n	800311c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_ADC_ConfigChannel+0x1e8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <HAL_ADC_ConfigChannel+0x1ec>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	0c9a      	lsrs	r2, r3, #18
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030fc:	e002      	b.n	8003104 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3b01      	subs	r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f9      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x1b2>
 800310a:	e007      	b.n	800311c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40012400 	.word	0x40012400
 8003134:	20000010 	.word	0x20000010
 8003138:	431bde83 	.word	0x431bde83

0800313c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d040      	beq.n	80031dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <ADC_Enable+0xac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <ADC_Enable+0xb0>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003178:	e002      	b.n	8003180 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3b01      	subs	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f9      	bne.n	800317a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003186:	f7ff fc13 	bl	80029b0 <HAL_GetTick>
 800318a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800318c:	e01f      	b.n	80031ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800318e:	f7ff fc0f 	bl	80029b0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d918      	bls.n	80031ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d011      	beq.n	80031ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	f043 0210 	orr.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e007      	b.n	80031de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d1d8      	bne.n	800318e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000010 	.word	0x20000010
 80031ec:	431bde83 	.word	0x431bde83

080031f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d12e      	bne.n	8003268 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800321a:	f7ff fbc9 	bl	80029b0 <HAL_GetTick>
 800321e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003220:	e01b      	b.n	800325a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003222:	f7ff fbc5 	bl	80029b0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d914      	bls.n	800325a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10d      	bne.n	800325a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e007      	b.n	800326a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d0dc      	beq.n	8003222 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <__NVIC_SetPriorityGrouping>:
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800329c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a6:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60d3      	str	r3, [r2, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_GetPriorityGrouping>:
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <__NVIC_GetPriorityGrouping+0x18>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 0307 	and.w	r3, r3, #7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_EnableIRQ>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db0b      	blt.n	8003302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4906      	ldr	r1, [pc, #24]	; (800330c <__NVIC_EnableIRQ+0x34>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2001      	movs	r0, #1
 80032fa:	fa00 f202 	lsl.w	r2, r0, r2
 80032fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100

08003310 <__NVIC_SetPriority>:
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	2b00      	cmp	r3, #0
 8003322:	db0a      	blt.n	800333a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	490c      	ldr	r1, [pc, #48]	; (800335c <__NVIC_SetPriority+0x4c>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	440b      	add	r3, r1
 8003334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003338:	e00a      	b.n	8003350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4908      	ldr	r1, [pc, #32]	; (8003360 <__NVIC_SetPriority+0x50>)
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	3b04      	subs	r3, #4
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	440b      	add	r3, r1
 800334e:	761a      	strb	r2, [r3, #24]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e100 	.word	0xe000e100
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <NVIC_EncodePriority>:
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f1c3 0307 	rsb	r3, r3, #7
 800337e:	2b04      	cmp	r3, #4
 8003380:	bf28      	it	cs
 8003382:	2304      	movcs	r3, #4
 8003384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3304      	adds	r3, #4
 800338a:	2b06      	cmp	r3, #6
 800338c:	d902      	bls.n	8003394 <NVIC_EncodePriority+0x30>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3b03      	subs	r3, #3
 8003392:	e000      	b.n	8003396 <NVIC_EncodePriority+0x32>
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ac:	f04f 31ff 	mov.w	r1, #4294967295
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	4313      	orrs	r3, r2
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <SysTick_Config>:
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d8:	d301      	bcc.n	80033de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80033da:	2301      	movs	r3, #1
 80033dc:	e00f      	b.n	80033fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <SysTick_Config+0x40>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e6:	210f      	movs	r1, #15
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	f7ff ff90 	bl	8003310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <SysTick_Config+0x40>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <SysTick_Config+0x40>)
 80033f8:	2207      	movs	r2, #7
 80033fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	e000e010 	.word	0xe000e010

0800340c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ff2d 	bl	8003274 <__NVIC_SetPriorityGrouping>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003434:	f7ff ff42 	bl	80032bc <__NVIC_GetPriorityGrouping>
 8003438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f7ff ff90 	bl	8003364 <NVIC_EncodePriority>
 8003444:	4602      	mov	r2, r0
 8003446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff5f 	bl	8003310 <__NVIC_SetPriority>
}
 8003452:	bf00      	nop
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	4603      	mov	r3, r0
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff35 	bl	80032d8 <__NVIC_EnableIRQ>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ffa2 	bl	80033c8 <SysTick_Config>
 8003484:	4603      	mov	r3, r0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003490:	b480      	push	{r7}
 8003492:	b08b      	sub	sp, #44	; 0x2c
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a2:	e169      	b.n	8003778 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034a4:	2201      	movs	r2, #1
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	429a      	cmp	r2, r3
 80034be:	f040 8158 	bne.w	8003772 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a9a      	ldr	r2, [pc, #616]	; (8003730 <HAL_GPIO_Init+0x2a0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d05e      	beq.n	800358a <HAL_GPIO_Init+0xfa>
 80034cc:	4a98      	ldr	r2, [pc, #608]	; (8003730 <HAL_GPIO_Init+0x2a0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d875      	bhi.n	80035be <HAL_GPIO_Init+0x12e>
 80034d2:	4a98      	ldr	r2, [pc, #608]	; (8003734 <HAL_GPIO_Init+0x2a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d058      	beq.n	800358a <HAL_GPIO_Init+0xfa>
 80034d8:	4a96      	ldr	r2, [pc, #600]	; (8003734 <HAL_GPIO_Init+0x2a4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d86f      	bhi.n	80035be <HAL_GPIO_Init+0x12e>
 80034de:	4a96      	ldr	r2, [pc, #600]	; (8003738 <HAL_GPIO_Init+0x2a8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d052      	beq.n	800358a <HAL_GPIO_Init+0xfa>
 80034e4:	4a94      	ldr	r2, [pc, #592]	; (8003738 <HAL_GPIO_Init+0x2a8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d869      	bhi.n	80035be <HAL_GPIO_Init+0x12e>
 80034ea:	4a94      	ldr	r2, [pc, #592]	; (800373c <HAL_GPIO_Init+0x2ac>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d04c      	beq.n	800358a <HAL_GPIO_Init+0xfa>
 80034f0:	4a92      	ldr	r2, [pc, #584]	; (800373c <HAL_GPIO_Init+0x2ac>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d863      	bhi.n	80035be <HAL_GPIO_Init+0x12e>
 80034f6:	4a92      	ldr	r2, [pc, #584]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d046      	beq.n	800358a <HAL_GPIO_Init+0xfa>
 80034fc:	4a90      	ldr	r2, [pc, #576]	; (8003740 <HAL_GPIO_Init+0x2b0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d85d      	bhi.n	80035be <HAL_GPIO_Init+0x12e>
 8003502:	2b12      	cmp	r3, #18
 8003504:	d82a      	bhi.n	800355c <HAL_GPIO_Init+0xcc>
 8003506:	2b12      	cmp	r3, #18
 8003508:	d859      	bhi.n	80035be <HAL_GPIO_Init+0x12e>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <HAL_GPIO_Init+0x80>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	0800358b 	.word	0x0800358b
 8003514:	08003565 	.word	0x08003565
 8003518:	08003577 	.word	0x08003577
 800351c:	080035b9 	.word	0x080035b9
 8003520:	080035bf 	.word	0x080035bf
 8003524:	080035bf 	.word	0x080035bf
 8003528:	080035bf 	.word	0x080035bf
 800352c:	080035bf 	.word	0x080035bf
 8003530:	080035bf 	.word	0x080035bf
 8003534:	080035bf 	.word	0x080035bf
 8003538:	080035bf 	.word	0x080035bf
 800353c:	080035bf 	.word	0x080035bf
 8003540:	080035bf 	.word	0x080035bf
 8003544:	080035bf 	.word	0x080035bf
 8003548:	080035bf 	.word	0x080035bf
 800354c:	080035bf 	.word	0x080035bf
 8003550:	080035bf 	.word	0x080035bf
 8003554:	0800356d 	.word	0x0800356d
 8003558:	08003581 	.word	0x08003581
 800355c:	4a79      	ldr	r2, [pc, #484]	; (8003744 <HAL_GPIO_Init+0x2b4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003562:	e02c      	b.n	80035be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	623b      	str	r3, [r7, #32]
          break;
 800356a:	e029      	b.n	80035c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	3304      	adds	r3, #4
 8003572:	623b      	str	r3, [r7, #32]
          break;
 8003574:	e024      	b.n	80035c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	3308      	adds	r3, #8
 800357c:	623b      	str	r3, [r7, #32]
          break;
 800357e:	e01f      	b.n	80035c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	330c      	adds	r3, #12
 8003586:	623b      	str	r3, [r7, #32]
          break;
 8003588:	e01a      	b.n	80035c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003592:	2304      	movs	r3, #4
 8003594:	623b      	str	r3, [r7, #32]
          break;
 8003596:	e013      	b.n	80035c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035a0:	2308      	movs	r3, #8
 80035a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	611a      	str	r2, [r3, #16]
          break;
 80035aa:	e009      	b.n	80035c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035ac:	2308      	movs	r3, #8
 80035ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	615a      	str	r2, [r3, #20]
          break;
 80035b6:	e003      	b.n	80035c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
          break;
 80035bc:	e000      	b.n	80035c0 <HAL_GPIO_Init+0x130>
          break;
 80035be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2bff      	cmp	r3, #255	; 0xff
 80035c4:	d801      	bhi.n	80035ca <HAL_GPIO_Init+0x13a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	e001      	b.n	80035ce <HAL_GPIO_Init+0x13e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2bff      	cmp	r3, #255	; 0xff
 80035d4:	d802      	bhi.n	80035dc <HAL_GPIO_Init+0x14c>
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	e002      	b.n	80035e2 <HAL_GPIO_Init+0x152>
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	3b08      	subs	r3, #8
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	210f      	movs	r1, #15
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	401a      	ands	r2, r3
 80035f4:	6a39      	ldr	r1, [r7, #32]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	431a      	orrs	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80b1 	beq.w	8003772 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003610:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <HAL_GPIO_Init+0x2b8>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4a4c      	ldr	r2, [pc, #304]	; (8003748 <HAL_GPIO_Init+0x2b8>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6193      	str	r3, [r2, #24]
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_GPIO_Init+0x2b8>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003628:	4a48      	ldr	r2, [pc, #288]	; (800374c <HAL_GPIO_Init+0x2bc>)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	3302      	adds	r3, #2
 8003630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003634:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4013      	ands	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <HAL_GPIO_Init+0x2c0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_GPIO_Init+0x1ec>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3f      	ldr	r2, [pc, #252]	; (8003754 <HAL_GPIO_Init+0x2c4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00d      	beq.n	8003678 <HAL_GPIO_Init+0x1e8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a3e      	ldr	r2, [pc, #248]	; (8003758 <HAL_GPIO_Init+0x2c8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <HAL_GPIO_Init+0x1e4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3d      	ldr	r2, [pc, #244]	; (800375c <HAL_GPIO_Init+0x2cc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_GPIO_Init+0x1e0>
 800366c:	2303      	movs	r3, #3
 800366e:	e006      	b.n	800367e <HAL_GPIO_Init+0x1ee>
 8003670:	2304      	movs	r3, #4
 8003672:	e004      	b.n	800367e <HAL_GPIO_Init+0x1ee>
 8003674:	2302      	movs	r3, #2
 8003676:	e002      	b.n	800367e <HAL_GPIO_Init+0x1ee>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_GPIO_Init+0x1ee>
 800367c:	2300      	movs	r3, #0
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	f002 0203 	and.w	r2, r2, #3
 8003684:	0092      	lsls	r2, r2, #2
 8003686:	4093      	lsls	r3, r2
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800368e:	492f      	ldr	r1, [pc, #188]	; (800374c <HAL_GPIO_Init+0x2bc>)
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	3302      	adds	r3, #2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	492c      	ldr	r1, [pc, #176]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	43db      	mvns	r3, r3
 80036be:	4928      	ldr	r1, [pc, #160]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4922      	ldr	r1, [pc, #136]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60cb      	str	r3, [r1, #12]
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	491e      	ldr	r1, [pc, #120]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d006      	beq.n	8003706 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	4918      	ldr	r1, [pc, #96]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
 8003704:	e006      	b.n	8003714 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	43db      	mvns	r3, r3
 800370e:	4914      	ldr	r1, [pc, #80]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 8003710:	4013      	ands	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d021      	beq.n	8003764 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_GPIO_Init+0x2d0>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e021      	b.n	8003772 <HAL_GPIO_Init+0x2e2>
 800372e:	bf00      	nop
 8003730:	10320000 	.word	0x10320000
 8003734:	10310000 	.word	0x10310000
 8003738:	10220000 	.word	0x10220000
 800373c:	10210000 	.word	0x10210000
 8003740:	10120000 	.word	0x10120000
 8003744:	10110000 	.word	0x10110000
 8003748:	40021000 	.word	0x40021000
 800374c:	40010000 	.word	0x40010000
 8003750:	40010800 	.word	0x40010800
 8003754:	40010c00 	.word	0x40010c00
 8003758:	40011000 	.word	0x40011000
 800375c:	40011400 	.word	0x40011400
 8003760:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_GPIO_Init+0x304>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	43db      	mvns	r3, r3
 800376c:	4909      	ldr	r1, [pc, #36]	; (8003794 <HAL_GPIO_Init+0x304>)
 800376e:	4013      	ands	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	3301      	adds	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	f47f ae8e 	bne.w	80034a4 <HAL_GPIO_Init+0x14>
  }
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	372c      	adds	r7, #44	; 0x2c
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40010400 	.word	0x40010400

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	611a      	str	r2, [r3, #16]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	041a      	lsls	r2, r3, #16
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	43d9      	mvns	r1, r3
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	400b      	ands	r3, r1
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e272      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8087 	beq.w	800392a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800381c:	4b92      	ldr	r3, [pc, #584]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b04      	cmp	r3, #4
 8003826:	d00c      	beq.n	8003842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003828:	4b8f      	ldr	r3, [pc, #572]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d112      	bne.n	800385a <HAL_RCC_OscConfig+0x5e>
 8003834:	4b8c      	ldr	r3, [pc, #560]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003842:	4b89      	ldr	r3, [pc, #548]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d06c      	beq.n	8003928 <HAL_RCC_OscConfig+0x12c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d168      	bne.n	8003928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e24c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x76>
 8003864:	4b80      	ldr	r3, [pc, #512]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a7f      	ldr	r2, [pc, #508]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e02e      	b.n	80038d0 <HAL_RCC_OscConfig+0xd4>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x98>
 800387a:	4b7b      	ldr	r3, [pc, #492]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7a      	ldr	r2, [pc, #488]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b78      	ldr	r3, [pc, #480]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a77      	ldr	r2, [pc, #476]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 800388c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xd4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0xbc>
 800389e:	4b72      	ldr	r3, [pc, #456]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xd4>
 80038b8:	4b6b      	ldr	r3, [pc, #428]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6a      	ldr	r2, [pc, #424]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a67      	ldr	r2, [pc, #412]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7ff f86a 	bl	80029b0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7ff f866 	bl	80029b0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e200      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe4>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7ff f856 	bl	80029b0 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7ff f852 	bl	80029b0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1ec      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x10c>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d063      	beq.n	80039fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003936:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x18c>
 800394e:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x176>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1c0      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b3d      	ldr	r3, [pc, #244]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4939      	ldr	r1, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e03a      	b.n	80039fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCC_OscConfig+0x270>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7ff f80b 	bl	80029b0 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399e:	f7ff f807 	bl	80029b0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e1a1      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4927      	ldr	r1, [pc, #156]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_RCC_OscConfig+0x270>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe ffea 	bl	80029b0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fe ffe6 	bl	80029b0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e180      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d03a      	beq.n	8003a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d019      	beq.n	8003a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a18:	f7fe ffca 	bl	80029b0 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a20:	f7fe ffc6 	bl	80029b0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e160      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f000 faba 	bl	8003fb8 <RCC_Delay>
 8003a44:	e01c      	b.n	8003a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_RCC_OscConfig+0x274>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe ffb0 	bl	80029b0 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a52:	e00f      	b.n	8003a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fe ffac 	bl	80029b0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d908      	bls.n	8003a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e146      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	42420000 	.word	0x42420000
 8003a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	4b92      	ldr	r3, [pc, #584]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e9      	bne.n	8003a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80a6 	beq.w	8003bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a92:	4b8b      	ldr	r3, [pc, #556]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4a87      	ldr	r2, [pc, #540]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	61d3      	str	r3, [r2, #28]
 8003aaa:	4b85      	ldr	r3, [pc, #532]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	4b82      	ldr	r3, [pc, #520]	; (8003cc4 <HAL_RCC_OscConfig+0x4c8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d118      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac6:	4b7f      	ldr	r3, [pc, #508]	; (8003cc4 <HAL_RCC_OscConfig+0x4c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a7e      	ldr	r2, [pc, #504]	; (8003cc4 <HAL_RCC_OscConfig+0x4c8>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad2:	f7fe ff6d 	bl	80029b0 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ada:	f7fe ff69 	bl	80029b0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b64      	cmp	r3, #100	; 0x64
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e103      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b75      	ldr	r3, [pc, #468]	; (8003cc4 <HAL_RCC_OscConfig+0x4c8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_OscConfig+0x312>
 8003b00:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a6e      	ldr	r2, [pc, #440]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	e02d      	b.n	8003b6a <HAL_RCC_OscConfig+0x36e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x334>
 8003b16:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4a69      	ldr	r2, [pc, #420]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	6213      	str	r3, [r2, #32]
 8003b22:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4a66      	ldr	r2, [pc, #408]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f023 0304 	bic.w	r3, r3, #4
 8003b2c:	6213      	str	r3, [r2, #32]
 8003b2e:	e01c      	b.n	8003b6a <HAL_RCC_OscConfig+0x36e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d10c      	bne.n	8003b52 <HAL_RCC_OscConfig+0x356>
 8003b38:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	4a60      	ldr	r2, [pc, #384]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	6213      	str	r3, [r2, #32]
 8003b44:	4b5e      	ldr	r3, [pc, #376]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a5d      	ldr	r2, [pc, #372]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	e00b      	b.n	8003b6a <HAL_RCC_OscConfig+0x36e>
 8003b52:	4b5b      	ldr	r3, [pc, #364]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a5a      	ldr	r2, [pc, #360]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	4b58      	ldr	r3, [pc, #352]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a57      	ldr	r2, [pc, #348]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d015      	beq.n	8003b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7fe ff1d 	bl	80029b0 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fe ff19 	bl	80029b0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0b1      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ee      	beq.n	8003b7a <HAL_RCC_OscConfig+0x37e>
 8003b9c:	e014      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe ff07 	bl	80029b0 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe ff03 	bl	80029b0 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e09b      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbc:	4b40      	ldr	r3, [pc, #256]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ee      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8087 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be4:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d061      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d146      	bne.n	8003c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fed7 	bl	80029b0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe fed3 	bl	80029b0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e06d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	d108      	bne.n	8003c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	4921      	ldr	r1, [pc, #132]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a19      	ldr	r1, [r3, #32]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	430b      	orrs	r3, r1
 8003c52:	491b      	ldr	r1, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe fea7 	bl	80029b0 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fe fea3 	bl	80029b0 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e03d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x46a>
 8003c84:	e035      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_RCC_OscConfig+0x4cc>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fe90 	bl	80029b0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fe fe8c 	bl	80029b0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e026      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x498>
 8003cb2:	e01e      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e019      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x500>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0d0      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d14:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d910      	bls.n	8003d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 0207 	bic.w	r2, r3, #7
 8003d2a:	4965      	ldr	r1, [pc, #404]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b63      	ldr	r3, [pc, #396]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0b8      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d020      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d5c:	4b59      	ldr	r3, [pc, #356]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4a58      	ldr	r2, [pc, #352]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a52      	ldr	r2, [pc, #328]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d80:	4b50      	ldr	r3, [pc, #320]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	494d      	ldr	r1, [pc, #308]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d040      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d115      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e07f      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e073      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06b      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dde:	4b39      	ldr	r3, [pc, #228]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f023 0203 	bic.w	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4936      	ldr	r1, [pc, #216]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df0:	f7fe fdde 	bl	80029b0 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df8:	f7fe fdda 	bl	80029b0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e053      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 020c 	and.w	r2, r3, #12
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d1eb      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e20:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d210      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 0207 	bic.w	r2, r3, #7
 8003e36:	4922      	ldr	r1, [pc, #136]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e032      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5c:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4916      	ldr	r1, [pc, #88]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	490e      	ldr	r1, [pc, #56]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e8e:	f000 f821 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e92:	4602      	mov	r2, r0
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	490a      	ldr	r1, [pc, #40]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	5ccb      	ldrb	r3, [r1, r3]
 8003ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <HAL_RCC_ClockConfig+0x1cc>)
 8003ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fd3c 	bl	800292c <HAL_InitTick>

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40022000 	.word	0x40022000
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	08007d88 	.word	0x08007d88
 8003ecc:	20000010 	.word	0x20000010
 8003ed0:	20000014 	.word	0x20000014

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eee:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d002      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x30>
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x36>
 8003f02:	e027      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f06:	613b      	str	r3, [r7, #16]
      break;
 8003f08:	e027      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	0c9b      	lsrs	r3, r3, #18
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f14:	5cd3      	ldrb	r3, [r2, r3]
 8003f16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d010      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	0c5b      	lsrs	r3, r3, #17
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	4a11      	ldr	r2, [pc, #68]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f36:	fb03 f202 	mul.w	r2, r3, r2
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e004      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	613b      	str	r3, [r7, #16]
      break;
 8003f52:	e002      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f56:	613b      	str	r3, [r7, #16]
      break;
 8003f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5a:	693b      	ldr	r3, [r7, #16]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	007a1200 	.word	0x007a1200
 8003f70:	08007da0 	.word	0x08007da0
 8003f74:	08007db0 	.word	0x08007db0
 8003f78:	003d0900 	.word	0x003d0900

08003f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f80:	4b02      	ldr	r3, [pc, #8]	; (8003f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f82:	681b      	ldr	r3, [r3, #0]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	20000010 	.word	0x20000010

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f94:	f7ff fff2 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	0adb      	lsrs	r3, r3, #11
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08007d98 	.word	0x08007d98

08003fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <RCC_Delay+0x34>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <RCC_Delay+0x38>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	0a5b      	lsrs	r3, r3, #9
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fd4:	bf00      	nop
  }
  while (Delay --);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1e5a      	subs	r2, r3, #1
 8003fda:	60fa      	str	r2, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f9      	bne.n	8003fd4 <RCC_Delay+0x1c>
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	20000010 	.word	0x20000010
 8003ff0:	10624dd3 	.word	0x10624dd3

08003ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d07d      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004014:	4b4f      	ldr	r3, [pc, #316]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004020:	4b4c      	ldr	r3, [pc, #304]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4a4b      	ldr	r2, [pc, #300]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402a:	61d3      	str	r3, [r2, #28]
 800402c:	4b49      	ldr	r3, [pc, #292]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d118      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004054:	f7fe fcac 	bl	80029b0 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	e008      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405c:	f7fe fca8 	bl	80029b0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e06d      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b3a      	ldr	r3, [pc, #232]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800407a:	4b36      	ldr	r3, [pc, #216]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02e      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	429a      	cmp	r2, r3
 8004096:	d027      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040a2:	4b2e      	ldr	r3, [pc, #184]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040a8:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040ae:	4a29      	ldr	r2, [pc, #164]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d014      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040be:	f7fe fc77 	bl	80029b0 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fe fc73 	bl	80029b0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e036      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ee      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e8:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4917      	ldr	r1, [pc, #92]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004100:	4b14      	ldr	r3, [pc, #80]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	4a13      	ldr	r2, [pc, #76]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	490b      	ldr	r1, [pc, #44]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004136:	4b07      	ldr	r3, [pc, #28]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
 800415c:	42420440 	.word	0x42420440

08004160 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b10      	cmp	r3, #16
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b10      	cmp	r3, #16
 8004186:	f200 808a 	bhi.w	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d045      	beq.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d075      	beq.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004196:	e082      	b.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004198:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800419e:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d07b      	beq.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	0c9b      	lsrs	r3, r3, #18
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	4a41      	ldr	r2, [pc, #260]	; (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80041b4:	5cd3      	ldrb	r3, [r2, r3]
 80041b6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d015      	beq.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041c2:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	0c5b      	lsrs	r3, r3, #17
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	4a3b      	ldr	r2, [pc, #236]	; (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80041ce:	5cd3      	ldrb	r3, [r2, r3]
 80041d0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80041dc:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e004      	b.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004204:	d102      	bne.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	61bb      	str	r3, [r7, #24]
      break;
 800420a:	e04a      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	61bb      	str	r3, [r7, #24]
      break;
 800421a:	e042      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d108      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e01f      	b.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d109      	bne.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004258:	f649 4340 	movw	r3, #40000	; 0x9c40
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	e00f      	b.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426a:	d11c      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004278:	f24f 4324 	movw	r3, #62500	; 0xf424
 800427c:	61bb      	str	r3, [r7, #24]
      break;
 800427e:	e012      	b.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004280:	e011      	b.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004282:	f7ff fe85 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0b9b      	lsrs	r3, r3, #14
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	3301      	adds	r3, #1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	61bb      	str	r3, [r7, #24]
      break;
 800429c:	e004      	b.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80042a6:	bf00      	nop
    }
  }
  return (frequency);
 80042a8:	69bb      	ldr	r3, [r7, #24]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08007db4 	.word	0x08007db4
 80042bc:	08007dc4 	.word	0x08007dc4
 80042c0:	007a1200 	.word	0x007a1200
 80042c4:	003d0900 	.word	0x003d0900
 80042c8:	aaaaaaab 	.word	0xaaaaaaab

080042cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e041      	b.n	8004362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fe f91e 	bl	8002534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f000 fd76 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d001      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e03a      	b.n	80043fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_TIM_Base_Start_IT+0x98>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x58>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d009      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x58>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_TIM_Base_Start_IT+0x9c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x58>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <HAL_TIM_Base_Start_IT+0xa0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d111      	bne.n	80043e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d010      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	e007      	b.n	80043f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800

08004410 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e041      	b.n	80044a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f839 	bl	80044ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f000 fcd4 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_TIM_PWM_Start+0x24>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e022      	b.n	800452a <HAL_TIM_PWM_Start+0x6a>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d109      	bne.n	80044fe <HAL_TIM_PWM_Start+0x3e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	bf14      	ite	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	2300      	moveq	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	e015      	b.n	800452a <HAL_TIM_PWM_Start+0x6a>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d109      	bne.n	8004518 <HAL_TIM_PWM_Start+0x58>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e008      	b.n	800452a <HAL_TIM_PWM_Start+0x6a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e05e      	b.n	80045f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start+0x82>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	e013      	b.n	800456a <HAL_TIM_PWM_Start+0xaa>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d104      	bne.n	8004552 <HAL_TIM_PWM_Start+0x92>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004550:	e00b      	b.n	800456a <HAL_TIM_PWM_Start+0xaa>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Start+0xa2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004560:	e003      	b.n	800456a <HAL_TIM_PWM_Start+0xaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2201      	movs	r2, #1
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fec2 	bl	80052fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <HAL_TIM_PWM_Start+0x138>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d107      	bne.n	8004592 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIM_PWM_Start+0x138>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_TIM_PWM_Start+0xfa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d009      	beq.n	80045ba <HAL_TIM_PWM_Start+0xfa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a14      	ldr	r2, [pc, #80]	; (80045fc <HAL_TIM_PWM_Start+0x13c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_TIM_PWM_Start+0xfa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_TIM_PWM_Start+0x140>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b06      	cmp	r3, #6
 80045ca:	d010      	beq.n	80045ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	e007      	b.n	80045ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800

08004604 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e093      	b.n	8004740 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fd ffa5 	bl	800257c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004648:	f023 0307 	bic.w	r3, r3, #7
 800464c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f000 fbcf 	bl	8004dfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	4313      	orrs	r3, r2
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046a4:	f023 030c 	bic.w	r3, r3, #12
 80046a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	4313      	orrs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	011a      	lsls	r2, r3, #4
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	031b      	lsls	r3, r3, #12
 80046d4:	4313      	orrs	r3, r2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	4313      	orrs	r3, r2
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004758:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004760:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004768:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004770:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d110      	bne.n	800479a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800477e:	7b7b      	ldrb	r3, [r7, #13]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d001      	beq.n	8004788 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e089      	b.n	800489c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004798:	e031      	b.n	80047fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d110      	bne.n	80047c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047a0:	7bbb      	ldrb	r3, [r7, #14]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d102      	bne.n	80047ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047a6:	7b3b      	ldrb	r3, [r7, #12]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d001      	beq.n	80047b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e075      	b.n	800489c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c0:	e01d      	b.n	80047fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d108      	bne.n	80047da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c8:	7bbb      	ldrb	r3, [r7, #14]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d105      	bne.n	80047da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ce:	7b7b      	ldrb	r3, [r7, #13]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d102      	bne.n	80047da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047d4:	7b3b      	ldrb	r3, [r7, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d001      	beq.n	80047de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e05e      	b.n	800489c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b04      	cmp	r3, #4
 8004808:	d010      	beq.n	800482c <HAL_TIM_Encoder_Start_IT+0xe4>
 800480a:	e01f      	b.n	800484c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2201      	movs	r2, #1
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fd71 	bl	80052fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0202 	orr.w	r2, r2, #2
 8004828:	60da      	str	r2, [r3, #12]
      break;
 800482a:	e02e      	b.n	800488a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2201      	movs	r2, #1
 8004832:	2104      	movs	r1, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fd61 	bl	80052fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0204 	orr.w	r2, r2, #4
 8004848:	60da      	str	r2, [r3, #12]
      break;
 800484a:	e01e      	b.n	800488a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2201      	movs	r2, #1
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fd51 	bl	80052fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2201      	movs	r2, #1
 8004860:	2104      	movs	r1, #4
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fd4a 	bl	80052fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0202 	orr.w	r2, r2, #2
 8004876:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0204 	orr.w	r2, r2, #4
 8004886:	60da      	str	r2, [r3, #12]
      break;
 8004888:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0202 	mvn.w	r2, #2
 80048d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc fdee 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa69 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fa6f 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0204 	mvn.w	r2, #4
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc fdc4 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa3f 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa45 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc fd9a 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa15 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa1b 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0210 	mvn.w	r2, #16
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2208      	movs	r2, #8
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fc fd70 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9eb 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f9f1 	bl	8004dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10e      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0201 	mvn.w	r2, #1
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd fa38 	bl	8001e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d10e      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d107      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fcdf 	bl	8005412 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9b5 	bl	8004dea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0220 	mvn.w	r2, #32
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fcaa 	bl	8005400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0ae      	b.n	8004c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	f200 809f 	bhi.w	8004c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004c21 	.word	0x08004c21
 8004af0:	08004c21 	.word	0x08004c21
 8004af4:	08004c21 	.word	0x08004c21
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004c21 	.word	0x08004c21
 8004b00:	08004c21 	.word	0x08004c21
 8004b04:	08004c21 	.word	0x08004c21
 8004b08:	08004b9f 	.word	0x08004b9f
 8004b0c:	08004c21 	.word	0x08004c21
 8004b10:	08004c21 	.word	0x08004c21
 8004b14:	08004c21 	.word	0x08004c21
 8004b18:	08004bdf 	.word	0x08004bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f9cc 	bl	8004ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
      break;
 8004b5a:	e064      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa12 	bl	8004f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e043      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fa5b 	bl	8005060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0208 	orr.w	r2, r2, #8
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      break;
 8004bdc:	e023      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 faa5 	bl	8005134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	021a      	lsls	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	61da      	str	r2, [r3, #28]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
      break;
 8004c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIM_ConfigClockSource+0x1c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0b4      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x186>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8c:	d03e      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xd4>
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c92:	f200 8087 	bhi.w	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	f000 8086 	beq.w	8004daa <HAL_TIM_ConfigClockSource+0x172>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca2:	d87f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b70      	cmp	r3, #112	; 0x70
 8004ca6:	d01a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0xa6>
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d87b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b60      	cmp	r3, #96	; 0x60
 8004cae:	d050      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d877      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b50      	cmp	r3, #80	; 0x50
 8004cb6:	d03c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xfa>
 8004cb8:	2b50      	cmp	r3, #80	; 0x50
 8004cba:	d873      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d058      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d86f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b30      	cmp	r3, #48	; 0x30
 8004cc6:	d064      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b30      	cmp	r3, #48	; 0x30
 8004cca:	d86b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d060      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d867      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d05a      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	e062      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	f000 fae6 	bl	80052be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e04f      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	f000 facf 	bl	80052be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d2e:	609a      	str	r2, [r3, #8]
      break;
 8004d30:	e03c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fa46 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2150      	movs	r1, #80	; 0x50
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fa9d 	bl	800528a <TIM_ITRx_SetConfig>
      break;
 8004d50:	e02c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 fa64 	bl	800522c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2160      	movs	r1, #96	; 0x60
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa8d 	bl	800528a <TIM_ITRx_SetConfig>
      break;
 8004d70:	e01c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fa26 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2140      	movs	r1, #64	; 0x40
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fa7d 	bl	800528a <TIM_ITRx_SetConfig>
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fa74 	bl	800528a <TIM_ITRx_SetConfig>
      break;
 8004da2:	e003      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a29      	ldr	r2, [pc, #164]	; (8004eb4 <TIM_Base_SetConfig+0xb8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <TIM_Base_SetConfig+0x30>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d007      	beq.n	8004e2c <TIM_Base_SetConfig+0x30>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <TIM_Base_SetConfig+0xbc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_Base_SetConfig+0x30>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a25      	ldr	r2, [pc, #148]	; (8004ebc <TIM_Base_SetConfig+0xc0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d108      	bne.n	8004e3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <TIM_Base_SetConfig+0xb8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x62>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x62>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <TIM_Base_SetConfig+0xbc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x62>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <TIM_Base_SetConfig+0xc0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <TIM_Base_SetConfig+0xb8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d103      	bne.n	8004ea4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	615a      	str	r2, [r3, #20]
}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800

08004ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f023 0201 	bic.w	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 0302 	bic.w	r3, r3, #2
 8004f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <TIM_OC1_SetConfig+0xc8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10c      	bne.n	8004f36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0308 	bic.w	r3, r3, #8
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <TIM_OC1_SetConfig+0xc8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d111      	bne.n	8004f62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	621a      	str	r2, [r3, #32]
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40012c00 	.word	0x40012c00

08004f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f023 0210 	bic.w	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0320 	bic.w	r3, r3, #32
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	; (800505c <TIM_OC2_SetConfig+0xd0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10d      	bne.n	8005008 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a14      	ldr	r2, [pc, #80]	; (800505c <TIM_OC2_SetConfig+0xd0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d113      	bne.n	8005038 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800501e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	40012c00 	.word	0x40012c00

08005060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <TIM_OC3_SetConfig+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d10d      	bne.n	80050da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a14      	ldr	r2, [pc, #80]	; (8005130 <TIM_OC3_SetConfig+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d113      	bne.n	800510a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40012c00 	.word	0x40012c00

08005134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	031b      	lsls	r3, r3, #12
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0f      	ldr	r2, [pc, #60]	; (80051cc <TIM_OC4_SetConfig+0x98>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d109      	bne.n	80051a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	40012c00 	.word	0x40012c00

080051d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 030a 	bic.w	r3, r3, #10
 800520c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0210 	bic.w	r2, r3, #16
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	031b      	lsls	r3, r3, #12
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005268:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f043 0307 	orr.w	r3, r3, #7
 80052ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	609a      	str	r2, [r3, #8]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052be:	b480      	push	{r7}
 80052c0:	b087      	sub	sp, #28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	021a      	lsls	r2, r3, #8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	609a      	str	r2, [r3, #8]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	2201      	movs	r2, #1
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	43db      	mvns	r3, r3
 800531e:	401a      	ands	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e046      	b.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d009      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a10      	ldr	r2, [pc, #64]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10c      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800

08005400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <__cvt>:
 8005424:	2b00      	cmp	r3, #0
 8005426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542a:	461f      	mov	r7, r3
 800542c:	bfbb      	ittet	lt
 800542e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005432:	461f      	movlt	r7, r3
 8005434:	2300      	movge	r3, #0
 8005436:	232d      	movlt	r3, #45	; 0x2d
 8005438:	b088      	sub	sp, #32
 800543a:	4614      	mov	r4, r2
 800543c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800543e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005440:	7013      	strb	r3, [r2, #0]
 8005442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005444:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005448:	f023 0820 	bic.w	r8, r3, #32
 800544c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005450:	d005      	beq.n	800545e <__cvt+0x3a>
 8005452:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005456:	d100      	bne.n	800545a <__cvt+0x36>
 8005458:	3501      	adds	r5, #1
 800545a:	2302      	movs	r3, #2
 800545c:	e000      	b.n	8005460 <__cvt+0x3c>
 800545e:	2303      	movs	r3, #3
 8005460:	aa07      	add	r2, sp, #28
 8005462:	9204      	str	r2, [sp, #16]
 8005464:	aa06      	add	r2, sp, #24
 8005466:	e9cd a202 	strd	sl, r2, [sp, #8]
 800546a:	e9cd 3500 	strd	r3, r5, [sp]
 800546e:	4622      	mov	r2, r4
 8005470:	463b      	mov	r3, r7
 8005472:	f000 fe51 	bl	8006118 <_dtoa_r>
 8005476:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800547a:	4606      	mov	r6, r0
 800547c:	d102      	bne.n	8005484 <__cvt+0x60>
 800547e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005480:	07db      	lsls	r3, r3, #31
 8005482:	d522      	bpl.n	80054ca <__cvt+0xa6>
 8005484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005488:	eb06 0905 	add.w	r9, r6, r5
 800548c:	d110      	bne.n	80054b0 <__cvt+0x8c>
 800548e:	7833      	ldrb	r3, [r6, #0]
 8005490:	2b30      	cmp	r3, #48	; 0x30
 8005492:	d10a      	bne.n	80054aa <__cvt+0x86>
 8005494:	2200      	movs	r2, #0
 8005496:	2300      	movs	r3, #0
 8005498:	4620      	mov	r0, r4
 800549a:	4639      	mov	r1, r7
 800549c:	f7fb fa84 	bl	80009a8 <__aeabi_dcmpeq>
 80054a0:	b918      	cbnz	r0, 80054aa <__cvt+0x86>
 80054a2:	f1c5 0501 	rsb	r5, r5, #1
 80054a6:	f8ca 5000 	str.w	r5, [sl]
 80054aa:	f8da 3000 	ldr.w	r3, [sl]
 80054ae:	4499      	add	r9, r3
 80054b0:	2200      	movs	r2, #0
 80054b2:	2300      	movs	r3, #0
 80054b4:	4620      	mov	r0, r4
 80054b6:	4639      	mov	r1, r7
 80054b8:	f7fb fa76 	bl	80009a8 <__aeabi_dcmpeq>
 80054bc:	b108      	cbz	r0, 80054c2 <__cvt+0x9e>
 80054be:	f8cd 901c 	str.w	r9, [sp, #28]
 80054c2:	2230      	movs	r2, #48	; 0x30
 80054c4:	9b07      	ldr	r3, [sp, #28]
 80054c6:	454b      	cmp	r3, r9
 80054c8:	d307      	bcc.n	80054da <__cvt+0xb6>
 80054ca:	4630      	mov	r0, r6
 80054cc:	9b07      	ldr	r3, [sp, #28]
 80054ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80054d0:	1b9b      	subs	r3, r3, r6
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	b008      	add	sp, #32
 80054d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054da:	1c59      	adds	r1, r3, #1
 80054dc:	9107      	str	r1, [sp, #28]
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e7f0      	b.n	80054c4 <__cvt+0xa0>

080054e2 <__exponent>:
 80054e2:	4603      	mov	r3, r0
 80054e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054e6:	2900      	cmp	r1, #0
 80054e8:	f803 2b02 	strb.w	r2, [r3], #2
 80054ec:	bfb6      	itet	lt
 80054ee:	222d      	movlt	r2, #45	; 0x2d
 80054f0:	222b      	movge	r2, #43	; 0x2b
 80054f2:	4249      	neglt	r1, r1
 80054f4:	2909      	cmp	r1, #9
 80054f6:	7042      	strb	r2, [r0, #1]
 80054f8:	dd2a      	ble.n	8005550 <__exponent+0x6e>
 80054fa:	f10d 0207 	add.w	r2, sp, #7
 80054fe:	4617      	mov	r7, r2
 8005500:	260a      	movs	r6, #10
 8005502:	fb91 f5f6 	sdiv	r5, r1, r6
 8005506:	4694      	mov	ip, r2
 8005508:	fb06 1415 	mls	r4, r6, r5, r1
 800550c:	3430      	adds	r4, #48	; 0x30
 800550e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005512:	460c      	mov	r4, r1
 8005514:	2c63      	cmp	r4, #99	; 0x63
 8005516:	4629      	mov	r1, r5
 8005518:	f102 32ff 	add.w	r2, r2, #4294967295
 800551c:	dcf1      	bgt.n	8005502 <__exponent+0x20>
 800551e:	3130      	adds	r1, #48	; 0x30
 8005520:	f1ac 0402 	sub.w	r4, ip, #2
 8005524:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005528:	4622      	mov	r2, r4
 800552a:	1c41      	adds	r1, r0, #1
 800552c:	42ba      	cmp	r2, r7
 800552e:	d30a      	bcc.n	8005546 <__exponent+0x64>
 8005530:	f10d 0209 	add.w	r2, sp, #9
 8005534:	eba2 020c 	sub.w	r2, r2, ip
 8005538:	42bc      	cmp	r4, r7
 800553a:	bf88      	it	hi
 800553c:	2200      	movhi	r2, #0
 800553e:	4413      	add	r3, r2
 8005540:	1a18      	subs	r0, r3, r0
 8005542:	b003      	add	sp, #12
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005546:	f812 5b01 	ldrb.w	r5, [r2], #1
 800554a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800554e:	e7ed      	b.n	800552c <__exponent+0x4a>
 8005550:	2330      	movs	r3, #48	; 0x30
 8005552:	3130      	adds	r1, #48	; 0x30
 8005554:	7083      	strb	r3, [r0, #2]
 8005556:	70c1      	strb	r1, [r0, #3]
 8005558:	1d03      	adds	r3, r0, #4
 800555a:	e7f1      	b.n	8005540 <__exponent+0x5e>

0800555c <_printf_float>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	b091      	sub	sp, #68	; 0x44
 8005562:	460c      	mov	r4, r1
 8005564:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005568:	4616      	mov	r6, r2
 800556a:	461f      	mov	r7, r3
 800556c:	4605      	mov	r5, r0
 800556e:	f000 fcc5 	bl	8005efc <_localeconv_r>
 8005572:	6803      	ldr	r3, [r0, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	9309      	str	r3, [sp, #36]	; 0x24
 8005578:	f7fa fdea 	bl	8000150 <strlen>
 800557c:	2300      	movs	r3, #0
 800557e:	930e      	str	r3, [sp, #56]	; 0x38
 8005580:	f8d8 3000 	ldr.w	r3, [r8]
 8005584:	900a      	str	r0, [sp, #40]	; 0x28
 8005586:	3307      	adds	r3, #7
 8005588:	f023 0307 	bic.w	r3, r3, #7
 800558c:	f103 0208 	add.w	r2, r3, #8
 8005590:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005594:	f8d4 b000 	ldr.w	fp, [r4]
 8005598:	f8c8 2000 	str.w	r2, [r8]
 800559c:	e9d3 a800 	ldrd	sl, r8, [r3]
 80055a0:	4652      	mov	r2, sl
 80055a2:	4643      	mov	r3, r8
 80055a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055a8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80055ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	4650      	mov	r0, sl
 80055b4:	4b9c      	ldr	r3, [pc, #624]	; (8005828 <_printf_float+0x2cc>)
 80055b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055b8:	f7fb fa28 	bl	8000a0c <__aeabi_dcmpun>
 80055bc:	bb70      	cbnz	r0, 800561c <_printf_float+0xc0>
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	4650      	mov	r0, sl
 80055c4:	4b98      	ldr	r3, [pc, #608]	; (8005828 <_printf_float+0x2cc>)
 80055c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055c8:	f7fb fa02 	bl	80009d0 <__aeabi_dcmple>
 80055cc:	bb30      	cbnz	r0, 800561c <_printf_float+0xc0>
 80055ce:	2200      	movs	r2, #0
 80055d0:	2300      	movs	r3, #0
 80055d2:	4650      	mov	r0, sl
 80055d4:	4641      	mov	r1, r8
 80055d6:	f7fb f9f1 	bl	80009bc <__aeabi_dcmplt>
 80055da:	b110      	cbz	r0, 80055e2 <_printf_float+0x86>
 80055dc:	232d      	movs	r3, #45	; 0x2d
 80055de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e2:	4a92      	ldr	r2, [pc, #584]	; (800582c <_printf_float+0x2d0>)
 80055e4:	4b92      	ldr	r3, [pc, #584]	; (8005830 <_printf_float+0x2d4>)
 80055e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80055ea:	bf94      	ite	ls
 80055ec:	4690      	movls	r8, r2
 80055ee:	4698      	movhi	r8, r3
 80055f0:	2303      	movs	r3, #3
 80055f2:	f04f 0a00 	mov.w	sl, #0
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	f02b 0304 	bic.w	r3, fp, #4
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	4633      	mov	r3, r6
 8005600:	4621      	mov	r1, r4
 8005602:	4628      	mov	r0, r5
 8005604:	9700      	str	r7, [sp, #0]
 8005606:	aa0f      	add	r2, sp, #60	; 0x3c
 8005608:	f000 f9d6 	bl	80059b8 <_printf_common>
 800560c:	3001      	adds	r0, #1
 800560e:	f040 8090 	bne.w	8005732 <_printf_float+0x1d6>
 8005612:	f04f 30ff 	mov.w	r0, #4294967295
 8005616:	b011      	add	sp, #68	; 0x44
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561c:	4652      	mov	r2, sl
 800561e:	4643      	mov	r3, r8
 8005620:	4650      	mov	r0, sl
 8005622:	4641      	mov	r1, r8
 8005624:	f7fb f9f2 	bl	8000a0c <__aeabi_dcmpun>
 8005628:	b148      	cbz	r0, 800563e <_printf_float+0xe2>
 800562a:	f1b8 0f00 	cmp.w	r8, #0
 800562e:	bfb8      	it	lt
 8005630:	232d      	movlt	r3, #45	; 0x2d
 8005632:	4a80      	ldr	r2, [pc, #512]	; (8005834 <_printf_float+0x2d8>)
 8005634:	bfb8      	it	lt
 8005636:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800563a:	4b7f      	ldr	r3, [pc, #508]	; (8005838 <_printf_float+0x2dc>)
 800563c:	e7d3      	b.n	80055e6 <_printf_float+0x8a>
 800563e:	6863      	ldr	r3, [r4, #4]
 8005640:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	d142      	bne.n	80056ce <_printf_float+0x172>
 8005648:	2306      	movs	r3, #6
 800564a:	6063      	str	r3, [r4, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	9206      	str	r2, [sp, #24]
 8005650:	aa0e      	add	r2, sp, #56	; 0x38
 8005652:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005656:	aa0d      	add	r2, sp, #52	; 0x34
 8005658:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800565c:	9203      	str	r2, [sp, #12]
 800565e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005662:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	4652      	mov	r2, sl
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	4628      	mov	r0, r5
 8005670:	4643      	mov	r3, r8
 8005672:	910b      	str	r1, [sp, #44]	; 0x2c
 8005674:	f7ff fed6 	bl	8005424 <__cvt>
 8005678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800567a:	4680      	mov	r8, r0
 800567c:	2947      	cmp	r1, #71	; 0x47
 800567e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005680:	d108      	bne.n	8005694 <_printf_float+0x138>
 8005682:	1cc8      	adds	r0, r1, #3
 8005684:	db02      	blt.n	800568c <_printf_float+0x130>
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	4299      	cmp	r1, r3
 800568a:	dd40      	ble.n	800570e <_printf_float+0x1b2>
 800568c:	f1a9 0902 	sub.w	r9, r9, #2
 8005690:	fa5f f989 	uxtb.w	r9, r9
 8005694:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005698:	d81f      	bhi.n	80056da <_printf_float+0x17e>
 800569a:	464a      	mov	r2, r9
 800569c:	3901      	subs	r1, #1
 800569e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056a2:	910d      	str	r1, [sp, #52]	; 0x34
 80056a4:	f7ff ff1d 	bl	80054e2 <__exponent>
 80056a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056aa:	4682      	mov	sl, r0
 80056ac:	1813      	adds	r3, r2, r0
 80056ae:	2a01      	cmp	r2, #1
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	dc02      	bgt.n	80056ba <_printf_float+0x15e>
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	07d2      	lsls	r2, r2, #31
 80056b8:	d501      	bpl.n	80056be <_printf_float+0x162>
 80056ba:	3301      	adds	r3, #1
 80056bc:	6123      	str	r3, [r4, #16]
 80056be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d09b      	beq.n	80055fe <_printf_float+0xa2>
 80056c6:	232d      	movs	r3, #45	; 0x2d
 80056c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056cc:	e797      	b.n	80055fe <_printf_float+0xa2>
 80056ce:	2947      	cmp	r1, #71	; 0x47
 80056d0:	d1bc      	bne.n	800564c <_printf_float+0xf0>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ba      	bne.n	800564c <_printf_float+0xf0>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7b7      	b.n	800564a <_printf_float+0xee>
 80056da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80056de:	d118      	bne.n	8005712 <_printf_float+0x1b6>
 80056e0:	2900      	cmp	r1, #0
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	dd0b      	ble.n	80056fe <_printf_float+0x1a2>
 80056e6:	6121      	str	r1, [r4, #16]
 80056e8:	b913      	cbnz	r3, 80056f0 <_printf_float+0x194>
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	07d0      	lsls	r0, r2, #31
 80056ee:	d502      	bpl.n	80056f6 <_printf_float+0x19a>
 80056f0:	3301      	adds	r3, #1
 80056f2:	440b      	add	r3, r1
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	f04f 0a00 	mov.w	sl, #0
 80056fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80056fc:	e7df      	b.n	80056be <_printf_float+0x162>
 80056fe:	b913      	cbnz	r3, 8005706 <_printf_float+0x1aa>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	07d2      	lsls	r2, r2, #31
 8005704:	d501      	bpl.n	800570a <_printf_float+0x1ae>
 8005706:	3302      	adds	r3, #2
 8005708:	e7f4      	b.n	80056f4 <_printf_float+0x198>
 800570a:	2301      	movs	r3, #1
 800570c:	e7f2      	b.n	80056f4 <_printf_float+0x198>
 800570e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005714:	4299      	cmp	r1, r3
 8005716:	db05      	blt.n	8005724 <_printf_float+0x1c8>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	6121      	str	r1, [r4, #16]
 800571c:	07d8      	lsls	r0, r3, #31
 800571e:	d5ea      	bpl.n	80056f6 <_printf_float+0x19a>
 8005720:	1c4b      	adds	r3, r1, #1
 8005722:	e7e7      	b.n	80056f4 <_printf_float+0x198>
 8005724:	2900      	cmp	r1, #0
 8005726:	bfcc      	ite	gt
 8005728:	2201      	movgt	r2, #1
 800572a:	f1c1 0202 	rsble	r2, r1, #2
 800572e:	4413      	add	r3, r2
 8005730:	e7e0      	b.n	80056f4 <_printf_float+0x198>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	055a      	lsls	r2, r3, #21
 8005736:	d407      	bmi.n	8005748 <_printf_float+0x1ec>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	4642      	mov	r2, r8
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d12b      	bne.n	800579e <_printf_float+0x242>
 8005746:	e764      	b.n	8005612 <_printf_float+0xb6>
 8005748:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800574c:	f240 80dd 	bls.w	800590a <_printf_float+0x3ae>
 8005750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005754:	2200      	movs	r2, #0
 8005756:	2300      	movs	r3, #0
 8005758:	f7fb f926 	bl	80009a8 <__aeabi_dcmpeq>
 800575c:	2800      	cmp	r0, #0
 800575e:	d033      	beq.n	80057c8 <_printf_float+0x26c>
 8005760:	2301      	movs	r3, #1
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	4a35      	ldr	r2, [pc, #212]	; (800583c <_printf_float+0x2e0>)
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f af51 	beq.w	8005612 <_printf_float+0xb6>
 8005770:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005774:	429a      	cmp	r2, r3
 8005776:	db02      	blt.n	800577e <_printf_float+0x222>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	07d8      	lsls	r0, r3, #31
 800577c:	d50f      	bpl.n	800579e <_printf_float+0x242>
 800577e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005782:	4631      	mov	r1, r6
 8005784:	4628      	mov	r0, r5
 8005786:	47b8      	blx	r7
 8005788:	3001      	adds	r0, #1
 800578a:	f43f af42 	beq.w	8005612 <_printf_float+0xb6>
 800578e:	f04f 0800 	mov.w	r8, #0
 8005792:	f104 091a 	add.w	r9, r4, #26
 8005796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005798:	3b01      	subs	r3, #1
 800579a:	4543      	cmp	r3, r8
 800579c:	dc09      	bgt.n	80057b2 <_printf_float+0x256>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	079b      	lsls	r3, r3, #30
 80057a2:	f100 8104 	bmi.w	80059ae <_printf_float+0x452>
 80057a6:	68e0      	ldr	r0, [r4, #12]
 80057a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057aa:	4298      	cmp	r0, r3
 80057ac:	bfb8      	it	lt
 80057ae:	4618      	movlt	r0, r3
 80057b0:	e731      	b.n	8005616 <_printf_float+0xba>
 80057b2:	2301      	movs	r3, #1
 80057b4:	464a      	mov	r2, r9
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	f43f af28 	beq.w	8005612 <_printf_float+0xb6>
 80057c2:	f108 0801 	add.w	r8, r8, #1
 80057c6:	e7e6      	b.n	8005796 <_printf_float+0x23a>
 80057c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	dc38      	bgt.n	8005840 <_printf_float+0x2e4>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <_printf_float+0x2e0>)
 80057d6:	47b8      	blx	r7
 80057d8:	3001      	adds	r0, #1
 80057da:	f43f af1a 	beq.w	8005612 <_printf_float+0xb6>
 80057de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80057e2:	4313      	orrs	r3, r2
 80057e4:	d102      	bne.n	80057ec <_printf_float+0x290>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	07d9      	lsls	r1, r3, #31
 80057ea:	d5d8      	bpl.n	800579e <_printf_float+0x242>
 80057ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f0:	4631      	mov	r1, r6
 80057f2:	4628      	mov	r0, r5
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	f43f af0b 	beq.w	8005612 <_printf_float+0xb6>
 80057fc:	f04f 0900 	mov.w	r9, #0
 8005800:	f104 0a1a 	add.w	sl, r4, #26
 8005804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005806:	425b      	negs	r3, r3
 8005808:	454b      	cmp	r3, r9
 800580a:	dc01      	bgt.n	8005810 <_printf_float+0x2b4>
 800580c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800580e:	e794      	b.n	800573a <_printf_float+0x1de>
 8005810:	2301      	movs	r3, #1
 8005812:	4652      	mov	r2, sl
 8005814:	4631      	mov	r1, r6
 8005816:	4628      	mov	r0, r5
 8005818:	47b8      	blx	r7
 800581a:	3001      	adds	r0, #1
 800581c:	f43f aef9 	beq.w	8005612 <_printf_float+0xb6>
 8005820:	f109 0901 	add.w	r9, r9, #1
 8005824:	e7ee      	b.n	8005804 <_printf_float+0x2a8>
 8005826:	bf00      	nop
 8005828:	7fefffff 	.word	0x7fefffff
 800582c:	08007dc6 	.word	0x08007dc6
 8005830:	08007dca 	.word	0x08007dca
 8005834:	08007dce 	.word	0x08007dce
 8005838:	08007dd2 	.word	0x08007dd2
 800583c:	08007dd6 	.word	0x08007dd6
 8005840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005842:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005844:	429a      	cmp	r2, r3
 8005846:	bfa8      	it	ge
 8005848:	461a      	movge	r2, r3
 800584a:	2a00      	cmp	r2, #0
 800584c:	4691      	mov	r9, r2
 800584e:	dc37      	bgt.n	80058c0 <_printf_float+0x364>
 8005850:	f04f 0b00 	mov.w	fp, #0
 8005854:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005858:	f104 021a 	add.w	r2, r4, #26
 800585c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005860:	ebaa 0309 	sub.w	r3, sl, r9
 8005864:	455b      	cmp	r3, fp
 8005866:	dc33      	bgt.n	80058d0 <_printf_float+0x374>
 8005868:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800586c:	429a      	cmp	r2, r3
 800586e:	db3b      	blt.n	80058e8 <_printf_float+0x38c>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	07da      	lsls	r2, r3, #31
 8005874:	d438      	bmi.n	80058e8 <_printf_float+0x38c>
 8005876:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800587a:	eba2 0903 	sub.w	r9, r2, r3
 800587e:	eba2 020a 	sub.w	r2, r2, sl
 8005882:	4591      	cmp	r9, r2
 8005884:	bfa8      	it	ge
 8005886:	4691      	movge	r9, r2
 8005888:	f1b9 0f00 	cmp.w	r9, #0
 800588c:	dc34      	bgt.n	80058f8 <_printf_float+0x39c>
 800588e:	f04f 0800 	mov.w	r8, #0
 8005892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005896:	f104 0a1a 	add.w	sl, r4, #26
 800589a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	eba3 0309 	sub.w	r3, r3, r9
 80058a4:	4543      	cmp	r3, r8
 80058a6:	f77f af7a 	ble.w	800579e <_printf_float+0x242>
 80058aa:	2301      	movs	r3, #1
 80058ac:	4652      	mov	r2, sl
 80058ae:	4631      	mov	r1, r6
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	f43f aeac 	beq.w	8005612 <_printf_float+0xb6>
 80058ba:	f108 0801 	add.w	r8, r8, #1
 80058be:	e7ec      	b.n	800589a <_printf_float+0x33e>
 80058c0:	4613      	mov	r3, r2
 80058c2:	4631      	mov	r1, r6
 80058c4:	4642      	mov	r2, r8
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b8      	blx	r7
 80058ca:	3001      	adds	r0, #1
 80058cc:	d1c0      	bne.n	8005850 <_printf_float+0x2f4>
 80058ce:	e6a0      	b.n	8005612 <_printf_float+0xb6>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f ae99 	beq.w	8005612 <_printf_float+0xb6>
 80058e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058e2:	f10b 0b01 	add.w	fp, fp, #1
 80058e6:	e7b9      	b.n	800585c <_printf_float+0x300>
 80058e8:	4631      	mov	r1, r6
 80058ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b8      	blx	r7
 80058f2:	3001      	adds	r0, #1
 80058f4:	d1bf      	bne.n	8005876 <_printf_float+0x31a>
 80058f6:	e68c      	b.n	8005612 <_printf_float+0xb6>
 80058f8:	464b      	mov	r3, r9
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	eb08 020a 	add.w	r2, r8, sl
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	d1c2      	bne.n	800588e <_printf_float+0x332>
 8005908:	e683      	b.n	8005612 <_printf_float+0xb6>
 800590a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800590c:	2a01      	cmp	r2, #1
 800590e:	dc01      	bgt.n	8005914 <_printf_float+0x3b8>
 8005910:	07db      	lsls	r3, r3, #31
 8005912:	d539      	bpl.n	8005988 <_printf_float+0x42c>
 8005914:	2301      	movs	r3, #1
 8005916:	4642      	mov	r2, r8
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	f43f ae77 	beq.w	8005612 <_printf_float+0xb6>
 8005924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	f43f ae6f 	beq.w	8005612 <_printf_float+0xb6>
 8005934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005938:	2200      	movs	r2, #0
 800593a:	2300      	movs	r3, #0
 800593c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005940:	f7fb f832 	bl	80009a8 <__aeabi_dcmpeq>
 8005944:	b9d8      	cbnz	r0, 800597e <_printf_float+0x422>
 8005946:	f109 33ff 	add.w	r3, r9, #4294967295
 800594a:	f108 0201 	add.w	r2, r8, #1
 800594e:	4631      	mov	r1, r6
 8005950:	4628      	mov	r0, r5
 8005952:	47b8      	blx	r7
 8005954:	3001      	adds	r0, #1
 8005956:	d10e      	bne.n	8005976 <_printf_float+0x41a>
 8005958:	e65b      	b.n	8005612 <_printf_float+0xb6>
 800595a:	2301      	movs	r3, #1
 800595c:	464a      	mov	r2, r9
 800595e:	4631      	mov	r1, r6
 8005960:	4628      	mov	r0, r5
 8005962:	47b8      	blx	r7
 8005964:	3001      	adds	r0, #1
 8005966:	f43f ae54 	beq.w	8005612 <_printf_float+0xb6>
 800596a:	f108 0801 	add.w	r8, r8, #1
 800596e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005970:	3b01      	subs	r3, #1
 8005972:	4543      	cmp	r3, r8
 8005974:	dcf1      	bgt.n	800595a <_printf_float+0x3fe>
 8005976:	4653      	mov	r3, sl
 8005978:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800597c:	e6de      	b.n	800573c <_printf_float+0x1e0>
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	f104 091a 	add.w	r9, r4, #26
 8005986:	e7f2      	b.n	800596e <_printf_float+0x412>
 8005988:	2301      	movs	r3, #1
 800598a:	4642      	mov	r2, r8
 800598c:	e7df      	b.n	800594e <_printf_float+0x3f2>
 800598e:	2301      	movs	r3, #1
 8005990:	464a      	mov	r2, r9
 8005992:	4631      	mov	r1, r6
 8005994:	4628      	mov	r0, r5
 8005996:	47b8      	blx	r7
 8005998:	3001      	adds	r0, #1
 800599a:	f43f ae3a 	beq.w	8005612 <_printf_float+0xb6>
 800599e:	f108 0801 	add.w	r8, r8, #1
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059a6:	1a5b      	subs	r3, r3, r1
 80059a8:	4543      	cmp	r3, r8
 80059aa:	dcf0      	bgt.n	800598e <_printf_float+0x432>
 80059ac:	e6fb      	b.n	80057a6 <_printf_float+0x24a>
 80059ae:	f04f 0800 	mov.w	r8, #0
 80059b2:	f104 0919 	add.w	r9, r4, #25
 80059b6:	e7f4      	b.n	80059a2 <_printf_float+0x446>

080059b8 <_printf_common>:
 80059b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	4616      	mov	r6, r2
 80059be:	4699      	mov	r9, r3
 80059c0:	688a      	ldr	r2, [r1, #8]
 80059c2:	690b      	ldr	r3, [r1, #16]
 80059c4:	4607      	mov	r7, r0
 80059c6:	4293      	cmp	r3, r2
 80059c8:	bfb8      	it	lt
 80059ca:	4613      	movlt	r3, r2
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059d2:	460c      	mov	r4, r1
 80059d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d8:	b10a      	cbz	r2, 80059de <_printf_common+0x26>
 80059da:	3301      	adds	r3, #1
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	0699      	lsls	r1, r3, #26
 80059e2:	bf42      	ittt	mi
 80059e4:	6833      	ldrmi	r3, [r6, #0]
 80059e6:	3302      	addmi	r3, #2
 80059e8:	6033      	strmi	r3, [r6, #0]
 80059ea:	6825      	ldr	r5, [r4, #0]
 80059ec:	f015 0506 	ands.w	r5, r5, #6
 80059f0:	d106      	bne.n	8005a00 <_printf_common+0x48>
 80059f2:	f104 0a19 	add.w	sl, r4, #25
 80059f6:	68e3      	ldr	r3, [r4, #12]
 80059f8:	6832      	ldr	r2, [r6, #0]
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	dc2b      	bgt.n	8005a58 <_printf_common+0xa0>
 8005a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a04:	1e13      	subs	r3, r2, #0
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	0692      	lsls	r2, r2, #26
 8005a0e:	d430      	bmi.n	8005a72 <_printf_common+0xba>
 8005a10:	4649      	mov	r1, r9
 8005a12:	4638      	mov	r0, r7
 8005a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a18:	47c0      	blx	r8
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d023      	beq.n	8005a66 <_printf_common+0xae>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	6922      	ldr	r2, [r4, #16]
 8005a22:	f003 0306 	and.w	r3, r3, #6
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	bf14      	ite	ne
 8005a2a:	2500      	movne	r5, #0
 8005a2c:	6833      	ldreq	r3, [r6, #0]
 8005a2e:	f04f 0600 	mov.w	r6, #0
 8005a32:	bf08      	it	eq
 8005a34:	68e5      	ldreq	r5, [r4, #12]
 8005a36:	f104 041a 	add.w	r4, r4, #26
 8005a3a:	bf08      	it	eq
 8005a3c:	1aed      	subeq	r5, r5, r3
 8005a3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a42:	bf08      	it	eq
 8005a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bfc4      	itt	gt
 8005a4c:	1a9b      	subgt	r3, r3, r2
 8005a4e:	18ed      	addgt	r5, r5, r3
 8005a50:	42b5      	cmp	r5, r6
 8005a52:	d11a      	bne.n	8005a8a <_printf_common+0xd2>
 8005a54:	2000      	movs	r0, #0
 8005a56:	e008      	b.n	8005a6a <_printf_common+0xb2>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4652      	mov	r2, sl
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d103      	bne.n	8005a6e <_printf_common+0xb6>
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	3501      	adds	r5, #1
 8005a70:	e7c1      	b.n	80059f6 <_printf_common+0x3e>
 8005a72:	2030      	movs	r0, #48	; 0x30
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a80:	4422      	add	r2, r4
 8005a82:	3302      	adds	r3, #2
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	e7c2      	b.n	8005a10 <_printf_common+0x58>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d0e6      	beq.n	8005a66 <_printf_common+0xae>
 8005a98:	3601      	adds	r6, #1
 8005a9a:	e7d9      	b.n	8005a50 <_printf_common+0x98>

08005a9c <_printf_i>:
 8005a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	7e0f      	ldrb	r7, [r1, #24]
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	2f78      	cmp	r7, #120	; 0x78
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	469a      	mov	sl, r3
 8005aac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab2:	d807      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ab4:	2f62      	cmp	r7, #98	; 0x62
 8005ab6:	d80a      	bhi.n	8005ace <_printf_i+0x32>
 8005ab8:	2f00      	cmp	r7, #0
 8005aba:	f000 80d5 	beq.w	8005c68 <_printf_i+0x1cc>
 8005abe:	2f58      	cmp	r7, #88	; 0x58
 8005ac0:	f000 80c1 	beq.w	8005c46 <_printf_i+0x1aa>
 8005ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005acc:	e03a      	b.n	8005b44 <_printf_i+0xa8>
 8005ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad2:	2b15      	cmp	r3, #21
 8005ad4:	d8f6      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ad6:	a101      	add	r1, pc, #4	; (adr r1, 8005adc <_printf_i+0x40>)
 8005ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b49 	.word	0x08005b49
 8005ae4:	08005ac5 	.word	0x08005ac5
 8005ae8:	08005ac5 	.word	0x08005ac5
 8005aec:	08005ac5 	.word	0x08005ac5
 8005af0:	08005ac5 	.word	0x08005ac5
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005ac5 	.word	0x08005ac5
 8005afc:	08005ac5 	.word	0x08005ac5
 8005b00:	08005ac5 	.word	0x08005ac5
 8005b04:	08005ac5 	.word	0x08005ac5
 8005b08:	08005c4f 	.word	0x08005c4f
 8005b0c:	08005b75 	.word	0x08005b75
 8005b10:	08005c09 	.word	0x08005c09
 8005b14:	08005ac5 	.word	0x08005ac5
 8005b18:	08005ac5 	.word	0x08005ac5
 8005b1c:	08005c71 	.word	0x08005c71
 8005b20:	08005ac5 	.word	0x08005ac5
 8005b24:	08005b75 	.word	0x08005b75
 8005b28:	08005ac5 	.word	0x08005ac5
 8005b2c:	08005ac5 	.word	0x08005ac5
 8005b30:	08005c11 	.word	0x08005c11
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	602a      	str	r2, [r5, #0]
 8005b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0a0      	b.n	8005c8a <_printf_i+0x1ee>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	0607      	lsls	r7, r0, #24
 8005b4e:	f103 0104 	add.w	r1, r3, #4
 8005b52:	6029      	str	r1, [r5, #0]
 8005b54:	d501      	bpl.n	8005b5a <_printf_i+0xbe>
 8005b56:	681e      	ldr	r6, [r3, #0]
 8005b58:	e003      	b.n	8005b62 <_printf_i+0xc6>
 8005b5a:	0646      	lsls	r6, r0, #25
 8005b5c:	d5fb      	bpl.n	8005b56 <_printf_i+0xba>
 8005b5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b62:	2e00      	cmp	r6, #0
 8005b64:	da03      	bge.n	8005b6e <_printf_i+0xd2>
 8005b66:	232d      	movs	r3, #45	; 0x2d
 8005b68:	4276      	negs	r6, r6
 8005b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6e:	230a      	movs	r3, #10
 8005b70:	4859      	ldr	r0, [pc, #356]	; (8005cd8 <_printf_i+0x23c>)
 8005b72:	e012      	b.n	8005b9a <_printf_i+0xfe>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	6820      	ldr	r0, [r4, #0]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	6029      	str	r1, [r5, #0]
 8005b7c:	0605      	lsls	r5, r0, #24
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0xe8>
 8005b80:	681e      	ldr	r6, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <_printf_i+0xee>
 8005b84:	0641      	lsls	r1, r0, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0xe4>
 8005b88:	881e      	ldrh	r6, [r3, #0]
 8005b8a:	2f6f      	cmp	r7, #111	; 0x6f
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2308      	moveq	r3, #8
 8005b90:	230a      	movne	r3, #10
 8005b92:	4851      	ldr	r0, [pc, #324]	; (8005cd8 <_printf_i+0x23c>)
 8005b94:	2100      	movs	r1, #0
 8005b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b9a:	6865      	ldr	r5, [r4, #4]
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	bfa8      	it	ge
 8005ba0:	6821      	ldrge	r1, [r4, #0]
 8005ba2:	60a5      	str	r5, [r4, #8]
 8005ba4:	bfa4      	itt	ge
 8005ba6:	f021 0104 	bicge.w	r1, r1, #4
 8005baa:	6021      	strge	r1, [r4, #0]
 8005bac:	b90e      	cbnz	r6, 8005bb2 <_printf_i+0x116>
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	d04b      	beq.n	8005c4a <_printf_i+0x1ae>
 8005bb2:	4615      	mov	r5, r2
 8005bb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bb8:	fb03 6711 	mls	r7, r3, r1, r6
 8005bbc:	5dc7      	ldrb	r7, [r0, r7]
 8005bbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc2:	4637      	mov	r7, r6
 8005bc4:	42bb      	cmp	r3, r7
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	d9f4      	bls.n	8005bb4 <_printf_i+0x118>
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d10b      	bne.n	8005be6 <_printf_i+0x14a>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	07de      	lsls	r6, r3, #31
 8005bd2:	d508      	bpl.n	8005be6 <_printf_i+0x14a>
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	6861      	ldr	r1, [r4, #4]
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	bfde      	ittt	le
 8005bdc:	2330      	movle	r3, #48	; 0x30
 8005bde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005be6:	1b52      	subs	r2, r2, r5
 8005be8:	6122      	str	r2, [r4, #16]
 8005bea:	464b      	mov	r3, r9
 8005bec:	4621      	mov	r1, r4
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	aa03      	add	r2, sp, #12
 8005bf6:	f7ff fedf 	bl	80059b8 <_printf_common>
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d14a      	bne.n	8005c94 <_printf_i+0x1f8>
 8005bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005c02:	b004      	add	sp, #16
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f043 0320 	orr.w	r3, r3, #32
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	2778      	movs	r7, #120	; 0x78
 8005c12:	4832      	ldr	r0, [pc, #200]	; (8005cdc <_printf_i+0x240>)
 8005c14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	6829      	ldr	r1, [r5, #0]
 8005c1c:	061f      	lsls	r7, r3, #24
 8005c1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c22:	d402      	bmi.n	8005c2a <_printf_i+0x18e>
 8005c24:	065f      	lsls	r7, r3, #25
 8005c26:	bf48      	it	mi
 8005c28:	b2b6      	uxthmi	r6, r6
 8005c2a:	07df      	lsls	r7, r3, #31
 8005c2c:	bf48      	it	mi
 8005c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c32:	6029      	str	r1, [r5, #0]
 8005c34:	bf48      	it	mi
 8005c36:	6023      	strmi	r3, [r4, #0]
 8005c38:	b91e      	cbnz	r6, 8005c42 <_printf_i+0x1a6>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f023 0320 	bic.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2310      	movs	r3, #16
 8005c44:	e7a6      	b.n	8005b94 <_printf_i+0xf8>
 8005c46:	4824      	ldr	r0, [pc, #144]	; (8005cd8 <_printf_i+0x23c>)
 8005c48:	e7e4      	b.n	8005c14 <_printf_i+0x178>
 8005c4a:	4615      	mov	r5, r2
 8005c4c:	e7bd      	b.n	8005bca <_printf_i+0x12e>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	6826      	ldr	r6, [r4, #0]
 8005c52:	1d18      	adds	r0, r3, #4
 8005c54:	6961      	ldr	r1, [r4, #20]
 8005c56:	6028      	str	r0, [r5, #0]
 8005c58:	0635      	lsls	r5, r6, #24
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	d501      	bpl.n	8005c62 <_printf_i+0x1c6>
 8005c5e:	6019      	str	r1, [r3, #0]
 8005c60:	e002      	b.n	8005c68 <_printf_i+0x1cc>
 8005c62:	0670      	lsls	r0, r6, #25
 8005c64:	d5fb      	bpl.n	8005c5e <_printf_i+0x1c2>
 8005c66:	8019      	strh	r1, [r3, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4615      	mov	r5, r2
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	e7bc      	b.n	8005bea <_printf_i+0x14e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	2100      	movs	r1, #0
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	602a      	str	r2, [r5, #0]
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f9b4 	bl	8005fea <memchr>
 8005c82:	b108      	cbz	r0, 8005c88 <_printf_i+0x1ec>
 8005c84:	1b40      	subs	r0, r0, r5
 8005c86:	6060      	str	r0, [r4, #4]
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c92:	e7aa      	b.n	8005bea <_printf_i+0x14e>
 8005c94:	462a      	mov	r2, r5
 8005c96:	4649      	mov	r1, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	47d0      	blx	sl
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0ad      	beq.n	8005bfe <_printf_i+0x162>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	079b      	lsls	r3, r3, #30
 8005ca6:	d413      	bmi.n	8005cd0 <_printf_i+0x234>
 8005ca8:	68e0      	ldr	r0, [r4, #12]
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	4298      	cmp	r0, r3
 8005cae:	bfb8      	it	lt
 8005cb0:	4618      	movlt	r0, r3
 8005cb2:	e7a6      	b.n	8005c02 <_printf_i+0x166>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4640      	mov	r0, r8
 8005cbc:	47d0      	blx	sl
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d09d      	beq.n	8005bfe <_printf_i+0x162>
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	68e3      	ldr	r3, [r4, #12]
 8005cc6:	9903      	ldr	r1, [sp, #12]
 8005cc8:	1a5b      	subs	r3, r3, r1
 8005cca:	42ab      	cmp	r3, r5
 8005ccc:	dcf2      	bgt.n	8005cb4 <_printf_i+0x218>
 8005cce:	e7eb      	b.n	8005ca8 <_printf_i+0x20c>
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	f104 0619 	add.w	r6, r4, #25
 8005cd6:	e7f5      	b.n	8005cc4 <_printf_i+0x228>
 8005cd8:	08007dd8 	.word	0x08007dd8
 8005cdc:	08007de9 	.word	0x08007de9

08005ce0 <std>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cee:	6083      	str	r3, [r0, #8]
 8005cf0:	8181      	strh	r1, [r0, #12]
 8005cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8005cf4:	81c2      	strh	r2, [r0, #14]
 8005cf6:	6183      	str	r3, [r0, #24]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	305c      	adds	r0, #92	; 0x5c
 8005cfe:	f000 f8f4 	bl	8005eea <memset>
 8005d02:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <std+0x58>)
 8005d04:	6224      	str	r4, [r4, #32]
 8005d06:	6263      	str	r3, [r4, #36]	; 0x24
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <std+0x5c>)
 8005d0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <std+0x60>)
 8005d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d10:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <std+0x64>)
 8005d12:	6323      	str	r3, [r4, #48]	; 0x30
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <std+0x68>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d006      	beq.n	8005d28 <std+0x48>
 8005d1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d1e:	4294      	cmp	r4, r2
 8005d20:	d002      	beq.n	8005d28 <std+0x48>
 8005d22:	33d0      	adds	r3, #208	; 0xd0
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d105      	bne.n	8005d34 <std+0x54>
 8005d28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d30:	f000 b958 	b.w	8005fe4 <__retarget_lock_init_recursive>
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	bf00      	nop
 8005d38:	08005e65 	.word	0x08005e65
 8005d3c:	08005e87 	.word	0x08005e87
 8005d40:	08005ebf 	.word	0x08005ebf
 8005d44:	08005ee3 	.word	0x08005ee3
 8005d48:	200003fc 	.word	0x200003fc

08005d4c <stdio_exit_handler>:
 8005d4c:	4a02      	ldr	r2, [pc, #8]	; (8005d58 <stdio_exit_handler+0xc>)
 8005d4e:	4903      	ldr	r1, [pc, #12]	; (8005d5c <stdio_exit_handler+0x10>)
 8005d50:	4803      	ldr	r0, [pc, #12]	; (8005d60 <stdio_exit_handler+0x14>)
 8005d52:	f000 b869 	b.w	8005e28 <_fwalk_sglue>
 8005d56:	bf00      	nop
 8005d58:	2000001c 	.word	0x2000001c
 8005d5c:	080076cd 	.word	0x080076cd
 8005d60:	20000028 	.word	0x20000028

08005d64 <cleanup_stdio>:
 8005d64:	6841      	ldr	r1, [r0, #4]
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <cleanup_stdio+0x34>)
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	d001      	beq.n	8005d74 <cleanup_stdio+0x10>
 8005d70:	f001 fcac 	bl	80076cc <_fflush_r>
 8005d74:	68a1      	ldr	r1, [r4, #8]
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <cleanup_stdio+0x38>)
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	d002      	beq.n	8005d82 <cleanup_stdio+0x1e>
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f001 fca5 	bl	80076cc <_fflush_r>
 8005d82:	68e1      	ldr	r1, [r4, #12]
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <cleanup_stdio+0x3c>)
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d004      	beq.n	8005d94 <cleanup_stdio+0x30>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d90:	f001 bc9c 	b.w	80076cc <_fflush_r>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	bf00      	nop
 8005d98:	200003fc 	.word	0x200003fc
 8005d9c:	20000464 	.word	0x20000464
 8005da0:	200004cc 	.word	0x200004cc

08005da4 <global_stdio_init.part.0>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <global_stdio_init.part.0+0x30>)
 8005da8:	4c0b      	ldr	r4, [pc, #44]	; (8005dd8 <global_stdio_init.part.0+0x34>)
 8005daa:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <global_stdio_init.part.0+0x38>)
 8005dac:	4620      	mov	r0, r4
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	2104      	movs	r1, #4
 8005db2:	2200      	movs	r2, #0
 8005db4:	f7ff ff94 	bl	8005ce0 <std>
 8005db8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	2109      	movs	r1, #9
 8005dc0:	f7ff ff8e 	bl	8005ce0 <std>
 8005dc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005dc8:	2202      	movs	r2, #2
 8005dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dce:	2112      	movs	r1, #18
 8005dd0:	f7ff bf86 	b.w	8005ce0 <std>
 8005dd4:	20000534 	.word	0x20000534
 8005dd8:	200003fc 	.word	0x200003fc
 8005ddc:	08005d4d 	.word	0x08005d4d

08005de0 <__sfp_lock_acquire>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sfp_lock_acquire+0x8>)
 8005de2:	f000 b900 	b.w	8005fe6 <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	2000053d 	.word	0x2000053d

08005dec <__sfp_lock_release>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__sfp_lock_release+0x8>)
 8005dee:	f000 b8fb 	b.w	8005fe8 <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	2000053d 	.word	0x2000053d

08005df8 <__sinit>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff fff0 	bl	8005de0 <__sfp_lock_acquire>
 8005e00:	6a23      	ldr	r3, [r4, #32]
 8005e02:	b11b      	cbz	r3, 8005e0c <__sinit+0x14>
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f7ff bff0 	b.w	8005dec <__sfp_lock_release>
 8005e0c:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <__sinit+0x28>)
 8005e0e:	6223      	str	r3, [r4, #32]
 8005e10:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <__sinit+0x2c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f5      	bne.n	8005e04 <__sinit+0xc>
 8005e18:	f7ff ffc4 	bl	8005da4 <global_stdio_init.part.0>
 8005e1c:	e7f2      	b.n	8005e04 <__sinit+0xc>
 8005e1e:	bf00      	nop
 8005e20:	08005d65 	.word	0x08005d65
 8005e24:	20000534 	.word	0x20000534

08005e28 <_fwalk_sglue>:
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	4688      	mov	r8, r1
 8005e30:	4614      	mov	r4, r2
 8005e32:	2600      	movs	r6, #0
 8005e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e38:	f1b9 0901 	subs.w	r9, r9, #1
 8005e3c:	d505      	bpl.n	8005e4a <_fwalk_sglue+0x22>
 8005e3e:	6824      	ldr	r4, [r4, #0]
 8005e40:	2c00      	cmp	r4, #0
 8005e42:	d1f7      	bne.n	8005e34 <_fwalk_sglue+0xc>
 8005e44:	4630      	mov	r0, r6
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d907      	bls.n	8005e60 <_fwalk_sglue+0x38>
 8005e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e54:	3301      	adds	r3, #1
 8005e56:	d003      	beq.n	8005e60 <_fwalk_sglue+0x38>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	47c0      	blx	r8
 8005e5e:	4306      	orrs	r6, r0
 8005e60:	3568      	adds	r5, #104	; 0x68
 8005e62:	e7e9      	b.n	8005e38 <_fwalk_sglue+0x10>

08005e64 <__sread>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	460c      	mov	r4, r1
 8005e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6c:	f000 f86c 	bl	8005f48 <_read_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	bfab      	itete	ge
 8005e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e76:	89a3      	ldrhlt	r3, [r4, #12]
 8005e78:	181b      	addge	r3, r3, r0
 8005e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e7e:	bfac      	ite	ge
 8005e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e82:	81a3      	strhlt	r3, [r4, #12]
 8005e84:	bd10      	pop	{r4, pc}

08005e86 <__swrite>:
 8005e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	898b      	ldrh	r3, [r1, #12]
 8005e8e:	4605      	mov	r5, r0
 8005e90:	05db      	lsls	r3, r3, #23
 8005e92:	460c      	mov	r4, r1
 8005e94:	4616      	mov	r6, r2
 8005e96:	d505      	bpl.n	8005ea4 <__swrite+0x1e>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	f000 f840 	bl	8005f24 <_lseek_r>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	4628      	mov	r0, r5
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	f000 b857 	b.w	8005f6c <_write_r>

08005ebe <__sseek>:
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec6:	f000 f82d 	bl	8005f24 <_lseek_r>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	bf15      	itete	ne
 8005ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eda:	81a3      	strheq	r3, [r4, #12]
 8005edc:	bf18      	it	ne
 8005ede:	81a3      	strhne	r3, [r4, #12]
 8005ee0:	bd10      	pop	{r4, pc}

08005ee2 <__sclose>:
 8005ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee6:	f000 b80d 	b.w	8005f04 <_close_r>

08005eea <memset>:
 8005eea:	4603      	mov	r3, r0
 8005eec:	4402      	add	r2, r0
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d100      	bne.n	8005ef4 <memset+0xa>
 8005ef2:	4770      	bx	lr
 8005ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef8:	e7f9      	b.n	8005eee <memset+0x4>
	...

08005efc <_localeconv_r>:
 8005efc:	4800      	ldr	r0, [pc, #0]	; (8005f00 <_localeconv_r+0x4>)
 8005efe:	4770      	bx	lr
 8005f00:	20000168 	.word	0x20000168

08005f04 <_close_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	2300      	movs	r3, #0
 8005f08:	4d05      	ldr	r5, [pc, #20]	; (8005f20 <_close_r+0x1c>)
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fc fc64 	bl	80027dc <_close>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_close_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_close_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	20000538 	.word	0x20000538

08005f24 <_lseek_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4d05      	ldr	r5, [pc, #20]	; (8005f44 <_lseek_r+0x20>)
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fc fc76 	bl	8002824 <_lseek>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_lseek_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_lseek_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000538 	.word	0x20000538

08005f48 <_read_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	2200      	movs	r2, #0
 8005f52:	4d05      	ldr	r5, [pc, #20]	; (8005f68 <_read_r+0x20>)
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fc fc23 	bl	80027a2 <_read>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_read_r+0x1e>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_read_r+0x1e>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	20000538 	.word	0x20000538

08005f6c <_write_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	2200      	movs	r2, #0
 8005f76:	4d05      	ldr	r5, [pc, #20]	; (8005f8c <_write_r+0x20>)
 8005f78:	602a      	str	r2, [r5, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f7fb fed8 	bl	8001d30 <_write>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_write_r+0x1e>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_write_r+0x1e>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	20000538 	.word	0x20000538

08005f90 <__errno>:
 8005f90:	4b01      	ldr	r3, [pc, #4]	; (8005f98 <__errno+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000074 	.word	0x20000074

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	4d0c      	ldr	r5, [pc, #48]	; (8005fd4 <__libc_init_array+0x38>)
 8005fa2:	4c0d      	ldr	r4, [pc, #52]	; (8005fd8 <__libc_init_array+0x3c>)
 8005fa4:	1b64      	subs	r4, r4, r5
 8005fa6:	10a4      	asrs	r4, r4, #2
 8005fa8:	42a6      	cmp	r6, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	f001 fede 	bl	8007d6c <_init>
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	4d0a      	ldr	r5, [pc, #40]	; (8005fdc <__libc_init_array+0x40>)
 8005fb4:	4c0a      	ldr	r4, [pc, #40]	; (8005fe0 <__libc_init_array+0x44>)
 8005fb6:	1b64      	subs	r4, r4, r5
 8005fb8:	10a4      	asrs	r4, r4, #2
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc4:	4798      	blx	r3
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fce:	4798      	blx	r3
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	08008134 	.word	0x08008134
 8005fd8:	08008134 	.word	0x08008134
 8005fdc:	08008134 	.word	0x08008134
 8005fe0:	08008138 	.word	0x08008138

08005fe4 <__retarget_lock_init_recursive>:
 8005fe4:	4770      	bx	lr

08005fe6 <__retarget_lock_acquire_recursive>:
 8005fe6:	4770      	bx	lr

08005fe8 <__retarget_lock_release_recursive>:
 8005fe8:	4770      	bx	lr

08005fea <memchr>:
 8005fea:	4603      	mov	r3, r0
 8005fec:	b510      	push	{r4, lr}
 8005fee:	b2c9      	uxtb	r1, r1
 8005ff0:	4402      	add	r2, r0
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	d101      	bne.n	8005ffc <memchr+0x12>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e003      	b.n	8006004 <memchr+0x1a>
 8005ffc:	7804      	ldrb	r4, [r0, #0]
 8005ffe:	3301      	adds	r3, #1
 8006000:	428c      	cmp	r4, r1
 8006002:	d1f6      	bne.n	8005ff2 <memchr+0x8>
 8006004:	bd10      	pop	{r4, pc}

08006006 <quorem>:
 8006006:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	6903      	ldr	r3, [r0, #16]
 800600c:	690c      	ldr	r4, [r1, #16]
 800600e:	4607      	mov	r7, r0
 8006010:	42a3      	cmp	r3, r4
 8006012:	db7f      	blt.n	8006114 <quorem+0x10e>
 8006014:	3c01      	subs	r4, #1
 8006016:	f100 0514 	add.w	r5, r0, #20
 800601a:	f101 0814 	add.w	r8, r1, #20
 800601e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800602c:	3301      	adds	r3, #1
 800602e:	429a      	cmp	r2, r3
 8006030:	fbb2 f6f3 	udiv	r6, r2, r3
 8006034:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006038:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800603c:	d331      	bcc.n	80060a2 <quorem+0x9c>
 800603e:	f04f 0e00 	mov.w	lr, #0
 8006042:	4640      	mov	r0, r8
 8006044:	46ac      	mov	ip, r5
 8006046:	46f2      	mov	sl, lr
 8006048:	f850 2b04 	ldr.w	r2, [r0], #4
 800604c:	b293      	uxth	r3, r2
 800604e:	fb06 e303 	mla	r3, r6, r3, lr
 8006052:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006056:	0c1a      	lsrs	r2, r3, #16
 8006058:	b29b      	uxth	r3, r3
 800605a:	fb06 220e 	mla	r2, r6, lr, r2
 800605e:	ebaa 0303 	sub.w	r3, sl, r3
 8006062:	f8dc a000 	ldr.w	sl, [ip]
 8006066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800606a:	fa1f fa8a 	uxth.w	sl, sl
 800606e:	4453      	add	r3, sl
 8006070:	f8dc a000 	ldr.w	sl, [ip]
 8006074:	b292      	uxth	r2, r2
 8006076:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800607a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006084:	4581      	cmp	r9, r0
 8006086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800608a:	f84c 3b04 	str.w	r3, [ip], #4
 800608e:	d2db      	bcs.n	8006048 <quorem+0x42>
 8006090:	f855 300b 	ldr.w	r3, [r5, fp]
 8006094:	b92b      	cbnz	r3, 80060a2 <quorem+0x9c>
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	3b04      	subs	r3, #4
 800609a:	429d      	cmp	r5, r3
 800609c:	461a      	mov	r2, r3
 800609e:	d32d      	bcc.n	80060fc <quorem+0xf6>
 80060a0:	613c      	str	r4, [r7, #16]
 80060a2:	4638      	mov	r0, r7
 80060a4:	f001 f992 	bl	80073cc <__mcmp>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	db23      	blt.n	80060f4 <quorem+0xee>
 80060ac:	4629      	mov	r1, r5
 80060ae:	2000      	movs	r0, #0
 80060b0:	3601      	adds	r6, #1
 80060b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80060b6:	f8d1 c000 	ldr.w	ip, [r1]
 80060ba:	b293      	uxth	r3, r2
 80060bc:	1ac3      	subs	r3, r0, r3
 80060be:	0c12      	lsrs	r2, r2, #16
 80060c0:	fa1f f08c 	uxth.w	r0, ip
 80060c4:	4403      	add	r3, r0
 80060c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80060ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d4:	45c1      	cmp	r9, r8
 80060d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060da:	f841 3b04 	str.w	r3, [r1], #4
 80060de:	d2e8      	bcs.n	80060b2 <quorem+0xac>
 80060e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e8:	b922      	cbnz	r2, 80060f4 <quorem+0xee>
 80060ea:	3b04      	subs	r3, #4
 80060ec:	429d      	cmp	r5, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	d30a      	bcc.n	8006108 <quorem+0x102>
 80060f2:	613c      	str	r4, [r7, #16]
 80060f4:	4630      	mov	r0, r6
 80060f6:	b003      	add	sp, #12
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	3b04      	subs	r3, #4
 8006100:	2a00      	cmp	r2, #0
 8006102:	d1cd      	bne.n	80060a0 <quorem+0x9a>
 8006104:	3c01      	subs	r4, #1
 8006106:	e7c8      	b.n	800609a <quorem+0x94>
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	3b04      	subs	r3, #4
 800610c:	2a00      	cmp	r2, #0
 800610e:	d1f0      	bne.n	80060f2 <quorem+0xec>
 8006110:	3c01      	subs	r4, #1
 8006112:	e7eb      	b.n	80060ec <quorem+0xe6>
 8006114:	2000      	movs	r0, #0
 8006116:	e7ee      	b.n	80060f6 <quorem+0xf0>

08006118 <_dtoa_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4616      	mov	r6, r2
 800611e:	461f      	mov	r7, r3
 8006120:	69c4      	ldr	r4, [r0, #28]
 8006122:	b099      	sub	sp, #100	; 0x64
 8006124:	4605      	mov	r5, r0
 8006126:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800612a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800612e:	b974      	cbnz	r4, 800614e <_dtoa_r+0x36>
 8006130:	2010      	movs	r0, #16
 8006132:	f000 fe1d 	bl	8006d70 <malloc>
 8006136:	4602      	mov	r2, r0
 8006138:	61e8      	str	r0, [r5, #28]
 800613a:	b920      	cbnz	r0, 8006146 <_dtoa_r+0x2e>
 800613c:	21ef      	movs	r1, #239	; 0xef
 800613e:	4bac      	ldr	r3, [pc, #688]	; (80063f0 <_dtoa_r+0x2d8>)
 8006140:	48ac      	ldr	r0, [pc, #688]	; (80063f4 <_dtoa_r+0x2dc>)
 8006142:	f001 fb09 	bl	8007758 <__assert_func>
 8006146:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800614a:	6004      	str	r4, [r0, #0]
 800614c:	60c4      	str	r4, [r0, #12]
 800614e:	69eb      	ldr	r3, [r5, #28]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	b151      	cbz	r1, 800616a <_dtoa_r+0x52>
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	2301      	movs	r3, #1
 8006158:	4093      	lsls	r3, r2
 800615a:	604a      	str	r2, [r1, #4]
 800615c:	608b      	str	r3, [r1, #8]
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fefa 	bl	8006f58 <_Bfree>
 8006164:	2200      	movs	r2, #0
 8006166:	69eb      	ldr	r3, [r5, #28]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	1e3b      	subs	r3, r7, #0
 800616c:	bfaf      	iteee	ge
 800616e:	2300      	movge	r3, #0
 8006170:	2201      	movlt	r2, #1
 8006172:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006176:	9305      	strlt	r3, [sp, #20]
 8006178:	bfa8      	it	ge
 800617a:	f8c8 3000 	strge.w	r3, [r8]
 800617e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006182:	4b9d      	ldr	r3, [pc, #628]	; (80063f8 <_dtoa_r+0x2e0>)
 8006184:	bfb8      	it	lt
 8006186:	f8c8 2000 	strlt.w	r2, [r8]
 800618a:	ea33 0309 	bics.w	r3, r3, r9
 800618e:	d119      	bne.n	80061c4 <_dtoa_r+0xac>
 8006190:	f242 730f 	movw	r3, #9999	; 0x270f
 8006194:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800619c:	4333      	orrs	r3, r6
 800619e:	f000 8589 	beq.w	8006cb4 <_dtoa_r+0xb9c>
 80061a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061a4:	b953      	cbnz	r3, 80061bc <_dtoa_r+0xa4>
 80061a6:	4b95      	ldr	r3, [pc, #596]	; (80063fc <_dtoa_r+0x2e4>)
 80061a8:	e023      	b.n	80061f2 <_dtoa_r+0xda>
 80061aa:	4b95      	ldr	r3, [pc, #596]	; (8006400 <_dtoa_r+0x2e8>)
 80061ac:	9303      	str	r3, [sp, #12]
 80061ae:	3308      	adds	r3, #8
 80061b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	9803      	ldr	r0, [sp, #12]
 80061b6:	b019      	add	sp, #100	; 0x64
 80061b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061bc:	4b8f      	ldr	r3, [pc, #572]	; (80063fc <_dtoa_r+0x2e4>)
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	3303      	adds	r3, #3
 80061c2:	e7f5      	b.n	80061b0 <_dtoa_r+0x98>
 80061c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80061cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061d0:	2200      	movs	r2, #0
 80061d2:	2300      	movs	r3, #0
 80061d4:	f7fa fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80061d8:	4680      	mov	r8, r0
 80061da:	b160      	cbz	r0, 80061f6 <_dtoa_r+0xde>
 80061dc:	2301      	movs	r3, #1
 80061de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8562 	beq.w	8006cae <_dtoa_r+0xb96>
 80061ea:	4b86      	ldr	r3, [pc, #536]	; (8006404 <_dtoa_r+0x2ec>)
 80061ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	9303      	str	r3, [sp, #12]
 80061f4:	e7de      	b.n	80061b4 <_dtoa_r+0x9c>
 80061f6:	ab16      	add	r3, sp, #88	; 0x58
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	ab17      	add	r3, sp, #92	; 0x5c
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4628      	mov	r0, r5
 8006200:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006204:	f001 f98a 	bl	800751c <__d2b>
 8006208:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800620c:	4682      	mov	sl, r0
 800620e:	2c00      	cmp	r4, #0
 8006210:	d07e      	beq.n	8006310 <_dtoa_r+0x1f8>
 8006212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006218:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800621c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006220:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006224:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006228:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800622c:	4619      	mov	r1, r3
 800622e:	2200      	movs	r2, #0
 8006230:	4b75      	ldr	r3, [pc, #468]	; (8006408 <_dtoa_r+0x2f0>)
 8006232:	f7f9 ff99 	bl	8000168 <__aeabi_dsub>
 8006236:	a368      	add	r3, pc, #416	; (adr r3, 80063d8 <_dtoa_r+0x2c0>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7fa f94c 	bl	80004d8 <__aeabi_dmul>
 8006240:	a367      	add	r3, pc, #412	; (adr r3, 80063e0 <_dtoa_r+0x2c8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7f9 ff91 	bl	800016c <__adddf3>
 800624a:	4606      	mov	r6, r0
 800624c:	4620      	mov	r0, r4
 800624e:	460f      	mov	r7, r1
 8006250:	f7fa f8d8 	bl	8000404 <__aeabi_i2d>
 8006254:	a364      	add	r3, pc, #400	; (adr r3, 80063e8 <_dtoa_r+0x2d0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa f93d 	bl	80004d8 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7f9 ff81 	bl	800016c <__adddf3>
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	f7fa fbe3 	bl	8000a38 <__aeabi_d2iz>
 8006272:	2200      	movs	r2, #0
 8006274:	4683      	mov	fp, r0
 8006276:	2300      	movs	r3, #0
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa fb9e 	bl	80009bc <__aeabi_dcmplt>
 8006280:	b148      	cbz	r0, 8006296 <_dtoa_r+0x17e>
 8006282:	4658      	mov	r0, fp
 8006284:	f7fa f8be 	bl	8000404 <__aeabi_i2d>
 8006288:	4632      	mov	r2, r6
 800628a:	463b      	mov	r3, r7
 800628c:	f7fa fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006290:	b908      	cbnz	r0, 8006296 <_dtoa_r+0x17e>
 8006292:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006296:	f1bb 0f16 	cmp.w	fp, #22
 800629a:	d857      	bhi.n	800634c <_dtoa_r+0x234>
 800629c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062a0:	4b5a      	ldr	r3, [pc, #360]	; (800640c <_dtoa_r+0x2f4>)
 80062a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f7fa fb87 	bl	80009bc <__aeabi_dcmplt>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d04e      	beq.n	8006350 <_dtoa_r+0x238>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80062ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062bc:	1b1b      	subs	r3, r3, r4
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	bf46      	itte	mi
 80062c2:	f1c3 0901 	rsbmi	r9, r3, #1
 80062c6:	2300      	movmi	r3, #0
 80062c8:	f04f 0900 	movpl.w	r9, #0
 80062cc:	9209      	str	r2, [sp, #36]	; 0x24
 80062ce:	bf48      	it	mi
 80062d0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80062d2:	f1bb 0f00 	cmp.w	fp, #0
 80062d6:	db3d      	blt.n	8006354 <_dtoa_r+0x23c>
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80062de:	445b      	add	r3, fp
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	2300      	movs	r3, #0
 80062e4:	930a      	str	r3, [sp, #40]	; 0x28
 80062e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062e8:	2b09      	cmp	r3, #9
 80062ea:	d867      	bhi.n	80063bc <_dtoa_r+0x2a4>
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	bfc4      	itt	gt
 80062f0:	3b04      	subgt	r3, #4
 80062f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80062f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062f6:	bfc8      	it	gt
 80062f8:	2400      	movgt	r4, #0
 80062fa:	f1a3 0302 	sub.w	r3, r3, #2
 80062fe:	bfd8      	it	le
 8006300:	2401      	movle	r4, #1
 8006302:	2b03      	cmp	r3, #3
 8006304:	f200 8086 	bhi.w	8006414 <_dtoa_r+0x2fc>
 8006308:	e8df f003 	tbb	[pc, r3]
 800630c:	5637392c 	.word	0x5637392c
 8006310:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006314:	441c      	add	r4, r3
 8006316:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800631a:	2b20      	cmp	r3, #32
 800631c:	bfc1      	itttt	gt
 800631e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006322:	fa09 f903 	lslgt.w	r9, r9, r3
 8006326:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800632a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800632e:	bfd6      	itet	le
 8006330:	f1c3 0320 	rsble	r3, r3, #32
 8006334:	ea49 0003 	orrgt.w	r0, r9, r3
 8006338:	fa06 f003 	lslle.w	r0, r6, r3
 800633c:	f7fa f852 	bl	80003e4 <__aeabi_ui2d>
 8006340:	2201      	movs	r2, #1
 8006342:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006346:	3c01      	subs	r4, #1
 8006348:	9213      	str	r2, [sp, #76]	; 0x4c
 800634a:	e76f      	b.n	800622c <_dtoa_r+0x114>
 800634c:	2301      	movs	r3, #1
 800634e:	e7b3      	b.n	80062b8 <_dtoa_r+0x1a0>
 8006350:	900f      	str	r0, [sp, #60]	; 0x3c
 8006352:	e7b2      	b.n	80062ba <_dtoa_r+0x1a2>
 8006354:	f1cb 0300 	rsb	r3, fp, #0
 8006358:	930a      	str	r3, [sp, #40]	; 0x28
 800635a:	2300      	movs	r3, #0
 800635c:	eba9 090b 	sub.w	r9, r9, fp
 8006360:	930e      	str	r3, [sp, #56]	; 0x38
 8006362:	e7c0      	b.n	80062e6 <_dtoa_r+0x1ce>
 8006364:	2300      	movs	r3, #0
 8006366:	930b      	str	r3, [sp, #44]	; 0x2c
 8006368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800636a:	2b00      	cmp	r3, #0
 800636c:	dc55      	bgt.n	800641a <_dtoa_r+0x302>
 800636e:	2301      	movs	r3, #1
 8006370:	461a      	mov	r2, r3
 8006372:	9306      	str	r3, [sp, #24]
 8006374:	9308      	str	r3, [sp, #32]
 8006376:	9223      	str	r2, [sp, #140]	; 0x8c
 8006378:	e00b      	b.n	8006392 <_dtoa_r+0x27a>
 800637a:	2301      	movs	r3, #1
 800637c:	e7f3      	b.n	8006366 <_dtoa_r+0x24e>
 800637e:	2300      	movs	r3, #0
 8006380:	930b      	str	r3, [sp, #44]	; 0x2c
 8006382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006384:	445b      	add	r3, fp
 8006386:	9306      	str	r3, [sp, #24]
 8006388:	3301      	adds	r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	9308      	str	r3, [sp, #32]
 800638e:	bfb8      	it	lt
 8006390:	2301      	movlt	r3, #1
 8006392:	2100      	movs	r1, #0
 8006394:	2204      	movs	r2, #4
 8006396:	69e8      	ldr	r0, [r5, #28]
 8006398:	f102 0614 	add.w	r6, r2, #20
 800639c:	429e      	cmp	r6, r3
 800639e:	d940      	bls.n	8006422 <_dtoa_r+0x30a>
 80063a0:	6041      	str	r1, [r0, #4]
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 fd98 	bl	8006ed8 <_Balloc>
 80063a8:	9003      	str	r0, [sp, #12]
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d13c      	bne.n	8006428 <_dtoa_r+0x310>
 80063ae:	4602      	mov	r2, r0
 80063b0:	f240 11af 	movw	r1, #431	; 0x1af
 80063b4:	4b16      	ldr	r3, [pc, #88]	; (8006410 <_dtoa_r+0x2f8>)
 80063b6:	e6c3      	b.n	8006140 <_dtoa_r+0x28>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e7e1      	b.n	8006380 <_dtoa_r+0x268>
 80063bc:	2401      	movs	r4, #1
 80063be:	2300      	movs	r3, #0
 80063c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80063c2:	9322      	str	r3, [sp, #136]	; 0x88
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	2200      	movs	r2, #0
 80063ca:	9306      	str	r3, [sp, #24]
 80063cc:	9308      	str	r3, [sp, #32]
 80063ce:	2312      	movs	r3, #18
 80063d0:	e7d1      	b.n	8006376 <_dtoa_r+0x25e>
 80063d2:	bf00      	nop
 80063d4:	f3af 8000 	nop.w
 80063d8:	636f4361 	.word	0x636f4361
 80063dc:	3fd287a7 	.word	0x3fd287a7
 80063e0:	8b60c8b3 	.word	0x8b60c8b3
 80063e4:	3fc68a28 	.word	0x3fc68a28
 80063e8:	509f79fb 	.word	0x509f79fb
 80063ec:	3fd34413 	.word	0x3fd34413
 80063f0:	08007e07 	.word	0x08007e07
 80063f4:	08007e1e 	.word	0x08007e1e
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	08007e03 	.word	0x08007e03
 8006400:	08007dfa 	.word	0x08007dfa
 8006404:	08007dd7 	.word	0x08007dd7
 8006408:	3ff80000 	.word	0x3ff80000
 800640c:	08007f08 	.word	0x08007f08
 8006410:	08007e76 	.word	0x08007e76
 8006414:	2301      	movs	r3, #1
 8006416:	930b      	str	r3, [sp, #44]	; 0x2c
 8006418:	e7d4      	b.n	80063c4 <_dtoa_r+0x2ac>
 800641a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800641c:	9306      	str	r3, [sp, #24]
 800641e:	9308      	str	r3, [sp, #32]
 8006420:	e7b7      	b.n	8006392 <_dtoa_r+0x27a>
 8006422:	3101      	adds	r1, #1
 8006424:	0052      	lsls	r2, r2, #1
 8006426:	e7b7      	b.n	8006398 <_dtoa_r+0x280>
 8006428:	69eb      	ldr	r3, [r5, #28]
 800642a:	9a03      	ldr	r2, [sp, #12]
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	9b08      	ldr	r3, [sp, #32]
 8006430:	2b0e      	cmp	r3, #14
 8006432:	f200 80a8 	bhi.w	8006586 <_dtoa_r+0x46e>
 8006436:	2c00      	cmp	r4, #0
 8006438:	f000 80a5 	beq.w	8006586 <_dtoa_r+0x46e>
 800643c:	f1bb 0f00 	cmp.w	fp, #0
 8006440:	dd34      	ble.n	80064ac <_dtoa_r+0x394>
 8006442:	4b9a      	ldr	r3, [pc, #616]	; (80066ac <_dtoa_r+0x594>)
 8006444:	f00b 020f 	and.w	r2, fp, #15
 8006448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800644c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006450:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006454:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006458:	ea4f 142b 	mov.w	r4, fp, asr #4
 800645c:	d016      	beq.n	800648c <_dtoa_r+0x374>
 800645e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006462:	4b93      	ldr	r3, [pc, #588]	; (80066b0 <_dtoa_r+0x598>)
 8006464:	2703      	movs	r7, #3
 8006466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800646a:	f7fa f95f 	bl	800072c <__aeabi_ddiv>
 800646e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006472:	f004 040f 	and.w	r4, r4, #15
 8006476:	4e8e      	ldr	r6, [pc, #568]	; (80066b0 <_dtoa_r+0x598>)
 8006478:	b954      	cbnz	r4, 8006490 <_dtoa_r+0x378>
 800647a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800647e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006482:	f7fa f953 	bl	800072c <__aeabi_ddiv>
 8006486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800648a:	e029      	b.n	80064e0 <_dtoa_r+0x3c8>
 800648c:	2702      	movs	r7, #2
 800648e:	e7f2      	b.n	8006476 <_dtoa_r+0x35e>
 8006490:	07e1      	lsls	r1, r4, #31
 8006492:	d508      	bpl.n	80064a6 <_dtoa_r+0x38e>
 8006494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006498:	e9d6 2300 	ldrd	r2, r3, [r6]
 800649c:	f7fa f81c 	bl	80004d8 <__aeabi_dmul>
 80064a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064a4:	3701      	adds	r7, #1
 80064a6:	1064      	asrs	r4, r4, #1
 80064a8:	3608      	adds	r6, #8
 80064aa:	e7e5      	b.n	8006478 <_dtoa_r+0x360>
 80064ac:	f000 80a5 	beq.w	80065fa <_dtoa_r+0x4e2>
 80064b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064b4:	f1cb 0400 	rsb	r4, fp, #0
 80064b8:	4b7c      	ldr	r3, [pc, #496]	; (80066ac <_dtoa_r+0x594>)
 80064ba:	f004 020f 	and.w	r2, r4, #15
 80064be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7fa f807 	bl	80004d8 <__aeabi_dmul>
 80064ca:	2702      	movs	r7, #2
 80064cc:	2300      	movs	r3, #0
 80064ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064d2:	4e77      	ldr	r6, [pc, #476]	; (80066b0 <_dtoa_r+0x598>)
 80064d4:	1124      	asrs	r4, r4, #4
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	f040 8084 	bne.w	80065e4 <_dtoa_r+0x4cc>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1d2      	bne.n	8006486 <_dtoa_r+0x36e>
 80064e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8087 	beq.w	80065fe <_dtoa_r+0x4e6>
 80064f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064f4:	2200      	movs	r2, #0
 80064f6:	4b6f      	ldr	r3, [pc, #444]	; (80066b4 <_dtoa_r+0x59c>)
 80064f8:	f7fa fa60 	bl	80009bc <__aeabi_dcmplt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d07e      	beq.n	80065fe <_dtoa_r+0x4e6>
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d07b      	beq.n	80065fe <_dtoa_r+0x4e6>
 8006506:	9b06      	ldr	r3, [sp, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dd38      	ble.n	800657e <_dtoa_r+0x466>
 800650c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006510:	2200      	movs	r2, #0
 8006512:	4b69      	ldr	r3, [pc, #420]	; (80066b8 <_dtoa_r+0x5a0>)
 8006514:	f7f9 ffe0 	bl	80004d8 <__aeabi_dmul>
 8006518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800651c:	9c06      	ldr	r4, [sp, #24]
 800651e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006522:	3701      	adds	r7, #1
 8006524:	4638      	mov	r0, r7
 8006526:	f7f9 ff6d 	bl	8000404 <__aeabi_i2d>
 800652a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800652e:	f7f9 ffd3 	bl	80004d8 <__aeabi_dmul>
 8006532:	2200      	movs	r2, #0
 8006534:	4b61      	ldr	r3, [pc, #388]	; (80066bc <_dtoa_r+0x5a4>)
 8006536:	f7f9 fe19 	bl	800016c <__adddf3>
 800653a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800653e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006542:	9611      	str	r6, [sp, #68]	; 0x44
 8006544:	2c00      	cmp	r4, #0
 8006546:	d15d      	bne.n	8006604 <_dtoa_r+0x4ec>
 8006548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800654c:	2200      	movs	r2, #0
 800654e:	4b5c      	ldr	r3, [pc, #368]	; (80066c0 <_dtoa_r+0x5a8>)
 8006550:	f7f9 fe0a 	bl	8000168 <__aeabi_dsub>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800655c:	4633      	mov	r3, r6
 800655e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006560:	f7fa fa4a 	bl	80009f8 <__aeabi_dcmpgt>
 8006564:	2800      	cmp	r0, #0
 8006566:	f040 8295 	bne.w	8006a94 <_dtoa_r+0x97c>
 800656a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800656e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006570:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006574:	f7fa fa22 	bl	80009bc <__aeabi_dcmplt>
 8006578:	2800      	cmp	r0, #0
 800657a:	f040 8289 	bne.w	8006a90 <_dtoa_r+0x978>
 800657e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006582:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006588:	2b00      	cmp	r3, #0
 800658a:	f2c0 8151 	blt.w	8006830 <_dtoa_r+0x718>
 800658e:	f1bb 0f0e 	cmp.w	fp, #14
 8006592:	f300 814d 	bgt.w	8006830 <_dtoa_r+0x718>
 8006596:	4b45      	ldr	r3, [pc, #276]	; (80066ac <_dtoa_r+0x594>)
 8006598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800659c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f280 80da 	bge.w	8006760 <_dtoa_r+0x648>
 80065ac:	9b08      	ldr	r3, [sp, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f300 80d6 	bgt.w	8006760 <_dtoa_r+0x648>
 80065b4:	f040 826b 	bne.w	8006a8e <_dtoa_r+0x976>
 80065b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065bc:	2200      	movs	r2, #0
 80065be:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <_dtoa_r+0x5a8>)
 80065c0:	f7f9 ff8a 	bl	80004d8 <__aeabi_dmul>
 80065c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c8:	f7fa fa0c 	bl	80009e4 <__aeabi_dcmpge>
 80065cc:	9c08      	ldr	r4, [sp, #32]
 80065ce:	4626      	mov	r6, r4
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f040 8241 	bne.w	8006a58 <_dtoa_r+0x940>
 80065d6:	2331      	movs	r3, #49	; 0x31
 80065d8:	9f03      	ldr	r7, [sp, #12]
 80065da:	f10b 0b01 	add.w	fp, fp, #1
 80065de:	f807 3b01 	strb.w	r3, [r7], #1
 80065e2:	e23d      	b.n	8006a60 <_dtoa_r+0x948>
 80065e4:	07e2      	lsls	r2, r4, #31
 80065e6:	d505      	bpl.n	80065f4 <_dtoa_r+0x4dc>
 80065e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065ec:	f7f9 ff74 	bl	80004d8 <__aeabi_dmul>
 80065f0:	2301      	movs	r3, #1
 80065f2:	3701      	adds	r7, #1
 80065f4:	1064      	asrs	r4, r4, #1
 80065f6:	3608      	adds	r6, #8
 80065f8:	e76d      	b.n	80064d6 <_dtoa_r+0x3be>
 80065fa:	2702      	movs	r7, #2
 80065fc:	e770      	b.n	80064e0 <_dtoa_r+0x3c8>
 80065fe:	46d8      	mov	r8, fp
 8006600:	9c08      	ldr	r4, [sp, #32]
 8006602:	e78f      	b.n	8006524 <_dtoa_r+0x40c>
 8006604:	9903      	ldr	r1, [sp, #12]
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <_dtoa_r+0x594>)
 8006608:	4421      	add	r1, r4
 800660a:	9112      	str	r1, [sp, #72]	; 0x48
 800660c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800660e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006612:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006616:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800661a:	2900      	cmp	r1, #0
 800661c:	d054      	beq.n	80066c8 <_dtoa_r+0x5b0>
 800661e:	2000      	movs	r0, #0
 8006620:	4928      	ldr	r1, [pc, #160]	; (80066c4 <_dtoa_r+0x5ac>)
 8006622:	f7fa f883 	bl	800072c <__aeabi_ddiv>
 8006626:	463b      	mov	r3, r7
 8006628:	4632      	mov	r2, r6
 800662a:	f7f9 fd9d 	bl	8000168 <__aeabi_dsub>
 800662e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006632:	9f03      	ldr	r7, [sp, #12]
 8006634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006638:	f7fa f9fe 	bl	8000a38 <__aeabi_d2iz>
 800663c:	4604      	mov	r4, r0
 800663e:	f7f9 fee1 	bl	8000404 <__aeabi_i2d>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800664a:	f7f9 fd8d 	bl	8000168 <__aeabi_dsub>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	3430      	adds	r4, #48	; 0x30
 8006654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006658:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800665c:	f807 4b01 	strb.w	r4, [r7], #1
 8006660:	f7fa f9ac 	bl	80009bc <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	d173      	bne.n	8006750 <_dtoa_r+0x638>
 8006668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666c:	2000      	movs	r0, #0
 800666e:	4911      	ldr	r1, [pc, #68]	; (80066b4 <_dtoa_r+0x59c>)
 8006670:	f7f9 fd7a 	bl	8000168 <__aeabi_dsub>
 8006674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006678:	f7fa f9a0 	bl	80009bc <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	f040 80b6 	bne.w	80067ee <_dtoa_r+0x6d6>
 8006682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006684:	429f      	cmp	r7, r3
 8006686:	f43f af7a 	beq.w	800657e <_dtoa_r+0x466>
 800668a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800668e:	2200      	movs	r2, #0
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <_dtoa_r+0x5a0>)
 8006692:	f7f9 ff21 	bl	80004d8 <__aeabi_dmul>
 8006696:	2200      	movs	r2, #0
 8006698:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800669c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <_dtoa_r+0x5a0>)
 80066a2:	f7f9 ff19 	bl	80004d8 <__aeabi_dmul>
 80066a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066aa:	e7c3      	b.n	8006634 <_dtoa_r+0x51c>
 80066ac:	08007f08 	.word	0x08007f08
 80066b0:	08007ee0 	.word	0x08007ee0
 80066b4:	3ff00000 	.word	0x3ff00000
 80066b8:	40240000 	.word	0x40240000
 80066bc:	401c0000 	.word	0x401c0000
 80066c0:	40140000 	.word	0x40140000
 80066c4:	3fe00000 	.word	0x3fe00000
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7f9 ff04 	bl	80004d8 <__aeabi_dmul>
 80066d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066d6:	9c03      	ldr	r4, [sp, #12]
 80066d8:	9314      	str	r3, [sp, #80]	; 0x50
 80066da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066de:	f7fa f9ab 	bl	8000a38 <__aeabi_d2iz>
 80066e2:	9015      	str	r0, [sp, #84]	; 0x54
 80066e4:	f7f9 fe8e 	bl	8000404 <__aeabi_i2d>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f0:	f7f9 fd3a 	bl	8000168 <__aeabi_dsub>
 80066f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066f6:	4606      	mov	r6, r0
 80066f8:	3330      	adds	r3, #48	; 0x30
 80066fa:	f804 3b01 	strb.w	r3, [r4], #1
 80066fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006700:	460f      	mov	r7, r1
 8006702:	429c      	cmp	r4, r3
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	d124      	bne.n	8006754 <_dtoa_r+0x63c>
 800670a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800670e:	4baf      	ldr	r3, [pc, #700]	; (80069cc <_dtoa_r+0x8b4>)
 8006710:	f7f9 fd2c 	bl	800016c <__adddf3>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa f96c 	bl	80009f8 <__aeabi_dcmpgt>
 8006720:	2800      	cmp	r0, #0
 8006722:	d163      	bne.n	80067ec <_dtoa_r+0x6d4>
 8006724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006728:	2000      	movs	r0, #0
 800672a:	49a8      	ldr	r1, [pc, #672]	; (80069cc <_dtoa_r+0x8b4>)
 800672c:	f7f9 fd1c 	bl	8000168 <__aeabi_dsub>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4630      	mov	r0, r6
 8006736:	4639      	mov	r1, r7
 8006738:	f7fa f940 	bl	80009bc <__aeabi_dcmplt>
 800673c:	2800      	cmp	r0, #0
 800673e:	f43f af1e 	beq.w	800657e <_dtoa_r+0x466>
 8006742:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006744:	1e7b      	subs	r3, r7, #1
 8006746:	9314      	str	r3, [sp, #80]	; 0x50
 8006748:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d0f8      	beq.n	8006742 <_dtoa_r+0x62a>
 8006750:	46c3      	mov	fp, r8
 8006752:	e03b      	b.n	80067cc <_dtoa_r+0x6b4>
 8006754:	4b9e      	ldr	r3, [pc, #632]	; (80069d0 <_dtoa_r+0x8b8>)
 8006756:	f7f9 febf 	bl	80004d8 <__aeabi_dmul>
 800675a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800675e:	e7bc      	b.n	80066da <_dtoa_r+0x5c2>
 8006760:	9f03      	ldr	r7, [sp, #12]
 8006762:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800676a:	4640      	mov	r0, r8
 800676c:	4649      	mov	r1, r9
 800676e:	f7f9 ffdd 	bl	800072c <__aeabi_ddiv>
 8006772:	f7fa f961 	bl	8000a38 <__aeabi_d2iz>
 8006776:	4604      	mov	r4, r0
 8006778:	f7f9 fe44 	bl	8000404 <__aeabi_i2d>
 800677c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006780:	f7f9 feaa 	bl	80004d8 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7f9 fcec 	bl	8000168 <__aeabi_dsub>
 8006790:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006794:	f807 6b01 	strb.w	r6, [r7], #1
 8006798:	9e03      	ldr	r6, [sp, #12]
 800679a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800679e:	1bbe      	subs	r6, r7, r6
 80067a0:	45b4      	cmp	ip, r6
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	d136      	bne.n	8006816 <_dtoa_r+0x6fe>
 80067a8:	f7f9 fce0 	bl	800016c <__adddf3>
 80067ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067b0:	4680      	mov	r8, r0
 80067b2:	4689      	mov	r9, r1
 80067b4:	f7fa f920 	bl	80009f8 <__aeabi_dcmpgt>
 80067b8:	bb58      	cbnz	r0, 8006812 <_dtoa_r+0x6fa>
 80067ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7fa f8f1 	bl	80009a8 <__aeabi_dcmpeq>
 80067c6:	b108      	cbz	r0, 80067cc <_dtoa_r+0x6b4>
 80067c8:	07e3      	lsls	r3, r4, #31
 80067ca:	d422      	bmi.n	8006812 <_dtoa_r+0x6fa>
 80067cc:	4651      	mov	r1, sl
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 fbc2 	bl	8006f58 <_Bfree>
 80067d4:	2300      	movs	r3, #0
 80067d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067d8:	703b      	strb	r3, [r7, #0]
 80067da:	f10b 0301 	add.w	r3, fp, #1
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f43f ace6 	beq.w	80061b4 <_dtoa_r+0x9c>
 80067e8:	601f      	str	r7, [r3, #0]
 80067ea:	e4e3      	b.n	80061b4 <_dtoa_r+0x9c>
 80067ec:	4627      	mov	r7, r4
 80067ee:	463b      	mov	r3, r7
 80067f0:	461f      	mov	r7, r3
 80067f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067f6:	2a39      	cmp	r2, #57	; 0x39
 80067f8:	d107      	bne.n	800680a <_dtoa_r+0x6f2>
 80067fa:	9a03      	ldr	r2, [sp, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d1f7      	bne.n	80067f0 <_dtoa_r+0x6d8>
 8006800:	2230      	movs	r2, #48	; 0x30
 8006802:	9903      	ldr	r1, [sp, #12]
 8006804:	f108 0801 	add.w	r8, r8, #1
 8006808:	700a      	strb	r2, [r1, #0]
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	3201      	adds	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e79e      	b.n	8006750 <_dtoa_r+0x638>
 8006812:	46d8      	mov	r8, fp
 8006814:	e7eb      	b.n	80067ee <_dtoa_r+0x6d6>
 8006816:	2200      	movs	r2, #0
 8006818:	4b6d      	ldr	r3, [pc, #436]	; (80069d0 <_dtoa_r+0x8b8>)
 800681a:	f7f9 fe5d 	bl	80004d8 <__aeabi_dmul>
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4680      	mov	r8, r0
 8006824:	4689      	mov	r9, r1
 8006826:	f7fa f8bf 	bl	80009a8 <__aeabi_dcmpeq>
 800682a:	2800      	cmp	r0, #0
 800682c:	d09b      	beq.n	8006766 <_dtoa_r+0x64e>
 800682e:	e7cd      	b.n	80067cc <_dtoa_r+0x6b4>
 8006830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006832:	2a00      	cmp	r2, #0
 8006834:	f000 80c4 	beq.w	80069c0 <_dtoa_r+0x8a8>
 8006838:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800683a:	2a01      	cmp	r2, #1
 800683c:	f300 80a8 	bgt.w	8006990 <_dtoa_r+0x878>
 8006840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006842:	2a00      	cmp	r2, #0
 8006844:	f000 80a0 	beq.w	8006988 <_dtoa_r+0x870>
 8006848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800684c:	464f      	mov	r7, r9
 800684e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006852:	2101      	movs	r1, #1
 8006854:	441a      	add	r2, r3
 8006856:	4628      	mov	r0, r5
 8006858:	4499      	add	r9, r3
 800685a:	9209      	str	r2, [sp, #36]	; 0x24
 800685c:	f000 fc32 	bl	80070c4 <__i2b>
 8006860:	4606      	mov	r6, r0
 8006862:	b15f      	cbz	r7, 800687c <_dtoa_r+0x764>
 8006864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	dd08      	ble.n	800687c <_dtoa_r+0x764>
 800686a:	42bb      	cmp	r3, r7
 800686c:	bfa8      	it	ge
 800686e:	463b      	movge	r3, r7
 8006870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006872:	eba9 0903 	sub.w	r9, r9, r3
 8006876:	1aff      	subs	r7, r7, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687e:	b1f3      	cbz	r3, 80068be <_dtoa_r+0x7a6>
 8006880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a0 	beq.w	80069c8 <_dtoa_r+0x8b0>
 8006888:	2c00      	cmp	r4, #0
 800688a:	dd10      	ble.n	80068ae <_dtoa_r+0x796>
 800688c:	4631      	mov	r1, r6
 800688e:	4622      	mov	r2, r4
 8006890:	4628      	mov	r0, r5
 8006892:	f000 fcd5 	bl	8007240 <__pow5mult>
 8006896:	4652      	mov	r2, sl
 8006898:	4601      	mov	r1, r0
 800689a:	4606      	mov	r6, r0
 800689c:	4628      	mov	r0, r5
 800689e:	f000 fc27 	bl	80070f0 <__multiply>
 80068a2:	4680      	mov	r8, r0
 80068a4:	4651      	mov	r1, sl
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fb56 	bl	8006f58 <_Bfree>
 80068ac:	46c2      	mov	sl, r8
 80068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b0:	1b1a      	subs	r2, r3, r4
 80068b2:	d004      	beq.n	80068be <_dtoa_r+0x7a6>
 80068b4:	4651      	mov	r1, sl
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fcc2 	bl	8007240 <__pow5mult>
 80068bc:	4682      	mov	sl, r0
 80068be:	2101      	movs	r1, #1
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 fbff 	bl	80070c4 <__i2b>
 80068c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c8:	4604      	mov	r4, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f340 8082 	ble.w	80069d4 <_dtoa_r+0x8bc>
 80068d0:	461a      	mov	r2, r3
 80068d2:	4601      	mov	r1, r0
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 fcb3 	bl	8007240 <__pow5mult>
 80068da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068dc:	4604      	mov	r4, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	dd7b      	ble.n	80069da <_dtoa_r+0x8c2>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068ec:	6918      	ldr	r0, [r3, #16]
 80068ee:	f000 fb9b 	bl	8007028 <__hi0bits>
 80068f2:	f1c0 0020 	rsb	r0, r0, #32
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	4418      	add	r0, r3
 80068fa:	f010 001f 	ands.w	r0, r0, #31
 80068fe:	f000 8092 	beq.w	8006a26 <_dtoa_r+0x90e>
 8006902:	f1c0 0320 	rsb	r3, r0, #32
 8006906:	2b04      	cmp	r3, #4
 8006908:	f340 8085 	ble.w	8006a16 <_dtoa_r+0x8fe>
 800690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690e:	f1c0 001c 	rsb	r0, r0, #28
 8006912:	4403      	add	r3, r0
 8006914:	4481      	add	r9, r0
 8006916:	4407      	add	r7, r0
 8006918:	9309      	str	r3, [sp, #36]	; 0x24
 800691a:	f1b9 0f00 	cmp.w	r9, #0
 800691e:	dd05      	ble.n	800692c <_dtoa_r+0x814>
 8006920:	4651      	mov	r1, sl
 8006922:	464a      	mov	r2, r9
 8006924:	4628      	mov	r0, r5
 8006926:	f000 fce5 	bl	80072f4 <__lshift>
 800692a:	4682      	mov	sl, r0
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	dd05      	ble.n	800693e <_dtoa_r+0x826>
 8006932:	4621      	mov	r1, r4
 8006934:	461a      	mov	r2, r3
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fcdc 	bl	80072f4 <__lshift>
 800693c:	4604      	mov	r4, r0
 800693e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d072      	beq.n	8006a2a <_dtoa_r+0x912>
 8006944:	4621      	mov	r1, r4
 8006946:	4650      	mov	r0, sl
 8006948:	f000 fd40 	bl	80073cc <__mcmp>
 800694c:	2800      	cmp	r0, #0
 800694e:	da6c      	bge.n	8006a2a <_dtoa_r+0x912>
 8006950:	2300      	movs	r3, #0
 8006952:	4651      	mov	r1, sl
 8006954:	220a      	movs	r2, #10
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fb20 	bl	8006f9c <__multadd>
 800695c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695e:	4682      	mov	sl, r0
 8006960:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 81ac 	beq.w	8006cc2 <_dtoa_r+0xbaa>
 800696a:	2300      	movs	r3, #0
 800696c:	4631      	mov	r1, r6
 800696e:	220a      	movs	r2, #10
 8006970:	4628      	mov	r0, r5
 8006972:	f000 fb13 	bl	8006f9c <__multadd>
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	4606      	mov	r6, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f300 8093 	bgt.w	8006aa6 <_dtoa_r+0x98e>
 8006980:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006982:	2b02      	cmp	r3, #2
 8006984:	dc59      	bgt.n	8006a3a <_dtoa_r+0x922>
 8006986:	e08e      	b.n	8006aa6 <_dtoa_r+0x98e>
 8006988:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800698a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800698e:	e75d      	b.n	800684c <_dtoa_r+0x734>
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	1e5c      	subs	r4, r3, #1
 8006994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006996:	42a3      	cmp	r3, r4
 8006998:	bfbf      	itttt	lt
 800699a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800699c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800699e:	1ae3      	sublt	r3, r4, r3
 80069a0:	18d2      	addlt	r2, r2, r3
 80069a2:	bfa8      	it	ge
 80069a4:	1b1c      	subge	r4, r3, r4
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	bfbe      	ittt	lt
 80069aa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069ac:	920e      	strlt	r2, [sp, #56]	; 0x38
 80069ae:	2400      	movlt	r4, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfb5      	itete	lt
 80069b4:	eba9 0703 	sublt.w	r7, r9, r3
 80069b8:	464f      	movge	r7, r9
 80069ba:	2300      	movlt	r3, #0
 80069bc:	9b08      	ldrge	r3, [sp, #32]
 80069be:	e747      	b.n	8006850 <_dtoa_r+0x738>
 80069c0:	464f      	mov	r7, r9
 80069c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069c6:	e74c      	b.n	8006862 <_dtoa_r+0x74a>
 80069c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ca:	e773      	b.n	80068b4 <_dtoa_r+0x79c>
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	40240000 	.word	0x40240000
 80069d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	dc18      	bgt.n	8006a0c <_dtoa_r+0x8f4>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	b9b3      	cbnz	r3, 8006a0c <_dtoa_r+0x8f4>
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e4:	b993      	cbnz	r3, 8006a0c <_dtoa_r+0x8f4>
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ec:	0d1b      	lsrs	r3, r3, #20
 80069ee:	051b      	lsls	r3, r3, #20
 80069f0:	b17b      	cbz	r3, 8006a12 <_dtoa_r+0x8fa>
 80069f2:	f04f 0801 	mov.w	r8, #1
 80069f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f8:	f109 0901 	add.w	r9, r9, #1
 80069fc:	3301      	adds	r3, #1
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f47f af6f 	bne.w	80068e6 <_dtoa_r+0x7ce>
 8006a08:	2001      	movs	r0, #1
 8006a0a:	e774      	b.n	80068f6 <_dtoa_r+0x7de>
 8006a0c:	f04f 0800 	mov.w	r8, #0
 8006a10:	e7f6      	b.n	8006a00 <_dtoa_r+0x8e8>
 8006a12:	4698      	mov	r8, r3
 8006a14:	e7f4      	b.n	8006a00 <_dtoa_r+0x8e8>
 8006a16:	d080      	beq.n	800691a <_dtoa_r+0x802>
 8006a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1a:	331c      	adds	r3, #28
 8006a1c:	441a      	add	r2, r3
 8006a1e:	4499      	add	r9, r3
 8006a20:	441f      	add	r7, r3
 8006a22:	9209      	str	r2, [sp, #36]	; 0x24
 8006a24:	e779      	b.n	800691a <_dtoa_r+0x802>
 8006a26:	4603      	mov	r3, r0
 8006a28:	e7f6      	b.n	8006a18 <_dtoa_r+0x900>
 8006a2a:	9b08      	ldr	r3, [sp, #32]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc34      	bgt.n	8006a9a <_dtoa_r+0x982>
 8006a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	dd31      	ble.n	8006a9a <_dtoa_r+0x982>
 8006a36:	9b08      	ldr	r3, [sp, #32]
 8006a38:	9306      	str	r3, [sp, #24]
 8006a3a:	9b06      	ldr	r3, [sp, #24]
 8006a3c:	b963      	cbnz	r3, 8006a58 <_dtoa_r+0x940>
 8006a3e:	4621      	mov	r1, r4
 8006a40:	2205      	movs	r2, #5
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 faaa 	bl	8006f9c <__multadd>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	f000 fcbd 	bl	80073cc <__mcmp>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	f73f adbf 	bgt.w	80065d6 <_dtoa_r+0x4be>
 8006a58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a5a:	9f03      	ldr	r7, [sp, #12]
 8006a5c:	ea6f 0b03 	mvn.w	fp, r3
 8006a60:	f04f 0800 	mov.w	r8, #0
 8006a64:	4621      	mov	r1, r4
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 fa76 	bl	8006f58 <_Bfree>
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	f43f aead 	beq.w	80067cc <_dtoa_r+0x6b4>
 8006a72:	f1b8 0f00 	cmp.w	r8, #0
 8006a76:	d005      	beq.n	8006a84 <_dtoa_r+0x96c>
 8006a78:	45b0      	cmp	r8, r6
 8006a7a:	d003      	beq.n	8006a84 <_dtoa_r+0x96c>
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fa6a 	bl	8006f58 <_Bfree>
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 fa66 	bl	8006f58 <_Bfree>
 8006a8c:	e69e      	b.n	80067cc <_dtoa_r+0x6b4>
 8006a8e:	2400      	movs	r4, #0
 8006a90:	4626      	mov	r6, r4
 8006a92:	e7e1      	b.n	8006a58 <_dtoa_r+0x940>
 8006a94:	46c3      	mov	fp, r8
 8006a96:	4626      	mov	r6, r4
 8006a98:	e59d      	b.n	80065d6 <_dtoa_r+0x4be>
 8006a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80c8 	beq.w	8006c32 <_dtoa_r+0xb1a>
 8006aa2:	9b08      	ldr	r3, [sp, #32]
 8006aa4:	9306      	str	r3, [sp, #24]
 8006aa6:	2f00      	cmp	r7, #0
 8006aa8:	dd05      	ble.n	8006ab6 <_dtoa_r+0x99e>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	463a      	mov	r2, r7
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 fc20 	bl	80072f4 <__lshift>
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	f1b8 0f00 	cmp.w	r8, #0
 8006aba:	d05b      	beq.n	8006b74 <_dtoa_r+0xa5c>
 8006abc:	4628      	mov	r0, r5
 8006abe:	6871      	ldr	r1, [r6, #4]
 8006ac0:	f000 fa0a 	bl	8006ed8 <_Balloc>
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	b928      	cbnz	r0, 8006ad4 <_dtoa_r+0x9bc>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ace:	4b81      	ldr	r3, [pc, #516]	; (8006cd4 <_dtoa_r+0xbbc>)
 8006ad0:	f7ff bb36 	b.w	8006140 <_dtoa_r+0x28>
 8006ad4:	6932      	ldr	r2, [r6, #16]
 8006ad6:	f106 010c 	add.w	r1, r6, #12
 8006ada:	3202      	adds	r2, #2
 8006adc:	0092      	lsls	r2, r2, #2
 8006ade:	300c      	adds	r0, #12
 8006ae0:	f000 fe2c 	bl	800773c <memcpy>
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fc03 	bl	80072f4 <__lshift>
 8006aee:	46b0      	mov	r8, r6
 8006af0:	4606      	mov	r6, r0
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	9a03      	ldr	r2, [sp, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	9308      	str	r3, [sp, #32]
 8006afa:	9b06      	ldr	r3, [sp, #24]
 8006afc:	4413      	add	r3, r2
 8006afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	930a      	str	r3, [sp, #40]	; 0x28
 8006b08:	9b08      	ldr	r3, [sp, #32]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	4650      	mov	r0, sl
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	f7ff fa78 	bl	8006006 <quorem>
 8006b16:	4641      	mov	r1, r8
 8006b18:	9006      	str	r0, [sp, #24]
 8006b1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b1e:	4650      	mov	r0, sl
 8006b20:	f000 fc54 	bl	80073cc <__mcmp>
 8006b24:	4632      	mov	r2, r6
 8006b26:	9009      	str	r0, [sp, #36]	; 0x24
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 fc6a 	bl	8007404 <__mdiff>
 8006b30:	68c2      	ldr	r2, [r0, #12]
 8006b32:	4607      	mov	r7, r0
 8006b34:	bb02      	cbnz	r2, 8006b78 <_dtoa_r+0xa60>
 8006b36:	4601      	mov	r1, r0
 8006b38:	4650      	mov	r0, sl
 8006b3a:	f000 fc47 	bl	80073cc <__mcmp>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4639      	mov	r1, r7
 8006b42:	4628      	mov	r0, r5
 8006b44:	920c      	str	r2, [sp, #48]	; 0x30
 8006b46:	f000 fa07 	bl	8006f58 <_Bfree>
 8006b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b4e:	9f08      	ldr	r7, [sp, #32]
 8006b50:	ea43 0102 	orr.w	r1, r3, r2
 8006b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b56:	4319      	orrs	r1, r3
 8006b58:	d110      	bne.n	8006b7c <_dtoa_r+0xa64>
 8006b5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b5e:	d029      	beq.n	8006bb4 <_dtoa_r+0xa9c>
 8006b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd02      	ble.n	8006b6c <_dtoa_r+0xa54>
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	f883 9000 	strb.w	r9, [r3]
 8006b72:	e777      	b.n	8006a64 <_dtoa_r+0x94c>
 8006b74:	4630      	mov	r0, r6
 8006b76:	e7ba      	b.n	8006aee <_dtoa_r+0x9d6>
 8006b78:	2201      	movs	r2, #1
 8006b7a:	e7e1      	b.n	8006b40 <_dtoa_r+0xa28>
 8006b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	db04      	blt.n	8006b8c <_dtoa_r+0xa74>
 8006b82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b84:	430b      	orrs	r3, r1
 8006b86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	d120      	bne.n	8006bce <_dtoa_r+0xab6>
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	dded      	ble.n	8006b6c <_dtoa_r+0xa54>
 8006b90:	4651      	mov	r1, sl
 8006b92:	2201      	movs	r2, #1
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 fbad 	bl	80072f4 <__lshift>
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	f000 fc15 	bl	80073cc <__mcmp>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	dc03      	bgt.n	8006bae <_dtoa_r+0xa96>
 8006ba6:	d1e1      	bne.n	8006b6c <_dtoa_r+0xa54>
 8006ba8:	f019 0f01 	tst.w	r9, #1
 8006bac:	d0de      	beq.n	8006b6c <_dtoa_r+0xa54>
 8006bae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bb2:	d1d8      	bne.n	8006b66 <_dtoa_r+0xa4e>
 8006bb4:	2339      	movs	r3, #57	; 0x39
 8006bb6:	9a04      	ldr	r2, [sp, #16]
 8006bb8:	7013      	strb	r3, [r2, #0]
 8006bba:	463b      	mov	r3, r7
 8006bbc:	461f      	mov	r7, r3
 8006bbe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2a39      	cmp	r2, #57	; 0x39
 8006bc6:	d06b      	beq.n	8006ca0 <_dtoa_r+0xb88>
 8006bc8:	3201      	adds	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e74a      	b.n	8006a64 <_dtoa_r+0x94c>
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	dd07      	ble.n	8006be2 <_dtoa_r+0xaca>
 8006bd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bd6:	d0ed      	beq.n	8006bb4 <_dtoa_r+0xa9c>
 8006bd8:	9a04      	ldr	r2, [sp, #16]
 8006bda:	f109 0301 	add.w	r3, r9, #1
 8006bde:	7013      	strb	r3, [r2, #0]
 8006be0:	e740      	b.n	8006a64 <_dtoa_r+0x94c>
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006be6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d042      	beq.n	8006c74 <_dtoa_r+0xb5c>
 8006bee:	4651      	mov	r1, sl
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f000 f9d1 	bl	8006f9c <__multadd>
 8006bfa:	45b0      	cmp	r8, r6
 8006bfc:	4682      	mov	sl, r0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	f04f 020a 	mov.w	r2, #10
 8006c06:	4641      	mov	r1, r8
 8006c08:	4628      	mov	r0, r5
 8006c0a:	d107      	bne.n	8006c1c <_dtoa_r+0xb04>
 8006c0c:	f000 f9c6 	bl	8006f9c <__multadd>
 8006c10:	4680      	mov	r8, r0
 8006c12:	4606      	mov	r6, r0
 8006c14:	9b08      	ldr	r3, [sp, #32]
 8006c16:	3301      	adds	r3, #1
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	e775      	b.n	8006b08 <_dtoa_r+0x9f0>
 8006c1c:	f000 f9be 	bl	8006f9c <__multadd>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4680      	mov	r8, r0
 8006c24:	2300      	movs	r3, #0
 8006c26:	220a      	movs	r2, #10
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 f9b7 	bl	8006f9c <__multadd>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	e7f0      	b.n	8006c14 <_dtoa_r+0xafc>
 8006c32:	9b08      	ldr	r3, [sp, #32]
 8006c34:	9306      	str	r3, [sp, #24]
 8006c36:	9f03      	ldr	r7, [sp, #12]
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	f7ff f9e3 	bl	8006006 <quorem>
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c46:	f807 9b01 	strb.w	r9, [r7], #1
 8006c4a:	1afa      	subs	r2, r7, r3
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	dd07      	ble.n	8006c62 <_dtoa_r+0xb4a>
 8006c52:	4651      	mov	r1, sl
 8006c54:	2300      	movs	r3, #0
 8006c56:	220a      	movs	r2, #10
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 f99f 	bl	8006f9c <__multadd>
 8006c5e:	4682      	mov	sl, r0
 8006c60:	e7ea      	b.n	8006c38 <_dtoa_r+0xb20>
 8006c62:	9b06      	ldr	r3, [sp, #24]
 8006c64:	f04f 0800 	mov.w	r8, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bfcc      	ite	gt
 8006c6c:	461f      	movgt	r7, r3
 8006c6e:	2701      	movle	r7, #1
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	441f      	add	r7, r3
 8006c74:	4651      	mov	r1, sl
 8006c76:	2201      	movs	r2, #1
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 fb3b 	bl	80072f4 <__lshift>
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4682      	mov	sl, r0
 8006c82:	f000 fba3 	bl	80073cc <__mcmp>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	dc97      	bgt.n	8006bba <_dtoa_r+0xaa2>
 8006c8a:	d102      	bne.n	8006c92 <_dtoa_r+0xb7a>
 8006c8c:	f019 0f01 	tst.w	r9, #1
 8006c90:	d193      	bne.n	8006bba <_dtoa_r+0xaa2>
 8006c92:	463b      	mov	r3, r7
 8006c94:	461f      	mov	r7, r3
 8006c96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c9a:	2a30      	cmp	r2, #48	; 0x30
 8006c9c:	d0fa      	beq.n	8006c94 <_dtoa_r+0xb7c>
 8006c9e:	e6e1      	b.n	8006a64 <_dtoa_r+0x94c>
 8006ca0:	9a03      	ldr	r2, [sp, #12]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d18a      	bne.n	8006bbc <_dtoa_r+0xaa4>
 8006ca6:	2331      	movs	r3, #49	; 0x31
 8006ca8:	f10b 0b01 	add.w	fp, fp, #1
 8006cac:	e797      	b.n	8006bde <_dtoa_r+0xac6>
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <_dtoa_r+0xbc0>)
 8006cb0:	f7ff ba9f 	b.w	80061f2 <_dtoa_r+0xda>
 8006cb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f47f aa77 	bne.w	80061aa <_dtoa_r+0x92>
 8006cbc:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <_dtoa_r+0xbc4>)
 8006cbe:	f7ff ba98 	b.w	80061f2 <_dtoa_r+0xda>
 8006cc2:	9b06      	ldr	r3, [sp, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dcb6      	bgt.n	8006c36 <_dtoa_r+0xb1e>
 8006cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	f73f aeb5 	bgt.w	8006a3a <_dtoa_r+0x922>
 8006cd0:	e7b1      	b.n	8006c36 <_dtoa_r+0xb1e>
 8006cd2:	bf00      	nop
 8006cd4:	08007e76 	.word	0x08007e76
 8006cd8:	08007dd6 	.word	0x08007dd6
 8006cdc:	08007dfa 	.word	0x08007dfa

08006ce0 <_free_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	d040      	beq.n	8006d6a <_free_r+0x8a>
 8006ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cec:	1f0c      	subs	r4, r1, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bfb8      	it	lt
 8006cf2:	18e4      	addlt	r4, r4, r3
 8006cf4:	f000 f8e4 	bl	8006ec0 <__malloc_lock>
 8006cf8:	4a1c      	ldr	r2, [pc, #112]	; (8006d6c <_free_r+0x8c>)
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	b933      	cbnz	r3, 8006d0c <_free_r+0x2c>
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	6014      	str	r4, [r2, #0]
 8006d02:	4628      	mov	r0, r5
 8006d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d08:	f000 b8e0 	b.w	8006ecc <__malloc_unlock>
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d908      	bls.n	8006d22 <_free_r+0x42>
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	1821      	adds	r1, r4, r0
 8006d14:	428b      	cmp	r3, r1
 8006d16:	bf01      	itttt	eq
 8006d18:	6819      	ldreq	r1, [r3, #0]
 8006d1a:	685b      	ldreq	r3, [r3, #4]
 8006d1c:	1809      	addeq	r1, r1, r0
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	e7ed      	b.n	8006cfe <_free_r+0x1e>
 8006d22:	461a      	mov	r2, r3
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	b10b      	cbz	r3, 8006d2c <_free_r+0x4c>
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d9fa      	bls.n	8006d22 <_free_r+0x42>
 8006d2c:	6811      	ldr	r1, [r2, #0]
 8006d2e:	1850      	adds	r0, r2, r1
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d10b      	bne.n	8006d4c <_free_r+0x6c>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	4401      	add	r1, r0
 8006d38:	1850      	adds	r0, r2, r1
 8006d3a:	4283      	cmp	r3, r0
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	d1e0      	bne.n	8006d02 <_free_r+0x22>
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4408      	add	r0, r1
 8006d46:	6010      	str	r0, [r2, #0]
 8006d48:	6053      	str	r3, [r2, #4]
 8006d4a:	e7da      	b.n	8006d02 <_free_r+0x22>
 8006d4c:	d902      	bls.n	8006d54 <_free_r+0x74>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	e7d6      	b.n	8006d02 <_free_r+0x22>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	1821      	adds	r1, r4, r0
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	bf01      	itttt	eq
 8006d5c:	6819      	ldreq	r1, [r3, #0]
 8006d5e:	685b      	ldreq	r3, [r3, #4]
 8006d60:	1809      	addeq	r1, r1, r0
 8006d62:	6021      	streq	r1, [r4, #0]
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6054      	str	r4, [r2, #4]
 8006d68:	e7cb      	b.n	8006d02 <_free_r+0x22>
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20000540 	.word	0x20000540

08006d70 <malloc>:
 8006d70:	4b02      	ldr	r3, [pc, #8]	; (8006d7c <malloc+0xc>)
 8006d72:	4601      	mov	r1, r0
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	f000 b823 	b.w	8006dc0 <_malloc_r>
 8006d7a:	bf00      	nop
 8006d7c:	20000074 	.word	0x20000074

08006d80 <sbrk_aligned>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	4e0e      	ldr	r6, [pc, #56]	; (8006dbc <sbrk_aligned+0x3c>)
 8006d84:	460c      	mov	r4, r1
 8006d86:	6831      	ldr	r1, [r6, #0]
 8006d88:	4605      	mov	r5, r0
 8006d8a:	b911      	cbnz	r1, 8006d92 <sbrk_aligned+0x12>
 8006d8c:	f000 fcc6 	bl	800771c <_sbrk_r>
 8006d90:	6030      	str	r0, [r6, #0]
 8006d92:	4621      	mov	r1, r4
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 fcc1 	bl	800771c <_sbrk_r>
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	d00a      	beq.n	8006db4 <sbrk_aligned+0x34>
 8006d9e:	1cc4      	adds	r4, r0, #3
 8006da0:	f024 0403 	bic.w	r4, r4, #3
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d007      	beq.n	8006db8 <sbrk_aligned+0x38>
 8006da8:	1a21      	subs	r1, r4, r0
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 fcb6 	bl	800771c <_sbrk_r>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d101      	bne.n	8006db8 <sbrk_aligned+0x38>
 8006db4:	f04f 34ff 	mov.w	r4, #4294967295
 8006db8:	4620      	mov	r0, r4
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	20000544 	.word	0x20000544

08006dc0 <_malloc_r>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	1ccd      	adds	r5, r1, #3
 8006dc6:	f025 0503 	bic.w	r5, r5, #3
 8006dca:	3508      	adds	r5, #8
 8006dcc:	2d0c      	cmp	r5, #12
 8006dce:	bf38      	it	cc
 8006dd0:	250c      	movcc	r5, #12
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	db01      	blt.n	8006ddc <_malloc_r+0x1c>
 8006dd8:	42a9      	cmp	r1, r5
 8006dda:	d905      	bls.n	8006de8 <_malloc_r+0x28>
 8006ddc:	230c      	movs	r3, #12
 8006dde:	2600      	movs	r6, #0
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4630      	mov	r0, r6
 8006de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ebc <_malloc_r+0xfc>
 8006dec:	f000 f868 	bl	8006ec0 <__malloc_lock>
 8006df0:	f8d8 3000 	ldr.w	r3, [r8]
 8006df4:	461c      	mov	r4, r3
 8006df6:	bb5c      	cbnz	r4, 8006e50 <_malloc_r+0x90>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f7ff ffc0 	bl	8006d80 <sbrk_aligned>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	4604      	mov	r4, r0
 8006e04:	d155      	bne.n	8006eb2 <_malloc_r+0xf2>
 8006e06:	f8d8 4000 	ldr.w	r4, [r8]
 8006e0a:	4626      	mov	r6, r4
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	d145      	bne.n	8006e9c <_malloc_r+0xdc>
 8006e10:	2c00      	cmp	r4, #0
 8006e12:	d048      	beq.n	8006ea6 <_malloc_r+0xe6>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	4631      	mov	r1, r6
 8006e18:	4638      	mov	r0, r7
 8006e1a:	eb04 0903 	add.w	r9, r4, r3
 8006e1e:	f000 fc7d 	bl	800771c <_sbrk_r>
 8006e22:	4581      	cmp	r9, r0
 8006e24:	d13f      	bne.n	8006ea6 <_malloc_r+0xe6>
 8006e26:	6821      	ldr	r1, [r4, #0]
 8006e28:	4638      	mov	r0, r7
 8006e2a:	1a6d      	subs	r5, r5, r1
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7ff ffa7 	bl	8006d80 <sbrk_aligned>
 8006e32:	3001      	adds	r0, #1
 8006e34:	d037      	beq.n	8006ea6 <_malloc_r+0xe6>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	442b      	add	r3, r5
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d038      	beq.n	8006eb6 <_malloc_r+0xf6>
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	42a2      	cmp	r2, r4
 8006e48:	d12b      	bne.n	8006ea2 <_malloc_r+0xe2>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	e00f      	b.n	8006e70 <_malloc_r+0xb0>
 8006e50:	6822      	ldr	r2, [r4, #0]
 8006e52:	1b52      	subs	r2, r2, r5
 8006e54:	d41f      	bmi.n	8006e96 <_malloc_r+0xd6>
 8006e56:	2a0b      	cmp	r2, #11
 8006e58:	d917      	bls.n	8006e8a <_malloc_r+0xca>
 8006e5a:	1961      	adds	r1, r4, r5
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	6025      	str	r5, [r4, #0]
 8006e60:	bf18      	it	ne
 8006e62:	6059      	strne	r1, [r3, #4]
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	bf08      	it	eq
 8006e68:	f8c8 1000 	streq.w	r1, [r8]
 8006e6c:	5162      	str	r2, [r4, r5]
 8006e6e:	604b      	str	r3, [r1, #4]
 8006e70:	4638      	mov	r0, r7
 8006e72:	f104 060b 	add.w	r6, r4, #11
 8006e76:	f000 f829 	bl	8006ecc <__malloc_unlock>
 8006e7a:	f026 0607 	bic.w	r6, r6, #7
 8006e7e:	1d23      	adds	r3, r4, #4
 8006e80:	1af2      	subs	r2, r6, r3
 8006e82:	d0ae      	beq.n	8006de2 <_malloc_r+0x22>
 8006e84:	1b9b      	subs	r3, r3, r6
 8006e86:	50a3      	str	r3, [r4, r2]
 8006e88:	e7ab      	b.n	8006de2 <_malloc_r+0x22>
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	6862      	ldr	r2, [r4, #4]
 8006e8e:	d1dd      	bne.n	8006e4c <_malloc_r+0x8c>
 8006e90:	f8c8 2000 	str.w	r2, [r8]
 8006e94:	e7ec      	b.n	8006e70 <_malloc_r+0xb0>
 8006e96:	4623      	mov	r3, r4
 8006e98:	6864      	ldr	r4, [r4, #4]
 8006e9a:	e7ac      	b.n	8006df6 <_malloc_r+0x36>
 8006e9c:	4634      	mov	r4, r6
 8006e9e:	6876      	ldr	r6, [r6, #4]
 8006ea0:	e7b4      	b.n	8006e0c <_malloc_r+0x4c>
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	e7cc      	b.n	8006e40 <_malloc_r+0x80>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	f000 f80e 	bl	8006ecc <__malloc_unlock>
 8006eb0:	e797      	b.n	8006de2 <_malloc_r+0x22>
 8006eb2:	6025      	str	r5, [r4, #0]
 8006eb4:	e7dc      	b.n	8006e70 <_malloc_r+0xb0>
 8006eb6:	605b      	str	r3, [r3, #4]
 8006eb8:	deff      	udf	#255	; 0xff
 8006eba:	bf00      	nop
 8006ebc:	20000540 	.word	0x20000540

08006ec0 <__malloc_lock>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__malloc_lock+0x8>)
 8006ec2:	f7ff b890 	b.w	8005fe6 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	2000053c 	.word	0x2000053c

08006ecc <__malloc_unlock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__malloc_unlock+0x8>)
 8006ece:	f7ff b88b 	b.w	8005fe8 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	2000053c 	.word	0x2000053c

08006ed8 <_Balloc>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	69c6      	ldr	r6, [r0, #28]
 8006edc:	4604      	mov	r4, r0
 8006ede:	460d      	mov	r5, r1
 8006ee0:	b976      	cbnz	r6, 8006f00 <_Balloc+0x28>
 8006ee2:	2010      	movs	r0, #16
 8006ee4:	f7ff ff44 	bl	8006d70 <malloc>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	61e0      	str	r0, [r4, #28]
 8006eec:	b920      	cbnz	r0, 8006ef8 <_Balloc+0x20>
 8006eee:	216b      	movs	r1, #107	; 0x6b
 8006ef0:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <_Balloc+0x78>)
 8006ef2:	4818      	ldr	r0, [pc, #96]	; (8006f54 <_Balloc+0x7c>)
 8006ef4:	f000 fc30 	bl	8007758 <__assert_func>
 8006ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006efc:	6006      	str	r6, [r0, #0]
 8006efe:	60c6      	str	r6, [r0, #12]
 8006f00:	69e6      	ldr	r6, [r4, #28]
 8006f02:	68f3      	ldr	r3, [r6, #12]
 8006f04:	b183      	cbz	r3, 8006f28 <_Balloc+0x50>
 8006f06:	69e3      	ldr	r3, [r4, #28]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f0e:	b9b8      	cbnz	r0, 8006f40 <_Balloc+0x68>
 8006f10:	2101      	movs	r1, #1
 8006f12:	fa01 f605 	lsl.w	r6, r1, r5
 8006f16:	1d72      	adds	r2, r6, #5
 8006f18:	4620      	mov	r0, r4
 8006f1a:	0092      	lsls	r2, r2, #2
 8006f1c:	f000 fc3a 	bl	8007794 <_calloc_r>
 8006f20:	b160      	cbz	r0, 8006f3c <_Balloc+0x64>
 8006f22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f26:	e00e      	b.n	8006f46 <_Balloc+0x6e>
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	2104      	movs	r1, #4
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fc31 	bl	8007794 <_calloc_r>
 8006f32:	69e3      	ldr	r3, [r4, #28]
 8006f34:	60f0      	str	r0, [r6, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e4      	bne.n	8006f06 <_Balloc+0x2e>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	6802      	ldr	r2, [r0, #0]
 8006f42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f46:	2300      	movs	r3, #0
 8006f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f4c:	e7f7      	b.n	8006f3e <_Balloc+0x66>
 8006f4e:	bf00      	nop
 8006f50:	08007e07 	.word	0x08007e07
 8006f54:	08007e87 	.word	0x08007e87

08006f58 <_Bfree>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	69c6      	ldr	r6, [r0, #28]
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b976      	cbnz	r6, 8006f80 <_Bfree+0x28>
 8006f62:	2010      	movs	r0, #16
 8006f64:	f7ff ff04 	bl	8006d70 <malloc>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	61e8      	str	r0, [r5, #28]
 8006f6c:	b920      	cbnz	r0, 8006f78 <_Bfree+0x20>
 8006f6e:	218f      	movs	r1, #143	; 0x8f
 8006f70:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <_Bfree+0x3c>)
 8006f72:	4809      	ldr	r0, [pc, #36]	; (8006f98 <_Bfree+0x40>)
 8006f74:	f000 fbf0 	bl	8007758 <__assert_func>
 8006f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f7c:	6006      	str	r6, [r0, #0]
 8006f7e:	60c6      	str	r6, [r0, #12]
 8006f80:	b13c      	cbz	r4, 8006f92 <_Bfree+0x3a>
 8006f82:	69eb      	ldr	r3, [r5, #28]
 8006f84:	6862      	ldr	r2, [r4, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f8c:	6021      	str	r1, [r4, #0]
 8006f8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	08007e07 	.word	0x08007e07
 8006f98:	08007e87 	.word	0x08007e87

08006f9c <__multadd>:
 8006f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	461e      	mov	r6, r3
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	690d      	ldr	r5, [r1, #16]
 8006faa:	f101 0c14 	add.w	ip, r1, #20
 8006fae:	f8dc 3000 	ldr.w	r3, [ip]
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	b299      	uxth	r1, r3
 8006fb6:	fb02 6101 	mla	r1, r2, r1, r6
 8006fba:	0c1e      	lsrs	r6, r3, #16
 8006fbc:	0c0b      	lsrs	r3, r1, #16
 8006fbe:	fb02 3306 	mla	r3, r2, r6, r3
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fc8:	4285      	cmp	r5, r0
 8006fca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fce:	f84c 1b04 	str.w	r1, [ip], #4
 8006fd2:	dcec      	bgt.n	8006fae <__multadd+0x12>
 8006fd4:	b30e      	cbz	r6, 800701a <__multadd+0x7e>
 8006fd6:	68a3      	ldr	r3, [r4, #8]
 8006fd8:	42ab      	cmp	r3, r5
 8006fda:	dc19      	bgt.n	8007010 <__multadd+0x74>
 8006fdc:	6861      	ldr	r1, [r4, #4]
 8006fde:	4638      	mov	r0, r7
 8006fe0:	3101      	adds	r1, #1
 8006fe2:	f7ff ff79 	bl	8006ed8 <_Balloc>
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <__multadd+0x5a>
 8006fea:	4602      	mov	r2, r0
 8006fec:	21ba      	movs	r1, #186	; 0xba
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <__multadd+0x84>)
 8006ff0:	480c      	ldr	r0, [pc, #48]	; (8007024 <__multadd+0x88>)
 8006ff2:	f000 fbb1 	bl	8007758 <__assert_func>
 8006ff6:	6922      	ldr	r2, [r4, #16]
 8006ff8:	f104 010c 	add.w	r1, r4, #12
 8006ffc:	3202      	adds	r2, #2
 8006ffe:	0092      	lsls	r2, r2, #2
 8007000:	300c      	adds	r0, #12
 8007002:	f000 fb9b 	bl	800773c <memcpy>
 8007006:	4621      	mov	r1, r4
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff ffa5 	bl	8006f58 <_Bfree>
 800700e:	4644      	mov	r4, r8
 8007010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007014:	3501      	adds	r5, #1
 8007016:	615e      	str	r6, [r3, #20]
 8007018:	6125      	str	r5, [r4, #16]
 800701a:	4620      	mov	r0, r4
 800701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007020:	08007e76 	.word	0x08007e76
 8007024:	08007e87 	.word	0x08007e87

08007028 <__hi0bits>:
 8007028:	0c02      	lsrs	r2, r0, #16
 800702a:	0412      	lsls	r2, r2, #16
 800702c:	4603      	mov	r3, r0
 800702e:	b9ca      	cbnz	r2, 8007064 <__hi0bits+0x3c>
 8007030:	0403      	lsls	r3, r0, #16
 8007032:	2010      	movs	r0, #16
 8007034:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007038:	bf04      	itt	eq
 800703a:	021b      	lsleq	r3, r3, #8
 800703c:	3008      	addeq	r0, #8
 800703e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007042:	bf04      	itt	eq
 8007044:	011b      	lsleq	r3, r3, #4
 8007046:	3004      	addeq	r0, #4
 8007048:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800704c:	bf04      	itt	eq
 800704e:	009b      	lsleq	r3, r3, #2
 8007050:	3002      	addeq	r0, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	db05      	blt.n	8007062 <__hi0bits+0x3a>
 8007056:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800705a:	f100 0001 	add.w	r0, r0, #1
 800705e:	bf08      	it	eq
 8007060:	2020      	moveq	r0, #32
 8007062:	4770      	bx	lr
 8007064:	2000      	movs	r0, #0
 8007066:	e7e5      	b.n	8007034 <__hi0bits+0xc>

08007068 <__lo0bits>:
 8007068:	6803      	ldr	r3, [r0, #0]
 800706a:	4602      	mov	r2, r0
 800706c:	f013 0007 	ands.w	r0, r3, #7
 8007070:	d00b      	beq.n	800708a <__lo0bits+0x22>
 8007072:	07d9      	lsls	r1, r3, #31
 8007074:	d421      	bmi.n	80070ba <__lo0bits+0x52>
 8007076:	0798      	lsls	r0, r3, #30
 8007078:	bf49      	itett	mi
 800707a:	085b      	lsrmi	r3, r3, #1
 800707c:	089b      	lsrpl	r3, r3, #2
 800707e:	2001      	movmi	r0, #1
 8007080:	6013      	strmi	r3, [r2, #0]
 8007082:	bf5c      	itt	pl
 8007084:	2002      	movpl	r0, #2
 8007086:	6013      	strpl	r3, [r2, #0]
 8007088:	4770      	bx	lr
 800708a:	b299      	uxth	r1, r3
 800708c:	b909      	cbnz	r1, 8007092 <__lo0bits+0x2a>
 800708e:	2010      	movs	r0, #16
 8007090:	0c1b      	lsrs	r3, r3, #16
 8007092:	b2d9      	uxtb	r1, r3
 8007094:	b909      	cbnz	r1, 800709a <__lo0bits+0x32>
 8007096:	3008      	adds	r0, #8
 8007098:	0a1b      	lsrs	r3, r3, #8
 800709a:	0719      	lsls	r1, r3, #28
 800709c:	bf04      	itt	eq
 800709e:	091b      	lsreq	r3, r3, #4
 80070a0:	3004      	addeq	r0, #4
 80070a2:	0799      	lsls	r1, r3, #30
 80070a4:	bf04      	itt	eq
 80070a6:	089b      	lsreq	r3, r3, #2
 80070a8:	3002      	addeq	r0, #2
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	d403      	bmi.n	80070b6 <__lo0bits+0x4e>
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	f100 0001 	add.w	r0, r0, #1
 80070b4:	d003      	beq.n	80070be <__lo0bits+0x56>
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	4770      	bx	lr
 80070ba:	2000      	movs	r0, #0
 80070bc:	4770      	bx	lr
 80070be:	2020      	movs	r0, #32
 80070c0:	4770      	bx	lr
	...

080070c4 <__i2b>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	460c      	mov	r4, r1
 80070c8:	2101      	movs	r1, #1
 80070ca:	f7ff ff05 	bl	8006ed8 <_Balloc>
 80070ce:	4602      	mov	r2, r0
 80070d0:	b928      	cbnz	r0, 80070de <__i2b+0x1a>
 80070d2:	f240 1145 	movw	r1, #325	; 0x145
 80070d6:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <__i2b+0x24>)
 80070d8:	4804      	ldr	r0, [pc, #16]	; (80070ec <__i2b+0x28>)
 80070da:	f000 fb3d 	bl	8007758 <__assert_func>
 80070de:	2301      	movs	r3, #1
 80070e0:	6144      	str	r4, [r0, #20]
 80070e2:	6103      	str	r3, [r0, #16]
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	bf00      	nop
 80070e8:	08007e76 	.word	0x08007e76
 80070ec:	08007e87 	.word	0x08007e87

080070f0 <__multiply>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	4691      	mov	r9, r2
 80070f6:	690a      	ldr	r2, [r1, #16]
 80070f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070fc:	460c      	mov	r4, r1
 80070fe:	429a      	cmp	r2, r3
 8007100:	bfbe      	ittt	lt
 8007102:	460b      	movlt	r3, r1
 8007104:	464c      	movlt	r4, r9
 8007106:	4699      	movlt	r9, r3
 8007108:	6927      	ldr	r7, [r4, #16]
 800710a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800710e:	68a3      	ldr	r3, [r4, #8]
 8007110:	6861      	ldr	r1, [r4, #4]
 8007112:	eb07 060a 	add.w	r6, r7, sl
 8007116:	42b3      	cmp	r3, r6
 8007118:	b085      	sub	sp, #20
 800711a:	bfb8      	it	lt
 800711c:	3101      	addlt	r1, #1
 800711e:	f7ff fedb 	bl	8006ed8 <_Balloc>
 8007122:	b930      	cbnz	r0, 8007132 <__multiply+0x42>
 8007124:	4602      	mov	r2, r0
 8007126:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800712a:	4b43      	ldr	r3, [pc, #268]	; (8007238 <__multiply+0x148>)
 800712c:	4843      	ldr	r0, [pc, #268]	; (800723c <__multiply+0x14c>)
 800712e:	f000 fb13 	bl	8007758 <__assert_func>
 8007132:	f100 0514 	add.w	r5, r0, #20
 8007136:	462b      	mov	r3, r5
 8007138:	2200      	movs	r2, #0
 800713a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800713e:	4543      	cmp	r3, r8
 8007140:	d321      	bcc.n	8007186 <__multiply+0x96>
 8007142:	f104 0314 	add.w	r3, r4, #20
 8007146:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800714a:	f109 0314 	add.w	r3, r9, #20
 800714e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007152:	9202      	str	r2, [sp, #8]
 8007154:	1b3a      	subs	r2, r7, r4
 8007156:	3a15      	subs	r2, #21
 8007158:	f022 0203 	bic.w	r2, r2, #3
 800715c:	3204      	adds	r2, #4
 800715e:	f104 0115 	add.w	r1, r4, #21
 8007162:	428f      	cmp	r7, r1
 8007164:	bf38      	it	cc
 8007166:	2204      	movcc	r2, #4
 8007168:	9201      	str	r2, [sp, #4]
 800716a:	9a02      	ldr	r2, [sp, #8]
 800716c:	9303      	str	r3, [sp, #12]
 800716e:	429a      	cmp	r2, r3
 8007170:	d80c      	bhi.n	800718c <__multiply+0x9c>
 8007172:	2e00      	cmp	r6, #0
 8007174:	dd03      	ble.n	800717e <__multiply+0x8e>
 8007176:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800717a:	2b00      	cmp	r3, #0
 800717c:	d05a      	beq.n	8007234 <__multiply+0x144>
 800717e:	6106      	str	r6, [r0, #16]
 8007180:	b005      	add	sp, #20
 8007182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	f843 2b04 	str.w	r2, [r3], #4
 800718a:	e7d8      	b.n	800713e <__multiply+0x4e>
 800718c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007190:	f1ba 0f00 	cmp.w	sl, #0
 8007194:	d023      	beq.n	80071de <__multiply+0xee>
 8007196:	46a9      	mov	r9, r5
 8007198:	f04f 0c00 	mov.w	ip, #0
 800719c:	f104 0e14 	add.w	lr, r4, #20
 80071a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071a4:	f8d9 1000 	ldr.w	r1, [r9]
 80071a8:	fa1f fb82 	uxth.w	fp, r2
 80071ac:	b289      	uxth	r1, r1
 80071ae:	fb0a 110b 	mla	r1, sl, fp, r1
 80071b2:	4461      	add	r1, ip
 80071b4:	f8d9 c000 	ldr.w	ip, [r9]
 80071b8:	0c12      	lsrs	r2, r2, #16
 80071ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071be:	fb0a c202 	mla	r2, sl, r2, ip
 80071c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071c6:	b289      	uxth	r1, r1
 80071c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071cc:	4577      	cmp	r7, lr
 80071ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071d2:	f849 1b04 	str.w	r1, [r9], #4
 80071d6:	d8e3      	bhi.n	80071a0 <__multiply+0xb0>
 80071d8:	9a01      	ldr	r2, [sp, #4]
 80071da:	f845 c002 	str.w	ip, [r5, r2]
 80071de:	9a03      	ldr	r2, [sp, #12]
 80071e0:	3304      	adds	r3, #4
 80071e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071e6:	f1b9 0f00 	cmp.w	r9, #0
 80071ea:	d021      	beq.n	8007230 <__multiply+0x140>
 80071ec:	46ae      	mov	lr, r5
 80071ee:	f04f 0a00 	mov.w	sl, #0
 80071f2:	6829      	ldr	r1, [r5, #0]
 80071f4:	f104 0c14 	add.w	ip, r4, #20
 80071f8:	f8bc b000 	ldrh.w	fp, [ip]
 80071fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007200:	b289      	uxth	r1, r1
 8007202:	fb09 220b 	mla	r2, r9, fp, r2
 8007206:	4452      	add	r2, sl
 8007208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800720c:	f84e 1b04 	str.w	r1, [lr], #4
 8007210:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007218:	f8be 1000 	ldrh.w	r1, [lr]
 800721c:	4567      	cmp	r7, ip
 800721e:	fb09 110a 	mla	r1, r9, sl, r1
 8007222:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007226:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800722a:	d8e5      	bhi.n	80071f8 <__multiply+0x108>
 800722c:	9a01      	ldr	r2, [sp, #4]
 800722e:	50a9      	str	r1, [r5, r2]
 8007230:	3504      	adds	r5, #4
 8007232:	e79a      	b.n	800716a <__multiply+0x7a>
 8007234:	3e01      	subs	r6, #1
 8007236:	e79c      	b.n	8007172 <__multiply+0x82>
 8007238:	08007e76 	.word	0x08007e76
 800723c:	08007e87 	.word	0x08007e87

08007240 <__pow5mult>:
 8007240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007244:	4615      	mov	r5, r2
 8007246:	f012 0203 	ands.w	r2, r2, #3
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	d007      	beq.n	8007260 <__pow5mult+0x20>
 8007250:	4c25      	ldr	r4, [pc, #148]	; (80072e8 <__pow5mult+0xa8>)
 8007252:	3a01      	subs	r2, #1
 8007254:	2300      	movs	r3, #0
 8007256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800725a:	f7ff fe9f 	bl	8006f9c <__multadd>
 800725e:	4607      	mov	r7, r0
 8007260:	10ad      	asrs	r5, r5, #2
 8007262:	d03d      	beq.n	80072e0 <__pow5mult+0xa0>
 8007264:	69f4      	ldr	r4, [r6, #28]
 8007266:	b97c      	cbnz	r4, 8007288 <__pow5mult+0x48>
 8007268:	2010      	movs	r0, #16
 800726a:	f7ff fd81 	bl	8006d70 <malloc>
 800726e:	4602      	mov	r2, r0
 8007270:	61f0      	str	r0, [r6, #28]
 8007272:	b928      	cbnz	r0, 8007280 <__pow5mult+0x40>
 8007274:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007278:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <__pow5mult+0xac>)
 800727a:	481d      	ldr	r0, [pc, #116]	; (80072f0 <__pow5mult+0xb0>)
 800727c:	f000 fa6c 	bl	8007758 <__assert_func>
 8007280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007284:	6004      	str	r4, [r0, #0]
 8007286:	60c4      	str	r4, [r0, #12]
 8007288:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800728c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007290:	b94c      	cbnz	r4, 80072a6 <__pow5mult+0x66>
 8007292:	f240 2171 	movw	r1, #625	; 0x271
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff ff14 	bl	80070c4 <__i2b>
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80072a4:	6003      	str	r3, [r0, #0]
 80072a6:	f04f 0900 	mov.w	r9, #0
 80072aa:	07eb      	lsls	r3, r5, #31
 80072ac:	d50a      	bpl.n	80072c4 <__pow5mult+0x84>
 80072ae:	4639      	mov	r1, r7
 80072b0:	4622      	mov	r2, r4
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ff1c 	bl	80070f0 <__multiply>
 80072b8:	4680      	mov	r8, r0
 80072ba:	4639      	mov	r1, r7
 80072bc:	4630      	mov	r0, r6
 80072be:	f7ff fe4b 	bl	8006f58 <_Bfree>
 80072c2:	4647      	mov	r7, r8
 80072c4:	106d      	asrs	r5, r5, #1
 80072c6:	d00b      	beq.n	80072e0 <__pow5mult+0xa0>
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	b938      	cbnz	r0, 80072dc <__pow5mult+0x9c>
 80072cc:	4622      	mov	r2, r4
 80072ce:	4621      	mov	r1, r4
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff ff0d 	bl	80070f0 <__multiply>
 80072d6:	6020      	str	r0, [r4, #0]
 80072d8:	f8c0 9000 	str.w	r9, [r0]
 80072dc:	4604      	mov	r4, r0
 80072de:	e7e4      	b.n	80072aa <__pow5mult+0x6a>
 80072e0:	4638      	mov	r0, r7
 80072e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e6:	bf00      	nop
 80072e8:	08007fd0 	.word	0x08007fd0
 80072ec:	08007e07 	.word	0x08007e07
 80072f0:	08007e87 	.word	0x08007e87

080072f4 <__lshift>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	460c      	mov	r4, r1
 80072fa:	4607      	mov	r7, r0
 80072fc:	4691      	mov	r9, r2
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6849      	ldr	r1, [r1, #4]
 8007302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007306:	68a3      	ldr	r3, [r4, #8]
 8007308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800730c:	f108 0601 	add.w	r6, r8, #1
 8007310:	42b3      	cmp	r3, r6
 8007312:	db0b      	blt.n	800732c <__lshift+0x38>
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff fddf 	bl	8006ed8 <_Balloc>
 800731a:	4605      	mov	r5, r0
 800731c:	b948      	cbnz	r0, 8007332 <__lshift+0x3e>
 800731e:	4602      	mov	r2, r0
 8007320:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007324:	4b27      	ldr	r3, [pc, #156]	; (80073c4 <__lshift+0xd0>)
 8007326:	4828      	ldr	r0, [pc, #160]	; (80073c8 <__lshift+0xd4>)
 8007328:	f000 fa16 	bl	8007758 <__assert_func>
 800732c:	3101      	adds	r1, #1
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	e7ee      	b.n	8007310 <__lshift+0x1c>
 8007332:	2300      	movs	r3, #0
 8007334:	f100 0114 	add.w	r1, r0, #20
 8007338:	f100 0210 	add.w	r2, r0, #16
 800733c:	4618      	mov	r0, r3
 800733e:	4553      	cmp	r3, sl
 8007340:	db33      	blt.n	80073aa <__lshift+0xb6>
 8007342:	6920      	ldr	r0, [r4, #16]
 8007344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007348:	f104 0314 	add.w	r3, r4, #20
 800734c:	f019 091f 	ands.w	r9, r9, #31
 8007350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007358:	d02b      	beq.n	80073b2 <__lshift+0xbe>
 800735a:	468a      	mov	sl, r1
 800735c:	2200      	movs	r2, #0
 800735e:	f1c9 0e20 	rsb	lr, r9, #32
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	fa00 f009 	lsl.w	r0, r0, r9
 8007368:	4310      	orrs	r0, r2
 800736a:	f84a 0b04 	str.w	r0, [sl], #4
 800736e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007372:	459c      	cmp	ip, r3
 8007374:	fa22 f20e 	lsr.w	r2, r2, lr
 8007378:	d8f3      	bhi.n	8007362 <__lshift+0x6e>
 800737a:	ebac 0304 	sub.w	r3, ip, r4
 800737e:	3b15      	subs	r3, #21
 8007380:	f023 0303 	bic.w	r3, r3, #3
 8007384:	3304      	adds	r3, #4
 8007386:	f104 0015 	add.w	r0, r4, #21
 800738a:	4584      	cmp	ip, r0
 800738c:	bf38      	it	cc
 800738e:	2304      	movcc	r3, #4
 8007390:	50ca      	str	r2, [r1, r3]
 8007392:	b10a      	cbz	r2, 8007398 <__lshift+0xa4>
 8007394:	f108 0602 	add.w	r6, r8, #2
 8007398:	3e01      	subs	r6, #1
 800739a:	4638      	mov	r0, r7
 800739c:	4621      	mov	r1, r4
 800739e:	612e      	str	r6, [r5, #16]
 80073a0:	f7ff fdda 	bl	8006f58 <_Bfree>
 80073a4:	4628      	mov	r0, r5
 80073a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ae:	3301      	adds	r3, #1
 80073b0:	e7c5      	b.n	800733e <__lshift+0x4a>
 80073b2:	3904      	subs	r1, #4
 80073b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b8:	459c      	cmp	ip, r3
 80073ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80073be:	d8f9      	bhi.n	80073b4 <__lshift+0xc0>
 80073c0:	e7ea      	b.n	8007398 <__lshift+0xa4>
 80073c2:	bf00      	nop
 80073c4:	08007e76 	.word	0x08007e76
 80073c8:	08007e87 	.word	0x08007e87

080073cc <__mcmp>:
 80073cc:	4603      	mov	r3, r0
 80073ce:	690a      	ldr	r2, [r1, #16]
 80073d0:	6900      	ldr	r0, [r0, #16]
 80073d2:	b530      	push	{r4, r5, lr}
 80073d4:	1a80      	subs	r0, r0, r2
 80073d6:	d10d      	bne.n	80073f4 <__mcmp+0x28>
 80073d8:	3314      	adds	r3, #20
 80073da:	3114      	adds	r1, #20
 80073dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073ec:	4295      	cmp	r5, r2
 80073ee:	d002      	beq.n	80073f6 <__mcmp+0x2a>
 80073f0:	d304      	bcc.n	80073fc <__mcmp+0x30>
 80073f2:	2001      	movs	r0, #1
 80073f4:	bd30      	pop	{r4, r5, pc}
 80073f6:	42a3      	cmp	r3, r4
 80073f8:	d3f4      	bcc.n	80073e4 <__mcmp+0x18>
 80073fa:	e7fb      	b.n	80073f4 <__mcmp+0x28>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e7f8      	b.n	80073f4 <__mcmp+0x28>
	...

08007404 <__mdiff>:
 8007404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	460d      	mov	r5, r1
 800740a:	4607      	mov	r7, r0
 800740c:	4611      	mov	r1, r2
 800740e:	4628      	mov	r0, r5
 8007410:	4614      	mov	r4, r2
 8007412:	f7ff ffdb 	bl	80073cc <__mcmp>
 8007416:	1e06      	subs	r6, r0, #0
 8007418:	d111      	bne.n	800743e <__mdiff+0x3a>
 800741a:	4631      	mov	r1, r6
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff fd5b 	bl	8006ed8 <_Balloc>
 8007422:	4602      	mov	r2, r0
 8007424:	b928      	cbnz	r0, 8007432 <__mdiff+0x2e>
 8007426:	f240 2137 	movw	r1, #567	; 0x237
 800742a:	4b3a      	ldr	r3, [pc, #232]	; (8007514 <__mdiff+0x110>)
 800742c:	483a      	ldr	r0, [pc, #232]	; (8007518 <__mdiff+0x114>)
 800742e:	f000 f993 	bl	8007758 <__assert_func>
 8007432:	2301      	movs	r3, #1
 8007434:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007438:	4610      	mov	r0, r2
 800743a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743e:	bfa4      	itt	ge
 8007440:	4623      	movge	r3, r4
 8007442:	462c      	movge	r4, r5
 8007444:	4638      	mov	r0, r7
 8007446:	6861      	ldr	r1, [r4, #4]
 8007448:	bfa6      	itte	ge
 800744a:	461d      	movge	r5, r3
 800744c:	2600      	movge	r6, #0
 800744e:	2601      	movlt	r6, #1
 8007450:	f7ff fd42 	bl	8006ed8 <_Balloc>
 8007454:	4602      	mov	r2, r0
 8007456:	b918      	cbnz	r0, 8007460 <__mdiff+0x5c>
 8007458:	f240 2145 	movw	r1, #581	; 0x245
 800745c:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <__mdiff+0x110>)
 800745e:	e7e5      	b.n	800742c <__mdiff+0x28>
 8007460:	f102 0814 	add.w	r8, r2, #20
 8007464:	46c2      	mov	sl, r8
 8007466:	f04f 0c00 	mov.w	ip, #0
 800746a:	6927      	ldr	r7, [r4, #16]
 800746c:	60c6      	str	r6, [r0, #12]
 800746e:	692e      	ldr	r6, [r5, #16]
 8007470:	f104 0014 	add.w	r0, r4, #20
 8007474:	f105 0914 	add.w	r9, r5, #20
 8007478:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800747c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007480:	3410      	adds	r4, #16
 8007482:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007486:	f859 3b04 	ldr.w	r3, [r9], #4
 800748a:	fa1f f18b 	uxth.w	r1, fp
 800748e:	4461      	add	r1, ip
 8007490:	fa1f fc83 	uxth.w	ip, r3
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	eba1 010c 	sub.w	r1, r1, ip
 800749a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800749e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074a2:	b289      	uxth	r1, r1
 80074a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80074a8:	454e      	cmp	r6, r9
 80074aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80074ae:	f84a 1b04 	str.w	r1, [sl], #4
 80074b2:	d8e6      	bhi.n	8007482 <__mdiff+0x7e>
 80074b4:	1b73      	subs	r3, r6, r5
 80074b6:	3b15      	subs	r3, #21
 80074b8:	f023 0303 	bic.w	r3, r3, #3
 80074bc:	3515      	adds	r5, #21
 80074be:	3304      	adds	r3, #4
 80074c0:	42ae      	cmp	r6, r5
 80074c2:	bf38      	it	cc
 80074c4:	2304      	movcc	r3, #4
 80074c6:	4418      	add	r0, r3
 80074c8:	4443      	add	r3, r8
 80074ca:	461e      	mov	r6, r3
 80074cc:	4605      	mov	r5, r0
 80074ce:	4575      	cmp	r5, lr
 80074d0:	d30e      	bcc.n	80074f0 <__mdiff+0xec>
 80074d2:	f10e 0103 	add.w	r1, lr, #3
 80074d6:	1a09      	subs	r1, r1, r0
 80074d8:	f021 0103 	bic.w	r1, r1, #3
 80074dc:	3803      	subs	r0, #3
 80074de:	4586      	cmp	lr, r0
 80074e0:	bf38      	it	cc
 80074e2:	2100      	movcc	r1, #0
 80074e4:	440b      	add	r3, r1
 80074e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ea:	b189      	cbz	r1, 8007510 <__mdiff+0x10c>
 80074ec:	6117      	str	r7, [r2, #16]
 80074ee:	e7a3      	b.n	8007438 <__mdiff+0x34>
 80074f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80074f4:	fa1f f188 	uxth.w	r1, r8
 80074f8:	4461      	add	r1, ip
 80074fa:	140c      	asrs	r4, r1, #16
 80074fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007500:	b289      	uxth	r1, r1
 8007502:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007506:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800750a:	f846 1b04 	str.w	r1, [r6], #4
 800750e:	e7de      	b.n	80074ce <__mdiff+0xca>
 8007510:	3f01      	subs	r7, #1
 8007512:	e7e8      	b.n	80074e6 <__mdiff+0xe2>
 8007514:	08007e76 	.word	0x08007e76
 8007518:	08007e87 	.word	0x08007e87

0800751c <__d2b>:
 800751c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800751e:	2101      	movs	r1, #1
 8007520:	4617      	mov	r7, r2
 8007522:	461c      	mov	r4, r3
 8007524:	9e08      	ldr	r6, [sp, #32]
 8007526:	f7ff fcd7 	bl	8006ed8 <_Balloc>
 800752a:	4605      	mov	r5, r0
 800752c:	b930      	cbnz	r0, 800753c <__d2b+0x20>
 800752e:	4602      	mov	r2, r0
 8007530:	f240 310f 	movw	r1, #783	; 0x30f
 8007534:	4b22      	ldr	r3, [pc, #136]	; (80075c0 <__d2b+0xa4>)
 8007536:	4823      	ldr	r0, [pc, #140]	; (80075c4 <__d2b+0xa8>)
 8007538:	f000 f90e 	bl	8007758 <__assert_func>
 800753c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007540:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007544:	bb24      	cbnz	r4, 8007590 <__d2b+0x74>
 8007546:	2f00      	cmp	r7, #0
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	d026      	beq.n	800759a <__d2b+0x7e>
 800754c:	4668      	mov	r0, sp
 800754e:	9700      	str	r7, [sp, #0]
 8007550:	f7ff fd8a 	bl	8007068 <__lo0bits>
 8007554:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007558:	b1e8      	cbz	r0, 8007596 <__d2b+0x7a>
 800755a:	f1c0 0320 	rsb	r3, r0, #32
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	430b      	orrs	r3, r1
 8007564:	40c2      	lsrs	r2, r0
 8007566:	616b      	str	r3, [r5, #20]
 8007568:	9201      	str	r2, [sp, #4]
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf14      	ite	ne
 8007570:	2102      	movne	r1, #2
 8007572:	2101      	moveq	r1, #1
 8007574:	61ab      	str	r3, [r5, #24]
 8007576:	6129      	str	r1, [r5, #16]
 8007578:	b1bc      	cbz	r4, 80075aa <__d2b+0x8e>
 800757a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800757e:	4404      	add	r4, r0
 8007580:	6034      	str	r4, [r6, #0]
 8007582:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007588:	6018      	str	r0, [r3, #0]
 800758a:	4628      	mov	r0, r5
 800758c:	b003      	add	sp, #12
 800758e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007594:	e7d7      	b.n	8007546 <__d2b+0x2a>
 8007596:	6169      	str	r1, [r5, #20]
 8007598:	e7e7      	b.n	800756a <__d2b+0x4e>
 800759a:	a801      	add	r0, sp, #4
 800759c:	f7ff fd64 	bl	8007068 <__lo0bits>
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	2101      	movs	r1, #1
 80075a4:	616b      	str	r3, [r5, #20]
 80075a6:	3020      	adds	r0, #32
 80075a8:	e7e5      	b.n	8007576 <__d2b+0x5a>
 80075aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075ae:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80075b2:	6030      	str	r0, [r6, #0]
 80075b4:	6918      	ldr	r0, [r3, #16]
 80075b6:	f7ff fd37 	bl	8007028 <__hi0bits>
 80075ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80075be:	e7e2      	b.n	8007586 <__d2b+0x6a>
 80075c0:	08007e76 	.word	0x08007e76
 80075c4:	08007e87 	.word	0x08007e87

080075c8 <__sflush_r>:
 80075c8:	898a      	ldrh	r2, [r1, #12]
 80075ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075cc:	4605      	mov	r5, r0
 80075ce:	0710      	lsls	r0, r2, #28
 80075d0:	460c      	mov	r4, r1
 80075d2:	d457      	bmi.n	8007684 <__sflush_r+0xbc>
 80075d4:	684b      	ldr	r3, [r1, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dc04      	bgt.n	80075e4 <__sflush_r+0x1c>
 80075da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dc01      	bgt.n	80075e4 <__sflush_r+0x1c>
 80075e0:	2000      	movs	r0, #0
 80075e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	d0fa      	beq.n	80075e0 <__sflush_r+0x18>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f0:	682f      	ldr	r7, [r5, #0]
 80075f2:	6a21      	ldr	r1, [r4, #32]
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	d032      	beq.n	800765e <__sflush_r+0x96>
 80075f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	075a      	lsls	r2, r3, #29
 80075fe:	d505      	bpl.n	800760c <__sflush_r+0x44>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	1ac0      	subs	r0, r0, r3
 8007604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007606:	b10b      	cbz	r3, 800760c <__sflush_r+0x44>
 8007608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800760a:	1ac0      	subs	r0, r0, r3
 800760c:	2300      	movs	r3, #0
 800760e:	4602      	mov	r2, r0
 8007610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007612:	4628      	mov	r0, r5
 8007614:	6a21      	ldr	r1, [r4, #32]
 8007616:	47b0      	blx	r6
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	d106      	bne.n	800762c <__sflush_r+0x64>
 800761e:	6829      	ldr	r1, [r5, #0]
 8007620:	291d      	cmp	r1, #29
 8007622:	d82b      	bhi.n	800767c <__sflush_r+0xb4>
 8007624:	4a28      	ldr	r2, [pc, #160]	; (80076c8 <__sflush_r+0x100>)
 8007626:	410a      	asrs	r2, r1
 8007628:	07d6      	lsls	r6, r2, #31
 800762a:	d427      	bmi.n	800767c <__sflush_r+0xb4>
 800762c:	2200      	movs	r2, #0
 800762e:	6062      	str	r2, [r4, #4]
 8007630:	6922      	ldr	r2, [r4, #16]
 8007632:	04d9      	lsls	r1, r3, #19
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	d504      	bpl.n	8007642 <__sflush_r+0x7a>
 8007638:	1c42      	adds	r2, r0, #1
 800763a:	d101      	bne.n	8007640 <__sflush_r+0x78>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b903      	cbnz	r3, 8007642 <__sflush_r+0x7a>
 8007640:	6560      	str	r0, [r4, #84]	; 0x54
 8007642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007644:	602f      	str	r7, [r5, #0]
 8007646:	2900      	cmp	r1, #0
 8007648:	d0ca      	beq.n	80075e0 <__sflush_r+0x18>
 800764a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800764e:	4299      	cmp	r1, r3
 8007650:	d002      	beq.n	8007658 <__sflush_r+0x90>
 8007652:	4628      	mov	r0, r5
 8007654:	f7ff fb44 	bl	8006ce0 <_free_r>
 8007658:	2000      	movs	r0, #0
 800765a:	6360      	str	r0, [r4, #52]	; 0x34
 800765c:	e7c1      	b.n	80075e2 <__sflush_r+0x1a>
 800765e:	2301      	movs	r3, #1
 8007660:	4628      	mov	r0, r5
 8007662:	47b0      	blx	r6
 8007664:	1c41      	adds	r1, r0, #1
 8007666:	d1c8      	bne.n	80075fa <__sflush_r+0x32>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0c5      	beq.n	80075fa <__sflush_r+0x32>
 800766e:	2b1d      	cmp	r3, #29
 8007670:	d001      	beq.n	8007676 <__sflush_r+0xae>
 8007672:	2b16      	cmp	r3, #22
 8007674:	d101      	bne.n	800767a <__sflush_r+0xb2>
 8007676:	602f      	str	r7, [r5, #0]
 8007678:	e7b2      	b.n	80075e0 <__sflush_r+0x18>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	e7ae      	b.n	80075e2 <__sflush_r+0x1a>
 8007684:	690f      	ldr	r7, [r1, #16]
 8007686:	2f00      	cmp	r7, #0
 8007688:	d0aa      	beq.n	80075e0 <__sflush_r+0x18>
 800768a:	0793      	lsls	r3, r2, #30
 800768c:	bf18      	it	ne
 800768e:	2300      	movne	r3, #0
 8007690:	680e      	ldr	r6, [r1, #0]
 8007692:	bf08      	it	eq
 8007694:	694b      	ldreq	r3, [r1, #20]
 8007696:	1bf6      	subs	r6, r6, r7
 8007698:	600f      	str	r7, [r1, #0]
 800769a:	608b      	str	r3, [r1, #8]
 800769c:	2e00      	cmp	r6, #0
 800769e:	dd9f      	ble.n	80075e0 <__sflush_r+0x18>
 80076a0:	4633      	mov	r3, r6
 80076a2:	463a      	mov	r2, r7
 80076a4:	4628      	mov	r0, r5
 80076a6:	6a21      	ldr	r1, [r4, #32]
 80076a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80076ac:	47e0      	blx	ip
 80076ae:	2800      	cmp	r0, #0
 80076b0:	dc06      	bgt.n	80076c0 <__sflush_r+0xf8>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e790      	b.n	80075e2 <__sflush_r+0x1a>
 80076c0:	4407      	add	r7, r0
 80076c2:	1a36      	subs	r6, r6, r0
 80076c4:	e7ea      	b.n	800769c <__sflush_r+0xd4>
 80076c6:	bf00      	nop
 80076c8:	dfbffffe 	.word	0xdfbffffe

080076cc <_fflush_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	690b      	ldr	r3, [r1, #16]
 80076d0:	4605      	mov	r5, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	b913      	cbnz	r3, 80076dc <_fflush_r+0x10>
 80076d6:	2500      	movs	r5, #0
 80076d8:	4628      	mov	r0, r5
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	b118      	cbz	r0, 80076e6 <_fflush_r+0x1a>
 80076de:	6a03      	ldr	r3, [r0, #32]
 80076e0:	b90b      	cbnz	r3, 80076e6 <_fflush_r+0x1a>
 80076e2:	f7fe fb89 	bl	8005df8 <__sinit>
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0f3      	beq.n	80076d6 <_fflush_r+0xa>
 80076ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f0:	07d0      	lsls	r0, r2, #31
 80076f2:	d404      	bmi.n	80076fe <_fflush_r+0x32>
 80076f4:	0599      	lsls	r1, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_fflush_r+0x32>
 80076f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fa:	f7fe fc74 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 80076fe:	4628      	mov	r0, r5
 8007700:	4621      	mov	r1, r4
 8007702:	f7ff ff61 	bl	80075c8 <__sflush_r>
 8007706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007708:	4605      	mov	r5, r0
 800770a:	07da      	lsls	r2, r3, #31
 800770c:	d4e4      	bmi.n	80076d8 <_fflush_r+0xc>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	059b      	lsls	r3, r3, #22
 8007712:	d4e1      	bmi.n	80076d8 <_fflush_r+0xc>
 8007714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007716:	f7fe fc67 	bl	8005fe8 <__retarget_lock_release_recursive>
 800771a:	e7dd      	b.n	80076d8 <_fflush_r+0xc>

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	2300      	movs	r3, #0
 8007720:	4d05      	ldr	r5, [pc, #20]	; (8007738 <_sbrk_r+0x1c>)
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7fb f888 	bl	800283c <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20000538 	.word	0x20000538

0800773c <memcpy>:
 800773c:	440a      	add	r2, r1
 800773e:	4291      	cmp	r1, r2
 8007740:	f100 33ff 	add.w	r3, r0, #4294967295
 8007744:	d100      	bne.n	8007748 <memcpy+0xc>
 8007746:	4770      	bx	lr
 8007748:	b510      	push	{r4, lr}
 800774a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800774e:	4291      	cmp	r1, r2
 8007750:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007754:	d1f9      	bne.n	800774a <memcpy+0xe>
 8007756:	bd10      	pop	{r4, pc}

08007758 <__assert_func>:
 8007758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800775a:	4614      	mov	r4, r2
 800775c:	461a      	mov	r2, r3
 800775e:	4b09      	ldr	r3, [pc, #36]	; (8007784 <__assert_func+0x2c>)
 8007760:	4605      	mov	r5, r0
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68d8      	ldr	r0, [r3, #12]
 8007766:	b14c      	cbz	r4, 800777c <__assert_func+0x24>
 8007768:	4b07      	ldr	r3, [pc, #28]	; (8007788 <__assert_func+0x30>)
 800776a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800776e:	9100      	str	r1, [sp, #0]
 8007770:	462b      	mov	r3, r5
 8007772:	4906      	ldr	r1, [pc, #24]	; (800778c <__assert_func+0x34>)
 8007774:	f000 f842 	bl	80077fc <fiprintf>
 8007778:	f000 f852 	bl	8007820 <abort>
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <__assert_func+0x38>)
 800777e:	461c      	mov	r4, r3
 8007780:	e7f3      	b.n	800776a <__assert_func+0x12>
 8007782:	bf00      	nop
 8007784:	20000074 	.word	0x20000074
 8007788:	08007fe6 	.word	0x08007fe6
 800778c:	08007ff3 	.word	0x08007ff3
 8007790:	08008021 	.word	0x08008021

08007794 <_calloc_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	fba1 5402 	umull	r5, r4, r1, r2
 800779a:	b934      	cbnz	r4, 80077aa <_calloc_r+0x16>
 800779c:	4629      	mov	r1, r5
 800779e:	f7ff fb0f 	bl	8006dc0 <_malloc_r>
 80077a2:	4606      	mov	r6, r0
 80077a4:	b928      	cbnz	r0, 80077b2 <_calloc_r+0x1e>
 80077a6:	4630      	mov	r0, r6
 80077a8:	bd70      	pop	{r4, r5, r6, pc}
 80077aa:	220c      	movs	r2, #12
 80077ac:	2600      	movs	r6, #0
 80077ae:	6002      	str	r2, [r0, #0]
 80077b0:	e7f9      	b.n	80077a6 <_calloc_r+0x12>
 80077b2:	462a      	mov	r2, r5
 80077b4:	4621      	mov	r1, r4
 80077b6:	f7fe fb98 	bl	8005eea <memset>
 80077ba:	e7f4      	b.n	80077a6 <_calloc_r+0x12>

080077bc <__ascii_mbtowc>:
 80077bc:	b082      	sub	sp, #8
 80077be:	b901      	cbnz	r1, 80077c2 <__ascii_mbtowc+0x6>
 80077c0:	a901      	add	r1, sp, #4
 80077c2:	b142      	cbz	r2, 80077d6 <__ascii_mbtowc+0x1a>
 80077c4:	b14b      	cbz	r3, 80077da <__ascii_mbtowc+0x1e>
 80077c6:	7813      	ldrb	r3, [r2, #0]
 80077c8:	600b      	str	r3, [r1, #0]
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	1e10      	subs	r0, r2, #0
 80077ce:	bf18      	it	ne
 80077d0:	2001      	movne	r0, #1
 80077d2:	b002      	add	sp, #8
 80077d4:	4770      	bx	lr
 80077d6:	4610      	mov	r0, r2
 80077d8:	e7fb      	b.n	80077d2 <__ascii_mbtowc+0x16>
 80077da:	f06f 0001 	mvn.w	r0, #1
 80077de:	e7f8      	b.n	80077d2 <__ascii_mbtowc+0x16>

080077e0 <__ascii_wctomb>:
 80077e0:	4603      	mov	r3, r0
 80077e2:	4608      	mov	r0, r1
 80077e4:	b141      	cbz	r1, 80077f8 <__ascii_wctomb+0x18>
 80077e6:	2aff      	cmp	r2, #255	; 0xff
 80077e8:	d904      	bls.n	80077f4 <__ascii_wctomb+0x14>
 80077ea:	228a      	movs	r2, #138	; 0x8a
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	4770      	bx	lr
 80077f4:	2001      	movs	r0, #1
 80077f6:	700a      	strb	r2, [r1, #0]
 80077f8:	4770      	bx	lr
	...

080077fc <fiprintf>:
 80077fc:	b40e      	push	{r1, r2, r3}
 80077fe:	b503      	push	{r0, r1, lr}
 8007800:	4601      	mov	r1, r0
 8007802:	ab03      	add	r3, sp, #12
 8007804:	4805      	ldr	r0, [pc, #20]	; (800781c <fiprintf+0x20>)
 8007806:	f853 2b04 	ldr.w	r2, [r3], #4
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	f000 f835 	bl	800787c <_vfiprintf_r>
 8007812:	b002      	add	sp, #8
 8007814:	f85d eb04 	ldr.w	lr, [sp], #4
 8007818:	b003      	add	sp, #12
 800781a:	4770      	bx	lr
 800781c:	20000074 	.word	0x20000074

08007820 <abort>:
 8007820:	2006      	movs	r0, #6
 8007822:	b508      	push	{r3, lr}
 8007824:	f000 fa02 	bl	8007c2c <raise>
 8007828:	2001      	movs	r0, #1
 800782a:	f7fa ffb0 	bl	800278e <_exit>

0800782e <__sfputc_r>:
 800782e:	6893      	ldr	r3, [r2, #8]
 8007830:	b410      	push	{r4}
 8007832:	3b01      	subs	r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	6093      	str	r3, [r2, #8]
 8007838:	da07      	bge.n	800784a <__sfputc_r+0x1c>
 800783a:	6994      	ldr	r4, [r2, #24]
 800783c:	42a3      	cmp	r3, r4
 800783e:	db01      	blt.n	8007844 <__sfputc_r+0x16>
 8007840:	290a      	cmp	r1, #10
 8007842:	d102      	bne.n	800784a <__sfputc_r+0x1c>
 8007844:	bc10      	pop	{r4}
 8007846:	f000 b933 	b.w	8007ab0 <__swbuf_r>
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	1c58      	adds	r0, r3, #1
 800784e:	6010      	str	r0, [r2, #0]
 8007850:	7019      	strb	r1, [r3, #0]
 8007852:	4608      	mov	r0, r1
 8007854:	bc10      	pop	{r4}
 8007856:	4770      	bx	lr

08007858 <__sfputs_r>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	4606      	mov	r6, r0
 800785c:	460f      	mov	r7, r1
 800785e:	4614      	mov	r4, r2
 8007860:	18d5      	adds	r5, r2, r3
 8007862:	42ac      	cmp	r4, r5
 8007864:	d101      	bne.n	800786a <__sfputs_r+0x12>
 8007866:	2000      	movs	r0, #0
 8007868:	e007      	b.n	800787a <__sfputs_r+0x22>
 800786a:	463a      	mov	r2, r7
 800786c:	4630      	mov	r0, r6
 800786e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007872:	f7ff ffdc 	bl	800782e <__sfputc_r>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	d1f3      	bne.n	8007862 <__sfputs_r+0xa>
 800787a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800787c <_vfiprintf_r>:
 800787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	460d      	mov	r5, r1
 8007882:	4614      	mov	r4, r2
 8007884:	4698      	mov	r8, r3
 8007886:	4606      	mov	r6, r0
 8007888:	b09d      	sub	sp, #116	; 0x74
 800788a:	b118      	cbz	r0, 8007894 <_vfiprintf_r+0x18>
 800788c:	6a03      	ldr	r3, [r0, #32]
 800788e:	b90b      	cbnz	r3, 8007894 <_vfiprintf_r+0x18>
 8007890:	f7fe fab2 	bl	8005df8 <__sinit>
 8007894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	d405      	bmi.n	80078a6 <_vfiprintf_r+0x2a>
 800789a:	89ab      	ldrh	r3, [r5, #12]
 800789c:	059a      	lsls	r2, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_vfiprintf_r+0x2a>
 80078a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078a2:	f7fe fba0 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	071b      	lsls	r3, r3, #28
 80078aa:	d501      	bpl.n	80078b0 <_vfiprintf_r+0x34>
 80078ac:	692b      	ldr	r3, [r5, #16]
 80078ae:	b99b      	cbnz	r3, 80078d8 <_vfiprintf_r+0x5c>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 f93a 	bl	8007b2c <__swsetup_r>
 80078b8:	b170      	cbz	r0, 80078d8 <_vfiprintf_r+0x5c>
 80078ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078bc:	07dc      	lsls	r4, r3, #31
 80078be:	d504      	bpl.n	80078ca <_vfiprintf_r+0x4e>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	b01d      	add	sp, #116	; 0x74
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	89ab      	ldrh	r3, [r5, #12]
 80078cc:	0598      	lsls	r0, r3, #22
 80078ce:	d4f7      	bmi.n	80078c0 <_vfiprintf_r+0x44>
 80078d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078d2:	f7fe fb89 	bl	8005fe8 <__retarget_lock_release_recursive>
 80078d6:	e7f3      	b.n	80078c0 <_vfiprintf_r+0x44>
 80078d8:	2300      	movs	r3, #0
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
 80078dc:	2320      	movs	r3, #32
 80078de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078e2:	2330      	movs	r3, #48	; 0x30
 80078e4:	f04f 0901 	mov.w	r9, #1
 80078e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007a9c <_vfiprintf_r+0x220>
 80078f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078f4:	4623      	mov	r3, r4
 80078f6:	469a      	mov	sl, r3
 80078f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078fc:	b10a      	cbz	r2, 8007902 <_vfiprintf_r+0x86>
 80078fe:	2a25      	cmp	r2, #37	; 0x25
 8007900:	d1f9      	bne.n	80078f6 <_vfiprintf_r+0x7a>
 8007902:	ebba 0b04 	subs.w	fp, sl, r4
 8007906:	d00b      	beq.n	8007920 <_vfiprintf_r+0xa4>
 8007908:	465b      	mov	r3, fp
 800790a:	4622      	mov	r2, r4
 800790c:	4629      	mov	r1, r5
 800790e:	4630      	mov	r0, r6
 8007910:	f7ff ffa2 	bl	8007858 <__sfputs_r>
 8007914:	3001      	adds	r0, #1
 8007916:	f000 80a9 	beq.w	8007a6c <_vfiprintf_r+0x1f0>
 800791a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800791c:	445a      	add	r2, fp
 800791e:	9209      	str	r2, [sp, #36]	; 0x24
 8007920:	f89a 3000 	ldrb.w	r3, [sl]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80a1 	beq.w	8007a6c <_vfiprintf_r+0x1f0>
 800792a:	2300      	movs	r3, #0
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007934:	f10a 0a01 	add.w	sl, sl, #1
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	9307      	str	r3, [sp, #28]
 800793c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007940:	931a      	str	r3, [sp, #104]	; 0x68
 8007942:	4654      	mov	r4, sl
 8007944:	2205      	movs	r2, #5
 8007946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794a:	4854      	ldr	r0, [pc, #336]	; (8007a9c <_vfiprintf_r+0x220>)
 800794c:	f7fe fb4d 	bl	8005fea <memchr>
 8007950:	9a04      	ldr	r2, [sp, #16]
 8007952:	b9d8      	cbnz	r0, 800798c <_vfiprintf_r+0x110>
 8007954:	06d1      	lsls	r1, r2, #27
 8007956:	bf44      	itt	mi
 8007958:	2320      	movmi	r3, #32
 800795a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800795e:	0713      	lsls	r3, r2, #28
 8007960:	bf44      	itt	mi
 8007962:	232b      	movmi	r3, #43	; 0x2b
 8007964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007968:	f89a 3000 	ldrb.w	r3, [sl]
 800796c:	2b2a      	cmp	r3, #42	; 0x2a
 800796e:	d015      	beq.n	800799c <_vfiprintf_r+0x120>
 8007970:	4654      	mov	r4, sl
 8007972:	2000      	movs	r0, #0
 8007974:	f04f 0c0a 	mov.w	ip, #10
 8007978:	9a07      	ldr	r2, [sp, #28]
 800797a:	4621      	mov	r1, r4
 800797c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007980:	3b30      	subs	r3, #48	; 0x30
 8007982:	2b09      	cmp	r3, #9
 8007984:	d94d      	bls.n	8007a22 <_vfiprintf_r+0x1a6>
 8007986:	b1b0      	cbz	r0, 80079b6 <_vfiprintf_r+0x13a>
 8007988:	9207      	str	r2, [sp, #28]
 800798a:	e014      	b.n	80079b6 <_vfiprintf_r+0x13a>
 800798c:	eba0 0308 	sub.w	r3, r0, r8
 8007990:	fa09 f303 	lsl.w	r3, r9, r3
 8007994:	4313      	orrs	r3, r2
 8007996:	46a2      	mov	sl, r4
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	e7d2      	b.n	8007942 <_vfiprintf_r+0xc6>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1d19      	adds	r1, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	9103      	str	r1, [sp, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bfbb      	ittet	lt
 80079a8:	425b      	neglt	r3, r3
 80079aa:	f042 0202 	orrlt.w	r2, r2, #2
 80079ae:	9307      	strge	r3, [sp, #28]
 80079b0:	9307      	strlt	r3, [sp, #28]
 80079b2:	bfb8      	it	lt
 80079b4:	9204      	strlt	r2, [sp, #16]
 80079b6:	7823      	ldrb	r3, [r4, #0]
 80079b8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ba:	d10c      	bne.n	80079d6 <_vfiprintf_r+0x15a>
 80079bc:	7863      	ldrb	r3, [r4, #1]
 80079be:	2b2a      	cmp	r3, #42	; 0x2a
 80079c0:	d134      	bne.n	8007a2c <_vfiprintf_r+0x1b0>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	3402      	adds	r4, #2
 80079c6:	1d1a      	adds	r2, r3, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	9203      	str	r2, [sp, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfb8      	it	lt
 80079d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007aa0 <_vfiprintf_r+0x224>
 80079da:	2203      	movs	r2, #3
 80079dc:	4650      	mov	r0, sl
 80079de:	7821      	ldrb	r1, [r4, #0]
 80079e0:	f7fe fb03 	bl	8005fea <memchr>
 80079e4:	b138      	cbz	r0, 80079f6 <_vfiprintf_r+0x17a>
 80079e6:	2240      	movs	r2, #64	; 0x40
 80079e8:	9b04      	ldr	r3, [sp, #16]
 80079ea:	eba0 000a 	sub.w	r0, r0, sl
 80079ee:	4082      	lsls	r2, r0
 80079f0:	4313      	orrs	r3, r2
 80079f2:	3401      	adds	r4, #1
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fa:	2206      	movs	r2, #6
 80079fc:	4829      	ldr	r0, [pc, #164]	; (8007aa4 <_vfiprintf_r+0x228>)
 80079fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a02:	f7fe faf2 	bl	8005fea <memchr>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d03f      	beq.n	8007a8a <_vfiprintf_r+0x20e>
 8007a0a:	4b27      	ldr	r3, [pc, #156]	; (8007aa8 <_vfiprintf_r+0x22c>)
 8007a0c:	bb1b      	cbnz	r3, 8007a56 <_vfiprintf_r+0x1da>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	3307      	adds	r3, #7
 8007a12:	f023 0307 	bic.w	r3, r3, #7
 8007a16:	3308      	adds	r3, #8
 8007a18:	9303      	str	r3, [sp, #12]
 8007a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1c:	443b      	add	r3, r7
 8007a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a20:	e768      	b.n	80078f4 <_vfiprintf_r+0x78>
 8007a22:	460c      	mov	r4, r1
 8007a24:	2001      	movs	r0, #1
 8007a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a2a:	e7a6      	b.n	800797a <_vfiprintf_r+0xfe>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f04f 0c0a 	mov.w	ip, #10
 8007a32:	4619      	mov	r1, r3
 8007a34:	3401      	adds	r4, #1
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a3e:	3a30      	subs	r2, #48	; 0x30
 8007a40:	2a09      	cmp	r2, #9
 8007a42:	d903      	bls.n	8007a4c <_vfiprintf_r+0x1d0>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0c6      	beq.n	80079d6 <_vfiprintf_r+0x15a>
 8007a48:	9105      	str	r1, [sp, #20]
 8007a4a:	e7c4      	b.n	80079d6 <_vfiprintf_r+0x15a>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	2301      	movs	r3, #1
 8007a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a54:	e7f0      	b.n	8007a38 <_vfiprintf_r+0x1bc>
 8007a56:	ab03      	add	r3, sp, #12
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <_vfiprintf_r+0x230>)
 8007a60:	a904      	add	r1, sp, #16
 8007a62:	f7fd fd7b 	bl	800555c <_printf_float>
 8007a66:	4607      	mov	r7, r0
 8007a68:	1c78      	adds	r0, r7, #1
 8007a6a:	d1d6      	bne.n	8007a1a <_vfiprintf_r+0x19e>
 8007a6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a6e:	07d9      	lsls	r1, r3, #31
 8007a70:	d405      	bmi.n	8007a7e <_vfiprintf_r+0x202>
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	059a      	lsls	r2, r3, #22
 8007a76:	d402      	bmi.n	8007a7e <_vfiprintf_r+0x202>
 8007a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a7a:	f7fe fab5 	bl	8005fe8 <__retarget_lock_release_recursive>
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	065b      	lsls	r3, r3, #25
 8007a82:	f53f af1d 	bmi.w	80078c0 <_vfiprintf_r+0x44>
 8007a86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a88:	e71c      	b.n	80078c4 <_vfiprintf_r+0x48>
 8007a8a:	ab03      	add	r3, sp, #12
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4630      	mov	r0, r6
 8007a92:	4b06      	ldr	r3, [pc, #24]	; (8007aac <_vfiprintf_r+0x230>)
 8007a94:	a904      	add	r1, sp, #16
 8007a96:	f7fe f801 	bl	8005a9c <_printf_i>
 8007a9a:	e7e4      	b.n	8007a66 <_vfiprintf_r+0x1ea>
 8007a9c:	08008123 	.word	0x08008123
 8007aa0:	08008129 	.word	0x08008129
 8007aa4:	0800812d 	.word	0x0800812d
 8007aa8:	0800555d 	.word	0x0800555d
 8007aac:	08007859 	.word	0x08007859

08007ab0 <__swbuf_r>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	460e      	mov	r6, r1
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	b118      	cbz	r0, 8007ac2 <__swbuf_r+0x12>
 8007aba:	6a03      	ldr	r3, [r0, #32]
 8007abc:	b90b      	cbnz	r3, 8007ac2 <__swbuf_r+0x12>
 8007abe:	f7fe f99b 	bl	8005df8 <__sinit>
 8007ac2:	69a3      	ldr	r3, [r4, #24]
 8007ac4:	60a3      	str	r3, [r4, #8]
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	071a      	lsls	r2, r3, #28
 8007aca:	d525      	bpl.n	8007b18 <__swbuf_r+0x68>
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	b31b      	cbz	r3, 8007b18 <__swbuf_r+0x68>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	6922      	ldr	r2, [r4, #16]
 8007ad4:	b2f6      	uxtb	r6, r6
 8007ad6:	1a98      	subs	r0, r3, r2
 8007ad8:	6963      	ldr	r3, [r4, #20]
 8007ada:	4637      	mov	r7, r6
 8007adc:	4283      	cmp	r3, r0
 8007ade:	dc04      	bgt.n	8007aea <__swbuf_r+0x3a>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7ff fdf2 	bl	80076cc <_fflush_r>
 8007ae8:	b9e0      	cbnz	r0, 8007b24 <__swbuf_r+0x74>
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	60a3      	str	r3, [r4, #8]
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	6022      	str	r2, [r4, #0]
 8007af6:	701e      	strb	r6, [r3, #0]
 8007af8:	6962      	ldr	r2, [r4, #20]
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d004      	beq.n	8007b0a <__swbuf_r+0x5a>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	07db      	lsls	r3, r3, #31
 8007b04:	d506      	bpl.n	8007b14 <__swbuf_r+0x64>
 8007b06:	2e0a      	cmp	r6, #10
 8007b08:	d104      	bne.n	8007b14 <__swbuf_r+0x64>
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f7ff fddd 	bl	80076cc <_fflush_r>
 8007b12:	b938      	cbnz	r0, 8007b24 <__swbuf_r+0x74>
 8007b14:	4638      	mov	r0, r7
 8007b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f806 	bl	8007b2c <__swsetup_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d0d5      	beq.n	8007ad0 <__swbuf_r+0x20>
 8007b24:	f04f 37ff 	mov.w	r7, #4294967295
 8007b28:	e7f4      	b.n	8007b14 <__swbuf_r+0x64>
	...

08007b2c <__swsetup_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4b2a      	ldr	r3, [pc, #168]	; (8007bd8 <__swsetup_r+0xac>)
 8007b30:	4605      	mov	r5, r0
 8007b32:	6818      	ldr	r0, [r3, #0]
 8007b34:	460c      	mov	r4, r1
 8007b36:	b118      	cbz	r0, 8007b40 <__swsetup_r+0x14>
 8007b38:	6a03      	ldr	r3, [r0, #32]
 8007b3a:	b90b      	cbnz	r3, 8007b40 <__swsetup_r+0x14>
 8007b3c:	f7fe f95c 	bl	8005df8 <__sinit>
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b46:	0718      	lsls	r0, r3, #28
 8007b48:	d422      	bmi.n	8007b90 <__swsetup_r+0x64>
 8007b4a:	06d9      	lsls	r1, r3, #27
 8007b4c:	d407      	bmi.n	8007b5e <__swsetup_r+0x32>
 8007b4e:	2309      	movs	r3, #9
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	e034      	b.n	8007bc8 <__swsetup_r+0x9c>
 8007b5e:	0758      	lsls	r0, r3, #29
 8007b60:	d512      	bpl.n	8007b88 <__swsetup_r+0x5c>
 8007b62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b64:	b141      	cbz	r1, 8007b78 <__swsetup_r+0x4c>
 8007b66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	d002      	beq.n	8007b74 <__swsetup_r+0x48>
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f7ff f8b6 	bl	8006ce0 <_free_r>
 8007b74:	2300      	movs	r3, #0
 8007b76:	6363      	str	r3, [r4, #52]	; 0x34
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	2300      	movs	r3, #0
 8007b82:	6063      	str	r3, [r4, #4]
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f043 0308 	orr.w	r3, r3, #8
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	6923      	ldr	r3, [r4, #16]
 8007b92:	b94b      	cbnz	r3, 8007ba8 <__swsetup_r+0x7c>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b9e:	d003      	beq.n	8007ba8 <__swsetup_r+0x7c>
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f883 	bl	8007cae <__smakebuf_r>
 8007ba8:	89a0      	ldrh	r0, [r4, #12]
 8007baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bae:	f010 0301 	ands.w	r3, r0, #1
 8007bb2:	d00a      	beq.n	8007bca <__swsetup_r+0x9e>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60a3      	str	r3, [r4, #8]
 8007bb8:	6963      	ldr	r3, [r4, #20]
 8007bba:	425b      	negs	r3, r3
 8007bbc:	61a3      	str	r3, [r4, #24]
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	b943      	cbnz	r3, 8007bd4 <__swsetup_r+0xa8>
 8007bc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bc6:	d1c4      	bne.n	8007b52 <__swsetup_r+0x26>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	0781      	lsls	r1, r0, #30
 8007bcc:	bf58      	it	pl
 8007bce:	6963      	ldrpl	r3, [r4, #20]
 8007bd0:	60a3      	str	r3, [r4, #8]
 8007bd2:	e7f4      	b.n	8007bbe <__swsetup_r+0x92>
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	e7f7      	b.n	8007bc8 <__swsetup_r+0x9c>
 8007bd8:	20000074 	.word	0x20000074

08007bdc <_raise_r>:
 8007bdc:	291f      	cmp	r1, #31
 8007bde:	b538      	push	{r3, r4, r5, lr}
 8007be0:	4604      	mov	r4, r0
 8007be2:	460d      	mov	r5, r1
 8007be4:	d904      	bls.n	8007bf0 <_raise_r+0x14>
 8007be6:	2316      	movs	r3, #22
 8007be8:	6003      	str	r3, [r0, #0]
 8007bea:	f04f 30ff 	mov.w	r0, #4294967295
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007bf2:	b112      	cbz	r2, 8007bfa <_raise_r+0x1e>
 8007bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bf8:	b94b      	cbnz	r3, 8007c0e <_raise_r+0x32>
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 f830 	bl	8007c60 <_getpid_r>
 8007c00:	462a      	mov	r2, r5
 8007c02:	4601      	mov	r1, r0
 8007c04:	4620      	mov	r0, r4
 8007c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0a:	f000 b817 	b.w	8007c3c <_kill_r>
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d00a      	beq.n	8007c28 <_raise_r+0x4c>
 8007c12:	1c59      	adds	r1, r3, #1
 8007c14:	d103      	bne.n	8007c1e <_raise_r+0x42>
 8007c16:	2316      	movs	r3, #22
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	e7e7      	b.n	8007bee <_raise_r+0x12>
 8007c1e:	2400      	movs	r4, #0
 8007c20:	4628      	mov	r0, r5
 8007c22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c26:	4798      	blx	r3
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e7e0      	b.n	8007bee <_raise_r+0x12>

08007c2c <raise>:
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <raise+0xc>)
 8007c2e:	4601      	mov	r1, r0
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	f7ff bfd3 	b.w	8007bdc <_raise_r>
 8007c36:	bf00      	nop
 8007c38:	20000074 	.word	0x20000074

08007c3c <_kill_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4d06      	ldr	r5, [pc, #24]	; (8007c5c <_kill_r+0x20>)
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	4611      	mov	r1, r2
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	f7fa fd90 	bl	800276e <_kill>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	d102      	bne.n	8007c58 <_kill_r+0x1c>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	b103      	cbz	r3, 8007c58 <_kill_r+0x1c>
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000538 	.word	0x20000538

08007c60 <_getpid_r>:
 8007c60:	f7fa bd7e 	b.w	8002760 <_getpid>

08007c64 <__swhatbuf_r>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	460c      	mov	r4, r1
 8007c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6c:	4615      	mov	r5, r2
 8007c6e:	2900      	cmp	r1, #0
 8007c70:	461e      	mov	r6, r3
 8007c72:	b096      	sub	sp, #88	; 0x58
 8007c74:	da0c      	bge.n	8007c90 <__swhatbuf_r+0x2c>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c7e:	bf0c      	ite	eq
 8007c80:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c84:	2340      	movne	r3, #64	; 0x40
 8007c86:	2000      	movs	r0, #0
 8007c88:	6031      	str	r1, [r6, #0]
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	b016      	add	sp, #88	; 0x58
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	466a      	mov	r2, sp
 8007c92:	f000 f849 	bl	8007d28 <_fstat_r>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	dbed      	blt.n	8007c76 <__swhatbuf_r+0x12>
 8007c9a:	9901      	ldr	r1, [sp, #4]
 8007c9c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ca0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ca4:	4259      	negs	r1, r3
 8007ca6:	4159      	adcs	r1, r3
 8007ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cac:	e7eb      	b.n	8007c86 <__swhatbuf_r+0x22>

08007cae <__smakebuf_r>:
 8007cae:	898b      	ldrh	r3, [r1, #12]
 8007cb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cb2:	079d      	lsls	r5, r3, #30
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	d507      	bpl.n	8007cca <__smakebuf_r+0x1c>
 8007cba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	6123      	str	r3, [r4, #16]
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	6163      	str	r3, [r4, #20]
 8007cc6:	b002      	add	sp, #8
 8007cc8:	bd70      	pop	{r4, r5, r6, pc}
 8007cca:	466a      	mov	r2, sp
 8007ccc:	ab01      	add	r3, sp, #4
 8007cce:	f7ff ffc9 	bl	8007c64 <__swhatbuf_r>
 8007cd2:	9900      	ldr	r1, [sp, #0]
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7ff f872 	bl	8006dc0 <_malloc_r>
 8007cdc:	b948      	cbnz	r0, 8007cf2 <__smakebuf_r+0x44>
 8007cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce2:	059a      	lsls	r2, r3, #22
 8007ce4:	d4ef      	bmi.n	8007cc6 <__smakebuf_r+0x18>
 8007ce6:	f023 0303 	bic.w	r3, r3, #3
 8007cea:	f043 0302 	orr.w	r3, r3, #2
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	e7e3      	b.n	8007cba <__smakebuf_r+0xc>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	6020      	str	r0, [r4, #0]
 8007cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	9b00      	ldr	r3, [sp, #0]
 8007cfe:	6120      	str	r0, [r4, #16]
 8007d00:	6163      	str	r3, [r4, #20]
 8007d02:	9b01      	ldr	r3, [sp, #4]
 8007d04:	b15b      	cbz	r3, 8007d1e <__smakebuf_r+0x70>
 8007d06:	4630      	mov	r0, r6
 8007d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d0c:	f000 f81e 	bl	8007d4c <_isatty_r>
 8007d10:	b128      	cbz	r0, 8007d1e <__smakebuf_r+0x70>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f023 0303 	bic.w	r3, r3, #3
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	431d      	orrs	r5, r3
 8007d22:	81a5      	strh	r5, [r4, #12]
 8007d24:	e7cf      	b.n	8007cc6 <__smakebuf_r+0x18>
	...

08007d28 <_fstat_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4d06      	ldr	r5, [pc, #24]	; (8007d48 <_fstat_r+0x20>)
 8007d2e:	4604      	mov	r4, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	4611      	mov	r1, r2
 8007d34:	602b      	str	r3, [r5, #0]
 8007d36:	f7fa fd5c 	bl	80027f2 <_fstat>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	d102      	bne.n	8007d44 <_fstat_r+0x1c>
 8007d3e:	682b      	ldr	r3, [r5, #0]
 8007d40:	b103      	cbz	r3, 8007d44 <_fstat_r+0x1c>
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	bd38      	pop	{r3, r4, r5, pc}
 8007d46:	bf00      	nop
 8007d48:	20000538 	.word	0x20000538

08007d4c <_isatty_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4d05      	ldr	r5, [pc, #20]	; (8007d68 <_isatty_r+0x1c>)
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7fa fd5a 	bl	8002810 <_isatty>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_isatty_r+0x1a>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_isatty_r+0x1a>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20000538 	.word	0x20000538

08007d6c <_init>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr

08007d78 <_fini>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr
