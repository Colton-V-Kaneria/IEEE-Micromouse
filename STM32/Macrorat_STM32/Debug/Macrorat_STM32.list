
Macrorat_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004378  08004378  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004378  08004378  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004378  08004378  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  08004390  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004390  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9b2  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eaf  00000000  00000000  0002aa2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a6  00000000  00000000  0002d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001828f  00000000  00000000  0002dcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb81  00000000  00000000  00045f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d630  00000000  00000000  00052ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fa0  00000000  00000000  000e0108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000e30a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004320 	.word	0x08004320

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004320 	.word	0x08004320

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__aeabi_f2iz>:
 8000e98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ea0:	d30f      	bcc.n	8000ec2 <__aeabi_f2iz+0x2a>
 8000ea2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ea6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eaa:	d90d      	bls.n	8000ec8 <__aeabi_f2iz+0x30>
 8000eac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000eb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ebc:	bf18      	it	ne
 8000ebe:	4240      	negne	r0, r0
 8000ec0:	4770      	bx	lr
 8000ec2:	f04f 0000 	mov.w	r0, #0
 8000ec6:	4770      	bx	lr
 8000ec8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ecc:	d101      	bne.n	8000ed2 <__aeabi_f2iz+0x3a>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	d105      	bne.n	8000ede <__aeabi_f2iz+0x46>
 8000ed2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ed6:	bf08      	it	eq
 8000ed8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000edc:	4770      	bx	lr
 8000ede:	f04f 0000 	mov.w	r0, #0
 8000ee2:	4770      	bx	lr

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fdfe 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f826 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f9ca 	bl	8001288 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f8bc 	bl	8001070 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ef8:	f000 f87c 	bl	8000ff4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000efc:	f000 f91c 	bl	8001138 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f00:	f000 f96e 	bl	80011e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <main+0x4c>)
 8000f06:	f002 fadf 	bl	80034c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <main+0x4c>)
 8000f0e:	f002 fb7d 	bl	800360c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f12:	210c      	movs	r1, #12
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <main+0x4c>)
 8000f16:	f002 fb79 	bl	800360c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000f1a:	213c      	movs	r1, #60	; 0x3c
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <main+0x50>)
 8000f1e:	f002 fcb9 	bl	8003894 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000f22:	213c      	movs	r1, #60	; 0x3c
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <main+0x54>)
 8000f26:	f002 fcb5 	bl	8003894 <HAL_TIM_Encoder_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // IR_test();
	  //motor_voltage_value();
	 motor_test();
 8000f2a:	f000 fb9b 	bl	8001664 <motor_test>
 8000f2e:	e7fc      	b.n	8000f2a <main+0x46>
 8000f30:	2000005c 	.word	0x2000005c
 8000f34:	200000a4 	.word	0x200000a4
 8000f38:	200000ec 	.word	0x200000ec

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f46:	2228      	movs	r2, #40	; 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 f9bc 	bl	80042c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fd30 	bl	80029f8 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f9e:	f000 f9f3 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000fb4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 ff9b 	bl	8002efc <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fcc:	f000 f9dc 	bl	8001388 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 f908 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fe6:	f000 f9cf 	bl	8001388 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_ADC1_Init+0x74>)
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <MX_ADC1_Init+0x78>)
 8001008:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_ADC1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_ADC1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_ADC1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_ADC1_Init+0x74>)
 800101e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001022:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_ADC1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_ADC1_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_ADC1_Init+0x74>)
 8001032:	f000 fddf 	bl	8001bf4 <HAL_ADC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800103c:	f000 f9a4 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001040:	2309      	movs	r3, #9
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001044:	2301      	movs	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC1_Init+0x74>)
 8001052:	f001 f893 	bl	800217c <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800105c:	f000 f994 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000002c 	.word	0x2000002c
 800106c:	40012400 	.word	0x40012400

08001070 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <MX_TIM2_Init+0xc4>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_TIM2_Init+0xc4>)
 800109c:	2248      	movs	r2, #72	; 0x48
 800109e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_TIM2_Init+0xc4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_TIM2_Init+0xc4>)
 80010a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_TIM2_Init+0xc4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_TIM2_Init+0xc4>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ba:	481e      	ldr	r0, [pc, #120]	; (8001134 <MX_TIM2_Init+0xc4>)
 80010bc:	f002 fa56 	bl	800356c <HAL_TIM_PWM_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010c6:	f000 f95f 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	4619      	mov	r1, r3
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <MX_TIM2_Init+0xc4>)
 80010da:	f003 f885 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010e4:	f000 f950 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e8:	2360      	movs	r3, #96	; 0x60
 80010ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2208      	movs	r2, #8
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_TIM2_Init+0xc4>)
 8001100:	f002 fd7e 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800110a:	f000 f93d 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	220c      	movs	r2, #12
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_TIM2_Init+0xc4>)
 8001116:	f002 fd73 	bl	8003c00 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001120:	f000 f932 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <MX_TIM2_Init+0xc4>)
 8001126:	f000 fc3d 	bl	80019a4 <HAL_TIM_MspPostInit>

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000005c 	.word	0x2000005c

08001138 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2224      	movs	r2, #36	; 0x24
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f8be 	bl	80042c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <MX_TIM3_Init+0xa0>)
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <MX_TIM3_Init+0xa4>)
 8001158:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_TIM3_Init+0xa0>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_TIM3_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_TIM3_Init+0xa0>)
 8001168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_TIM3_Init+0xa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_TIM3_Init+0xa0>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800117a:	2303      	movs	r3, #3
 800117c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_TIM3_Init+0xa0>)
 80011a6:	f002 fad3 	bl	8003750 <HAL_TIM_Encoder_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011b0:	f000 f8ea 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_TIM3_Init+0xa0>)
 80011c2:	f003 f811 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80011cc:	f000 f8dc 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3730      	adds	r7, #48	; 0x30
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000a4 	.word	0x200000a4
 80011dc:	40000400 	.word	0x40000400

080011e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2224      	movs	r2, #36	; 0x24
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 f86a 	bl	80042c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_TIM4_Init+0xa0>)
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <MX_TIM4_Init+0xa4>)
 8001200:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_TIM4_Init+0xa0>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_TIM4_Init+0xa0>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM4_Init+0xa0>)
 8001210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001214:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_TIM4_Init+0xa0>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_TIM4_Init+0xa0>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001222:	2303      	movs	r3, #3
 8001224:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001226:	2302      	movs	r3, #2
 8001228:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800123a:	2301      	movs	r3, #1
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_TIM4_Init+0xa0>)
 800124e:	f002 fa7f 	bl	8003750 <HAL_TIM_Encoder_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001258:	f000 f896 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_TIM4_Init+0xa0>)
 800126a:	f002 ffbd 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001274:	f000 f888 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000ec 	.word	0x200000ec
 8001284:	40000800 	.word	0x40000800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <MX_GPIO_Init+0xb8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012a2:	f043 0320 	orr.w	r3, r3, #32
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_GPIO_Init+0xb8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_BWD_Pin
 80012e4:	2200      	movs	r2, #0
 80012e6:	f64f 4120 	movw	r1, #64544	; 0xfc20
 80012ea:	4816      	ldr	r0, [pc, #88]	; (8001344 <MX_GPIO_Init+0xbc>)
 80012ec:	f001 fb6c 	bl	80029c8 <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_FWD_Pin|EMIT_FR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_GPIO_Init+0xc0>)
 80012f8:	f001 fb66 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_BWD_Pin
                           ML_BWD_Pin MR_FWD_Pin EMIT_FR_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_BWD_Pin
 80012fc:	f64f 4320 	movw	r3, #64544	; 0xfc20
 8001300:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_FWD_Pin|EMIT_FR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <MX_GPIO_Init+0xbc>)
 8001316:	f001 f9d3 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ML_FWD_Pin */
  GPIO_InitStruct.Pin = ML_FWD_Pin;
 800131a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2302      	movs	r3, #2
 800132a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_GPIO_Init+0xc0>)
 8001334:	f001 f9c4 	bl	80026c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40010800 	.word	0x40010800

0800134c <ADC1_Select_CH1>:

/* USER CODE BEGIN 4 */
void ADC1_Select_CH1(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 800135c:	2301      	movs	r3, #1
 800135e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001360:	2301      	movs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001364:	2301      	movs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <ADC1_Select_CH1+0x38>)
 800136e:	f000 ff05 	bl	800217c <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <ADC1_Select_CH1+0x30>
	{
		Error_Handler();
 8001378:	f000 f806 	bl	8001388 <Error_Handler>
	}
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000002c 	.word	0x2000002c

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <calc_PWM>:
int initial_PWM = 0;
int v_motor = 4;
int motor_PWM = 0;

int calc_PWM(float voltage)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	return (voltage/v_batt)*2047;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <calc_PWM+0x30>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fcdc 	bl	8000d60 <__aeabi_fdiv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4907      	ldr	r1, [pc, #28]	; (80013c8 <calc_PWM+0x34>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fc23 	bl	8000bf8 <__aeabi_fmul>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fd6f 	bl	8000e98 <__aeabi_f2iz>
 80013ba:	4603      	mov	r3, r0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000154 	.word	0x20000154
 80013c8:	44ffe000 	.word	0x44ffe000

080013cc <calc_distance>:

int calc_distance()
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	return (d_L + d_R)/2;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <calc_distance+0x1c>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <calc_distance+0x20>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	0fda      	lsrs	r2, r3, #31
 80013dc:	4413      	add	r3, r2
 80013de:	105b      	asrs	r3, r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000144 	.word	0x20000144
 80013ec:	20000148 	.word	0x20000148

080013f0 <calc_angle>:

int calc_angle()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	int angle = (int)((d_R - d_L)/(2.0 * RW) * (180.0/M_PI)) % 360;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <calc_angle+0x90>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <calc_angle+0x94>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe fff7 	bl	80003f4 <__aeabi_i2d>
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <calc_angle+0x98>)
 800140c:	f7ff f986 	bl	800071c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	a317      	add	r3, pc, #92	; (adr r3, 8001478 <calc_angle+0x88>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f853 	bl	80004c8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fa5f 	bl	80008ec <__aeabi_d2iz>
 800142e:	4603      	mov	r3, r0
 8001430:	4a16      	ldr	r2, [pc, #88]	; (800148c <calc_angle+0x9c>)
 8001432:	fb82 1203 	smull	r1, r2, r2, r3
 8001436:	441a      	add	r2, r3
 8001438:	1211      	asrs	r1, r2, #8
 800143a:	17da      	asrs	r2, r3, #31
 800143c:	1a8a      	subs	r2, r1, r2
 800143e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001442:	fb01 f202 	mul.w	r2, r1, r2
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	607b      	str	r3, [r7, #4]

	// These next statements ensure the result is between -180 and 180
	if (angle > 180)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2bb4      	cmp	r3, #180	; 0xb4
 800144e:	dd04      	ble.n	800145a <calc_angle+0x6a>
	{
		angle -= 360;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	e007      	b.n	800146a <calc_angle+0x7a>
	}
	else if (angle < -180)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001460:	da03      	bge.n	800146a <calc_angle+0x7a>
	{
		angle += 360;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001468:	607b      	str	r3, [r7, #4]
	}

	return angle;
 800146a:	687b      	ldr	r3, [r7, #4]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	f3af 8000 	nop.w
 8001478:	1a63c1f8 	.word	0x1a63c1f8
 800147c:	404ca5dc 	.word	0x404ca5dc
 8001480:	20000148 	.word	0x20000148
 8001484:	20000144 	.word	0x20000144
 8001488:	40548000 	.word	0x40548000
 800148c:	b60b60b7 	.word	0xb60b60b7

08001490 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    // this is the left encoder timer
    if (htim->Instance == TIM3) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d13b      	bne.n	800151a <HAL_TIM_IC_CaptureCallback+0x8a>
        raw_count_left = __HAL_TIM_GET_COUNTER(htim);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b42      	ldr	r3, [pc, #264]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80014ac:	801a      	strh	r2, [r3, #0]
        enc_left -= (int16_t)(raw_count_left - prev_count_left);
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a40      	ldr	r2, [pc, #256]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80014b4:	8811      	ldrh	r1, [r2, #0]
 80014b6:	4a41      	ldr	r2, [pc, #260]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014b8:	8812      	ldrh	r2, [r2, #0]
 80014ba:	1a8a      	subs	r2, r1, r2
 80014bc:	b292      	uxth	r2, r2
 80014be:	b212      	sxth	r2, r2
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	4a3d      	ldr	r2, [pc, #244]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014c4:	6013      	str	r3, [r2, #0]
		d_L = (enc_left / 360.0) * (M_PI * diameter);
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe ff92 	bl	80003f4 <__aeabi_i2d>
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014d6:	f7ff f921 	bl	800071c <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	a331      	add	r3, pc, #196	; (adr r3, 80015a8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7fe ffee 	bl	80004c8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff f9fa 	bl	80008ec <__aeabi_d2iz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80014fc:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();
 80014fe:	f7ff ff65 	bl	80013cc <calc_distance>
 8001502:	4603      	mov	r3, r0
 8001504:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001506:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 8001508:	f7ff ff72 	bl	80013f0 <calc_angle>
 800150c:	4603      	mov	r3, r0
 800150e:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001510:	6013      	str	r3, [r2, #0]
        prev_count_left = raw_count_left;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001518:	801a      	strh	r2, [r3, #0]

    }
    if (htim->Instance == TIM4) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a2c      	ldr	r2, [pc, #176]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d13b      	bne.n	800159c <HAL_TIM_IC_CaptureCallback+0x10c>
        raw_count_right = __HAL_TIM_GET_COUNTER(htim);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800152e:	801a      	strh	r2, [r3, #0]
        enc_right -= (int16_t)(raw_count_right - prev_count_right);
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001536:	8811      	ldrh	r1, [r2, #0]
 8001538:	4a28      	ldr	r2, [pc, #160]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x14c>)
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	1a8a      	subs	r2, r1, r2
 800153e:	b292      	uxth	r2, r2
 8001540:	b212      	sxth	r2, r2
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001546:	6013      	str	r3, [r2, #0]
		d_R = (enc_right / 360.0) * (M_PI * diameter);
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff51 	bl	80003f4 <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001558:	f7ff f8e0 	bl	800071c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	a310      	add	r3, pc, #64	; (adr r3, 80015a8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe ffad 	bl	80004c8 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff f9b9 	bl	80008ec <__aeabi_d2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800157e:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();
 8001580:	f7ff ff24 	bl	80013cc <calc_distance>
 8001584:	4603      	mov	r3, r0
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001588:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 800158a:	f7ff ff31 	bl	80013f0 <calc_angle>
 800158e:	4603      	mov	r3, r0
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001592:	6013      	str	r3, [r2, #0]
        prev_count_right = raw_count_right;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x14c>)
 800159a:	801a      	strh	r2, [r3, #0]
    }
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	2ee64e81 	.word	0x2ee64e81
 80015ac:	4059eb0b 	.word	0x4059eb0b
 80015b0:	40000400 	.word	0x40000400
 80015b4:	2000013c 	.word	0x2000013c
 80015b8:	20000134 	.word	0x20000134
 80015bc:	20000140 	.word	0x20000140
 80015c0:	40768000 	.word	0x40768000
 80015c4:	20000144 	.word	0x20000144
 80015c8:	2000014c 	.word	0x2000014c
 80015cc:	20000150 	.word	0x20000150
 80015d0:	40000800 	.word	0x40000800
 80015d4:	2000013e 	.word	0x2000013e
 80015d8:	20000138 	.word	0x20000138
 80015dc:	20000142 	.word	0x20000142
 80015e0:	20000148 	.word	0x20000148
 80015e4:	00000000 	.word	0x00000000

080015e8 <calc_v_batt>:


float calc_v_batt()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	ADC1_Select_CH1();
 80015ec:	f7ff feae 	bl	800134c <ADC1_Select_CH1>

	HAL_ADC_Start(&hadc1);
 80015f0:	4819      	ldr	r0, [pc, #100]	; (8001658 <calc_v_batt+0x70>)
 80015f2:	f000 fbd7 	bl	8001da4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015f6:	f04f 31ff 	mov.w	r1, #4294967295
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <calc_v_batt+0x70>)
 80015fc:	f000 fcac 	bl	8001f58 <HAL_ADC_PollForConversion>
	battery_reading = HAL_ADC_GetValue(&hadc1);
 8001600:	4815      	ldr	r0, [pc, #84]	; (8001658 <calc_v_batt+0x70>)
 8001602:	f000 fdaf 	bl	8002164 <HAL_ADC_GetValue>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <calc_v_batt+0x74>)
 800160c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800160e:	4812      	ldr	r0, [pc, #72]	; (8001658 <calc_v_batt+0x70>)
 8001610:	f000 fc76 	bl	8001f00 <HAL_ADC_Stop>

	// multiply by ratio to convert to V, then multiply by 3
    return battery_reading * v_ratio * 3;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <calc_v_batt+0x74>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe feeb 	bl	80003f4 <__aeabi_i2d>
 800161e:	a30c      	add	r3, pc, #48	; (adr r3, 8001650 <calc_v_batt+0x68>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f87a 	bl	800071c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <calc_v_batt+0x78>)
 8001636:	f7fe ff47 	bl	80004c8 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff f97b 	bl	800093c <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0

}
 8001648:	4618      	mov	r0, r3
 800164a:	bd80      	pop	{r7, pc}
 800164c:	f3af 8000 	nop.w
 8001650:	00000000 	.word	0x00000000
 8001654:	4092d800 	.word	0x4092d800
 8001658:	2000002c 	.word	0x2000002c
 800165c:	20000158 	.word	0x20000158
 8001660:	40080000 	.word	0x40080000

08001664 <motor_test>:


void motor_test()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

	  v_batt = calc_v_batt();		// variables for live expressions
 8001668:	f7ff ffbe 	bl	80015e8 <calc_v_batt>
 800166c:	4603      	mov	r3, r0
 800166e:	4a33      	ldr	r2, [pc, #204]	; (800173c <motor_test+0xd8>)
 8001670:	6013      	str	r3, [r2, #0]
	  initial_PWM = calc_PWM(min_v); // calculate PWM needed to set motors in motion
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <motor_test+0xdc>)
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fe8d 	bl	8001394 <calc_PWM>
 800167a:	4603      	mov	r3, r0
 800167c:	4a31      	ldr	r2, [pc, #196]	; (8001744 <motor_test+0xe0>)
 800167e:	6013      	str	r3, [r2, #0]

	  TIM2->CCR4 = initial_PWM; // right motor
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <motor_test+0xe0>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM2->CCR3 = initial_PWM; // left motor
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <motor_test+0xe0>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001692:	63da      	str	r2, [r3, #60]	; 0x3c

	  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 1);	// spin both motors forward
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	482b      	ldr	r0, [pc, #172]	; (8001748 <motor_test+0xe4>)
 800169c:	f001 f994 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a6:	4829      	ldr	r0, [pc, #164]	; (800174c <motor_test+0xe8>)
 80016a8:	f001 f98e 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b2:	4826      	ldr	r0, [pc, #152]	; (800174c <motor_test+0xe8>)
 80016b4:	f001 f988 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016be:	4823      	ldr	r0, [pc, #140]	; (800174c <motor_test+0xe8>)
 80016c0:	f001 f982 	bl	80029c8 <HAL_GPIO_WritePin>

	  HAL_Delay(35);
 80016c4:	2023      	movs	r0, #35	; 0x23
 80016c6:	f000 fa71 	bl	8001bac <HAL_Delay>

	  v_batt = calc_v_batt();		// variables for live expressions
 80016ca:	f7ff ff8d 	bl	80015e8 <calc_v_batt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <motor_test+0xd8>)
 80016d2:	6013      	str	r3, [r2, #0]
	  motor_PWM = calc_PWM(v_motor);
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <motor_test+0xec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fa39 	bl	8000b50 <__aeabi_i2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe57 	bl	8001394 <calc_PWM>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <motor_test+0xf0>)
 80016ea:	6013      	str	r3, [r2, #0]

	  TIM2->CCR4 = motor_PWM;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <motor_test+0xf0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM2->CCR3 = motor_PWM;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <motor_test+0xf0>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c

	  HAL_Delay(60000);
 8001700:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001704:	f000 fa52 	bl	8001bac <HAL_Delay>

	  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, 0);	// stop both motors
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <motor_test+0xe4>)
 8001710:	f001 f95a 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <motor_test+0xe8>)
 800171c:	f001 f954 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <motor_test+0xe8>)
 8001728:	f001 f94e 	bl	80029c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <motor_test+0xe8>)
 8001734:	f001 f948 	bl	80029c8 <HAL_GPIO_WritePin>


}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000154 	.word	0x20000154
 8001740:	40200000 	.word	0x40200000
 8001744:	2000015c 	.word	0x2000015c
 8001748:	40010800 	.word	0x40010800
 800174c:	40010c00 	.word	0x40010c00
 8001750:	20000000 	.word	0x20000000
 8001754:	20000160 	.word	0x20000160

08001758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_MspInit+0x5c>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_MspInit+0x5c>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6193      	str	r3, [r2, #24]
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_MspInit+0x5c>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x5c>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_MspInit+0x5c>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_MspInit+0x5c>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_MspInit+0x60>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_MspInit+0x60>)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000

080017bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <HAL_ADC_MspInit+0x98>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d137      	bne.n	800184c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_ADC_MspInit+0x9c>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_Meter_Pin|RECIV_FR_Pin|RECIV_R_Pin;
 8001824:	2332      	movs	r3, #50	; 0x32
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001828:	2303      	movs	r3, #3
 800182a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	4619      	mov	r1, r3
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <HAL_ADC_MspInit+0xa0>)
 8001834:	f000 ff44 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 8001838:	2303      	movs	r3, #3
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183c:	2303      	movs	r3, #3
 800183e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <HAL_ADC_MspInit+0xa4>)
 8001848:	f000 ff3a 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40012400 	.word	0x40012400
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800
 8001860:	40010c00 	.word	0x40010c00

08001864 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d113      	bne.n	800189e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_TIM_PWM_MspInit+0x44>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <HAL_TIM_PWM_MspInit+0x44>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_TIM_PWM_MspInit+0x44>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	201c      	movs	r0, #28
 8001894:	f000 fedd 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001898:	201c      	movs	r0, #28
 800189a:	f000 fef6 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_TIM_Encoder_MspInit+0xe4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d12c      	bne.n	8001926 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	4a30      	ldr	r2, [pc, #192]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	61d3      	str	r3, [r2, #28]
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 80018fc:	23c0      	movs	r3, #192	; 0xc0
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	4619      	mov	r1, r3
 800190e:	4822      	ldr	r0, [pc, #136]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001910:	f000 fed6 	bl	80026c0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	201d      	movs	r0, #29
 800191a:	f000 fe9a 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800191e:	201d      	movs	r0, #29
 8001920:	f000 feb3 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001924:	e030      	b.n	8001988 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_TIM_Encoder_MspInit+0xf0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12b      	bne.n	8001988 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	61d3      	str	r3, [r2, #28]
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8001960:	23c0      	movs	r3, #192	; 0xc0
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001974:	f000 fea4 	bl	80026c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	201e      	movs	r0, #30
 800197e:	f000 fe68 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001982:	201e      	movs	r0, #30
 8001984:	f000 fe81 	bl	800268a <HAL_NVIC_EnableIRQ>
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40000400 	.word	0x40000400
 8001994:	40021000 	.word	0x40021000
 8001998:	40010800 	.word	0x40010800
 800199c:	40000800 	.word	0x40000800
 80019a0:	40010c00 	.word	0x40010c00

080019a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c2:	d117      	bne.n	80019f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_TIM_MspPostInit+0x58>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_TIM_MspPostInit+0x58>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_TIM_MspPostInit+0x58>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 80019dc:	230c      	movs	r3, #12
 80019de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	4804      	ldr	r0, [pc, #16]	; (8001a00 <HAL_TIM_MspPostInit+0x5c>)
 80019f0:	f000 fe66 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4a:	f000 f893 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM2_IRQHandler+0x10>)
 8001a5a:	f001 ffc9 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000005c 	.word	0x2000005c

08001a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM3_IRQHandler+0x10>)
 8001a6e:	f001 ffbf 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200000a4 	.word	0x200000a4

08001a7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM4_IRQHandler+0x10>)
 8001a82:	f001 ffb5 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000ec 	.word	0x200000ec

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff fff8 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa2:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ab8:	4c09      	ldr	r4, [pc, #36]	; (8001ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f002 fc07 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7ff fa0b 	bl	8000ee4 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ad8:	08004380 	.word	0x08004380
  ldr r2, =_sbss
 8001adc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ae0:	20000168 	.word	0x20000168

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 fd9f 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fe28 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fdb7 	bl	80026a6 <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 fd7f 	bl	8002652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000164 	.word	0x20000164

08001b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000164 	.word	0x20000164

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffe0 	bl	8001b98 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0be      	b.n	8001d94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fdc2 	bl	80017bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fbf1 	bl	8002420 <ADC_ConversionStop_Disable>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8099 	bne.w	8001d82 <HAL_ADC_Init+0x18e>
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 8095 	bne.w	8001d82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c60:	f023 0302 	bic.w	r3, r3, #2
 8001c64:	f043 0202 	orr.w	r2, r3, #2
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7b1b      	ldrb	r3, [r3, #12]
 8001c7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8c:	d003      	beq.n	8001c96 <HAL_ADC_Init+0xa2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_ADC_Init+0xa8>
 8001c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9a:	e000      	b.n	8001c9e <HAL_ADC_Init+0xaa>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7d1b      	ldrb	r3, [r3, #20]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d119      	bne.n	8001ce0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7b1b      	ldrb	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	035a      	lsls	r2, r3, #13
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f043 0220 	orr.w	r2, r3, #32
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_ADC_Init+0x1a8>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d10:	d003      	beq.n	8001d1a <HAL_ADC_Init+0x126>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d104      	bne.n	8001d24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	051b      	lsls	r3, r3, #20
 8001d22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_ADC_Init+0x1ac>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d5e:	e018      	b.n	8001d92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	f023 0312 	bic.w	r3, r3, #18
 8001d68:	f043 0210 	orr.w	r2, r3, #16
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d80:	e007      	b.n	8001d92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	ffe1f7fd 	.word	0xffe1f7fd
 8001da0:	ff1f0efe 	.word	0xff1f0efe

08001da4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_Start+0x1a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e098      	b.n	8001ef0 <HAL_ADC_Start+0x14c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fad0 	bl	800236c <ADC_Enable>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 8087 	bne.w	8001ee6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a41      	ldr	r2, [pc, #260]	; (8001ef8 <HAL_ADC_Start+0x154>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_Start+0x5e>
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_ADC_Start+0x158>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d026      	beq.n	8001e6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e2c:	e01d      	b.n	8001e6a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <HAL_ADC_Start+0x158>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_ADC_Start+0xaa>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_ADC_Start+0x154>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10d      	bne.n	8001e6a <HAL_ADC_Start+0xc6>
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_ADC_Start+0x158>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f023 0206 	bic.w	r2, r3, #6
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e82:	e002      	b.n	8001e8a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0202 	mvn.w	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ea6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001eaa:	d113      	bne.n	8001ed4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001eb0:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_ADC_Start+0x154>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_ADC_Start+0x158>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d108      	bne.n	8001ed4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	e00c      	b.n	8001eee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	e003      	b.n	8001eee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40012800 	.word	0x40012800
 8001efc:	40012400 	.word	0x40012400

08001f00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_Stop+0x1a>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e01a      	b.n	8001f50 <HAL_ADC_Stop+0x50>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fa7c 	bl	8002420 <ADC_ConversionStop_Disable>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f043 0201 	orr.w	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f6e:	f7ff fe13 	bl	8001b98 <HAL_GetTick>
 8001f72:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f043 0220 	orr.w	r2, r3, #32
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0d3      	b.n	8002142 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d131      	bne.n	800200c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d12a      	bne.n	800200c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fb6:	e021      	b.n	8001ffc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d01d      	beq.n	8001ffc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_ADC_PollForConversion+0x7e>
 8001fc6:	f7ff fde7 	bl	8001b98 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d212      	bcs.n	8001ffc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0a2      	b.n	8002142 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0d6      	beq.n	8001fb8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800200a:	e070      	b.n	80020ee <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800200c:	4b4f      	ldr	r3, [pc, #316]	; (800214c <HAL_ADC_PollForConversion+0x1f4>)
 800200e:	681c      	ldr	r4, [r3, #0]
 8002010:	2002      	movs	r0, #2
 8002012:	f001 f9a3 	bl	800335c <HAL_RCCEx_GetPeriphCLKFreq>
 8002016:	4603      	mov	r3, r0
 8002018:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6919      	ldr	r1, [r3, #16]
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <HAL_ADC_PollForConversion+0x1f8>)
 8002024:	400b      	ands	r3, r1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_ADC_PollForConversion+0x104>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68d9      	ldr	r1, [r3, #12]
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_ADC_PollForConversion+0x1fc>)
 8002032:	400b      	ands	r3, r1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d111      	bne.n	800205c <HAL_ADC_PollForConversion+0x104>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_ADC_PollForConversion+0x200>)
 8002040:	400b      	ands	r3, r1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_ADC_PollForConversion+0x100>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68d9      	ldr	r1, [r3, #12]
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_ADC_PollForConversion+0x204>)
 800204e:	400b      	ands	r3, r1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_PollForConversion+0x100>
 8002054:	2314      	movs	r3, #20
 8002056:	e020      	b.n	800209a <HAL_ADC_PollForConversion+0x142>
 8002058:	2329      	movs	r3, #41	; 0x29
 800205a:	e01e      	b.n	800209a <HAL_ADC_PollForConversion+0x142>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_ADC_PollForConversion+0x200>)
 8002064:	400b      	ands	r3, r1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_ADC_PollForConversion+0x120>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68d9      	ldr	r1, [r3, #12]
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_ADC_PollForConversion+0x204>)
 8002072:	400b      	ands	r3, r1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00d      	beq.n	8002094 <HAL_ADC_PollForConversion+0x13c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_ADC_PollForConversion+0x208>)
 8002080:	400b      	ands	r3, r1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_ADC_PollForConversion+0x140>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_ADC_PollForConversion+0x208>)
 800208e:	400b      	ands	r3, r1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_PollForConversion+0x140>
 8002094:	2354      	movs	r3, #84	; 0x54
 8002096:	e000      	b.n	800209a <HAL_ADC_PollForConversion+0x142>
 8002098:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020a0:	e021      	b.n	80020e6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d01a      	beq.n	80020e0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_ADC_PollForConversion+0x168>
 80020b0:	f7ff fd72 	bl	8001b98 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d20f      	bcs.n	80020e0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d90b      	bls.n	80020e0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	f043 0204 	orr.w	r2, r3, #4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e030      	b.n	8002142 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d8d9      	bhi.n	80020a2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0212 	mvn.w	r2, #18
 80020f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800210e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002112:	d115      	bne.n	8002140 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	bf00      	nop
 800214c:	20000004 	.word	0x20000004
 8002150:	24924924 	.word	0x24924924
 8002154:	00924924 	.word	0x00924924
 8002158:	12492492 	.word	0x12492492
 800215c:	00492492 	.word	0x00492492
 8002160:	00249249 	.word	0x00249249

08002164 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x20>
 8002198:	2302      	movs	r3, #2
 800219a:	e0dc      	b.n	8002356 <HAL_ADC_ConfigChannel+0x1da>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d81c      	bhi.n	80021e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3b05      	subs	r3, #5
 80021be:	221f      	movs	r2, #31
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4019      	ands	r1, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b05      	subs	r3, #5
 80021d8:	fa00 f203 	lsl.w	r2, r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34
 80021e4:	e03c      	b.n	8002260 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d81c      	bhi.n	8002228 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b23      	subs	r3, #35	; 0x23
 8002200:	221f      	movs	r2, #31
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	4019      	ands	r1, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b23      	subs	r3, #35	; 0x23
 800221a:	fa00 f203 	lsl.w	r2, r0, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
 8002226:	e01b      	b.n	8002260 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b41      	subs	r3, #65	; 0x41
 800223a:	221f      	movs	r2, #31
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	4019      	ands	r1, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	3b41      	subs	r3, #65	; 0x41
 8002254:	fa00 f203 	lsl.w	r2, r0, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b09      	cmp	r3, #9
 8002266:	d91c      	bls.n	80022a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68d9      	ldr	r1, [r3, #12]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	3b1e      	subs	r3, #30
 800227a:	2207      	movs	r2, #7
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	4019      	ands	r1, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6898      	ldr	r0, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	3b1e      	subs	r3, #30
 8002294:	fa00 f203 	lsl.w	r2, r0, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	e019      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6919      	ldr	r1, [r3, #16]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	2207      	movs	r2, #7
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4019      	ands	r1, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6898      	ldr	r0, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b10      	cmp	r3, #16
 80022dc:	d003      	beq.n	80022e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022e2:	2b11      	cmp	r3, #17
 80022e4:	d132      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_ADC_ConfigChannel+0x1e4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d125      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d126      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800230c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d11a      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_ADC_ConfigChannel+0x1e8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <HAL_ADC_ConfigChannel+0x1ec>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	0c9a      	lsrs	r2, r3, #18
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800232c:	e002      	b.n	8002334 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_ConfigChannel+0x1b2>
 800233a:	e007      	b.n	800234c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012400 	.word	0x40012400
 8002364:	20000004 	.word	0x20000004
 8002368:	431bde83 	.word	0x431bde83

0800236c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d040      	beq.n	800240c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <ADC_Enable+0xac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <ADC_Enable+0xb0>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	0c9b      	lsrs	r3, r3, #18
 80023a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023a8:	e002      	b.n	80023b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023b6:	f7ff fbef 	bl	8001b98 <HAL_GetTick>
 80023ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023bc:	e01f      	b.n	80023fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023be:	f7ff fbeb 	bl	8001b98 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d918      	bls.n	80023fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d011      	beq.n	80023fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e007      	b.n	800240e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d1d8      	bne.n	80023be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000004 	.word	0x20000004
 800241c:	431bde83 	.word	0x431bde83

08002420 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d12e      	bne.n	8002498 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800244a:	f7ff fba5 	bl	8001b98 <HAL_GetTick>
 800244e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002450:	e01b      	b.n	800248a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002452:	f7ff fba1 	bl	8001b98 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d914      	bls.n	800248a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10d      	bne.n	800248a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e007      	b.n	800249a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d0dc      	beq.n	8002452 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4906      	ldr	r1, [pc, #24]	; (800253c <__NVIC_EnableIRQ+0x34>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100

08002540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	db0a      	blt.n	800256a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	490c      	ldr	r1, [pc, #48]	; (800258c <__NVIC_SetPriority+0x4c>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	0112      	lsls	r2, r2, #4
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	440b      	add	r3, r1
 8002564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002568:	e00a      	b.n	8002580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <__NVIC_SetPriority+0x50>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	3b04      	subs	r3, #4
 8002578:	0112      	lsls	r2, r2, #4
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	440b      	add	r3, r1
 800257e:	761a      	strb	r2, [r3, #24]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f1c3 0307 	rsb	r3, r3, #7
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf28      	it	cs
 80025b2:	2304      	movcs	r3, #4
 80025b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <NVIC_EncodePriority+0x30>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3b03      	subs	r3, #3
 80025c2:	e000      	b.n	80025c6 <NVIC_EncodePriority+0x32>
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43d9      	mvns	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	4313      	orrs	r3, r2
         );
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f7ff ff90 	bl	8002540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff2d 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff42 	bl	80024ec <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff90 	bl	8002594 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5f 	bl	8002540 <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff35 	bl	8002508 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa2 	bl	80025f8 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b08b      	sub	sp, #44	; 0x2c
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d2:	e169      	b.n	80029a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026d4:	2201      	movs	r2, #1
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	f040 8158 	bne.w	80029a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a9a      	ldr	r2, [pc, #616]	; (8002960 <HAL_GPIO_Init+0x2a0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d05e      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 80026fc:	4a98      	ldr	r2, [pc, #608]	; (8002960 <HAL_GPIO_Init+0x2a0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d875      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 8002702:	4a98      	ldr	r2, [pc, #608]	; (8002964 <HAL_GPIO_Init+0x2a4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d058      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 8002708:	4a96      	ldr	r2, [pc, #600]	; (8002964 <HAL_GPIO_Init+0x2a4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d86f      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 800270e:	4a96      	ldr	r2, [pc, #600]	; (8002968 <HAL_GPIO_Init+0x2a8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d052      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 8002714:	4a94      	ldr	r2, [pc, #592]	; (8002968 <HAL_GPIO_Init+0x2a8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d869      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 800271a:	4a94      	ldr	r2, [pc, #592]	; (800296c <HAL_GPIO_Init+0x2ac>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d04c      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 8002720:	4a92      	ldr	r2, [pc, #584]	; (800296c <HAL_GPIO_Init+0x2ac>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d863      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 8002726:	4a92      	ldr	r2, [pc, #584]	; (8002970 <HAL_GPIO_Init+0x2b0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d046      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 800272c:	4a90      	ldr	r2, [pc, #576]	; (8002970 <HAL_GPIO_Init+0x2b0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d85d      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 8002732:	2b12      	cmp	r3, #18
 8002734:	d82a      	bhi.n	800278c <HAL_GPIO_Init+0xcc>
 8002736:	2b12      	cmp	r3, #18
 8002738:	d859      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <HAL_GPIO_Init+0x80>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	080027bb 	.word	0x080027bb
 8002744:	08002795 	.word	0x08002795
 8002748:	080027a7 	.word	0x080027a7
 800274c:	080027e9 	.word	0x080027e9
 8002750:	080027ef 	.word	0x080027ef
 8002754:	080027ef 	.word	0x080027ef
 8002758:	080027ef 	.word	0x080027ef
 800275c:	080027ef 	.word	0x080027ef
 8002760:	080027ef 	.word	0x080027ef
 8002764:	080027ef 	.word	0x080027ef
 8002768:	080027ef 	.word	0x080027ef
 800276c:	080027ef 	.word	0x080027ef
 8002770:	080027ef 	.word	0x080027ef
 8002774:	080027ef 	.word	0x080027ef
 8002778:	080027ef 	.word	0x080027ef
 800277c:	080027ef 	.word	0x080027ef
 8002780:	080027ef 	.word	0x080027ef
 8002784:	0800279d 	.word	0x0800279d
 8002788:	080027b1 	.word	0x080027b1
 800278c:	4a79      	ldr	r2, [pc, #484]	; (8002974 <HAL_GPIO_Init+0x2b4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002792:	e02c      	b.n	80027ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	623b      	str	r3, [r7, #32]
          break;
 800279a:	e029      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	3304      	adds	r3, #4
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e024      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	3308      	adds	r3, #8
 80027ac:	623b      	str	r3, [r7, #32]
          break;
 80027ae:	e01f      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	330c      	adds	r3, #12
 80027b6:	623b      	str	r3, [r7, #32]
          break;
 80027b8:	e01a      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027c2:	2304      	movs	r3, #4
 80027c4:	623b      	str	r3, [r7, #32]
          break;
 80027c6:	e013      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d0:	2308      	movs	r3, #8
 80027d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	611a      	str	r2, [r3, #16]
          break;
 80027da:	e009      	b.n	80027f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027dc:	2308      	movs	r3, #8
 80027de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	615a      	str	r2, [r3, #20]
          break;
 80027e6:	e003      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
          break;
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          break;
 80027ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2bff      	cmp	r3, #255	; 0xff
 80027f4:	d801      	bhi.n	80027fa <HAL_GPIO_Init+0x13a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	e001      	b.n	80027fe <HAL_GPIO_Init+0x13e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d802      	bhi.n	800280c <HAL_GPIO_Init+0x14c>
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	e002      	b.n	8002812 <HAL_GPIO_Init+0x152>
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3b08      	subs	r3, #8
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	210f      	movs	r1, #15
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	401a      	ands	r2, r3
 8002824:	6a39      	ldr	r1, [r7, #32]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	431a      	orrs	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80b1 	beq.w	80029a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002840:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <HAL_GPIO_Init+0x2b8>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a4c      	ldr	r2, [pc, #304]	; (8002978 <HAL_GPIO_Init+0x2b8>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_GPIO_Init+0x2b8>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002858:	4a48      	ldr	r2, [pc, #288]	; (800297c <HAL_GPIO_Init+0x2bc>)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a40      	ldr	r2, [pc, #256]	; (8002980 <HAL_GPIO_Init+0x2c0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <HAL_GPIO_Init+0x1ec>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <HAL_GPIO_Init+0x2c4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00d      	beq.n	80028a8 <HAL_GPIO_Init+0x1e8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3e      	ldr	r2, [pc, #248]	; (8002988 <HAL_GPIO_Init+0x2c8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <HAL_GPIO_Init+0x1e4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3d      	ldr	r2, [pc, #244]	; (800298c <HAL_GPIO_Init+0x2cc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_GPIO_Init+0x1e0>
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a0:	2304      	movs	r3, #4
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028ac:	2300      	movs	r3, #0
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028be:	492f      	ldr	r1, [pc, #188]	; (800297c <HAL_GPIO_Init+0x2bc>)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	492c      	ldr	r1, [pc, #176]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4928      	ldr	r1, [pc, #160]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	4922      	ldr	r1, [pc, #136]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	491e      	ldr	r1, [pc, #120]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002918:	4013      	ands	r3, r2
 800291a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4918      	ldr	r1, [pc, #96]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	43db      	mvns	r3, r3
 800293e:	4914      	ldr	r1, [pc, #80]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002940:	4013      	ands	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d021      	beq.n	8002994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
 800295c:	e021      	b.n	80029a2 <HAL_GPIO_Init+0x2e2>
 800295e:	bf00      	nop
 8002960:	10320000 	.word	0x10320000
 8002964:	10310000 	.word	0x10310000
 8002968:	10220000 	.word	0x10220000
 800296c:	10210000 	.word	0x10210000
 8002970:	10120000 	.word	0x10120000
 8002974:	10110000 	.word	0x10110000
 8002978:	40021000 	.word	0x40021000
 800297c:	40010000 	.word	0x40010000
 8002980:	40010800 	.word	0x40010800
 8002984:	40010c00 	.word	0x40010c00
 8002988:	40011000 	.word	0x40011000
 800298c:	40011400 	.word	0x40011400
 8002990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	43db      	mvns	r3, r3
 800299c:	4909      	ldr	r1, [pc, #36]	; (80029c4 <HAL_GPIO_Init+0x304>)
 800299e:	4013      	ands	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3301      	adds	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f47f ae8e 	bne.w	80026d4 <HAL_GPIO_Init+0x14>
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	372c      	adds	r7, #44	; 0x2c
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e272      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8087 	beq.w	8002b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a18:	4b92      	ldr	r3, [pc, #584]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d00c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a24:	4b8f      	ldr	r3, [pc, #572]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d112      	bne.n	8002a56 <HAL_RCC_OscConfig+0x5e>
 8002a30:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x12c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d168      	bne.n	8002b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e24c      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x76>
 8002a60:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a7f      	ldr	r2, [pc, #508]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e02e      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x98>
 8002a76:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7a      	ldr	r2, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b78      	ldr	r3, [pc, #480]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xbc>
 8002a9a:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a71      	ldr	r2, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002ab4:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6a      	ldr	r2, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f860 	bl	8001b98 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff f85c 	bl	8001b98 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e200      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xe4>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff f84c 	bl	8001b98 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7ff f848 	bl	8001b98 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1ec      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x10c>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d063      	beq.n	8002bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b32:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b3e:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x18c>
 8002b4a:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1c0      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4939      	ldr	r1, [pc, #228]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e03a      	b.n	8002bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7ff f801 	bl	8001b98 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fffd 	bl	8001b98 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e1a1      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4927      	ldr	r1, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe ffe0 	bl	8001b98 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7fe ffdc 	bl	8001b98 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e180      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d03a      	beq.n	8002c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d019      	beq.n	8002c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe ffc0 	bl	8001b98 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7fe ffbc 	bl	8001b98 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e160      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f000 faba 	bl	80031b4 <RCC_Delay>
 8002c40:	e01c      	b.n	8002c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe ffa6 	bl	8001b98 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe ffa2 	bl	8001b98 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d908      	bls.n	8002c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e146      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	42420000 	.word	0x42420000
 8002c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	4b92      	ldr	r3, [pc, #584]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e9      	bne.n	8002c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a6 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b8b      	ldr	r3, [pc, #556]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b88      	ldr	r3, [pc, #544]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a87      	ldr	r2, [pc, #540]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]
 8002ca6:	4b85      	ldr	r3, [pc, #532]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <HAL_RCC_OscConfig+0x4c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b7f      	ldr	r3, [pc, #508]	; (8002ec0 <HAL_RCC_OscConfig+0x4c8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7e      	ldr	r2, [pc, #504]	; (8002ec0 <HAL_RCC_OscConfig+0x4c8>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7fe ff63 	bl	8001b98 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7fe ff5f 	bl	8001b98 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e103      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b75      	ldr	r3, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x4c8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x312>
 8002cfc:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a6e      	ldr	r2, [pc, #440]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	e02d      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x334>
 8002d12:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a69      	ldr	r2, [pc, #420]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a66      	ldr	r2, [pc, #408]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	e01c      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCC_OscConfig+0x356>
 8002d34:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a60      	ldr	r2, [pc, #384]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	4b5e      	ldr	r3, [pc, #376]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a5d      	ldr	r2, [pc, #372]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	e00b      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d4e:	4b5b      	ldr	r3, [pc, #364]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a5a      	ldr	r2, [pc, #360]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b58      	ldr	r3, [pc, #352]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a57      	ldr	r2, [pc, #348]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe ff13 	bl	8001b98 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe ff0f 	bl	8001b98 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0b1      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ee      	beq.n	8002d76 <HAL_RCC_OscConfig+0x37e>
 8002d98:	e014      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fefd 	bl	8001b98 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fef9 	bl	8001b98 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e09b      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ee      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d105      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dca:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a3b      	ldr	r2, [pc, #236]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8087 	beq.w	8002eee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d061      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d146      	bne.n	8002e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b33      	ldr	r3, [pc, #204]	; (8002ec4 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fecd 	bl	8001b98 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fec9 	bl	8001b98 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e06d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d108      	bne.n	8002e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4921      	ldr	r1, [pc, #132]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a19      	ldr	r1, [r3, #32]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	491b      	ldr	r1, [pc, #108]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fe9d 	bl	8001b98 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fe99 	bl	8001b98 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e03d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x46a>
 8002e80:	e035      	b.n	8002eee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_OscConfig+0x4cc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fe86 	bl	8001b98 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fe82 	bl	8001b98 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e026      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x498>
 8002eae:	e01e      	b.n	8002eee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e019      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_OscConfig+0x500>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0d0      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d910      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 0207 	bic.w	r2, r3, #7
 8002f26:	4965      	ldr	r1, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b8      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f58:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494d      	ldr	r1, [pc, #308]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d040      	beq.n	800301c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d115      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07f      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e073      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06b      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fda:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4936      	ldr	r1, [pc, #216]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fdd4 	bl	8001b98 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fe fdd0 	bl	8001b98 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e053      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 020c 	and.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d1eb      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d210      	bcs.n	800304c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0207 	bic.w	r2, r3, #7
 8003032:	4922      	ldr	r1, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4916      	ldr	r1, [pc, #88]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f821 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490a      	ldr	r1, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1cc>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1d0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fd32 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08004338 	.word	0x08004338
 80030c8:	20000004 	.word	0x20000004
 80030cc:	20000008 	.word	0x20000008

080030d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_RCC_GetSysClockFreq+0x94>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d002      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x30>
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0x36>
 80030fe:	e027      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_GetSysClockFreq+0x98>)
 8003102:	613b      	str	r3, [r7, #16]
      break;
 8003104:	e027      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0c9b      	lsrs	r3, r3, #18
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_RCC_GetSysClockFreq+0x94>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0c5b      	lsrs	r3, r3, #17
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_RCC_GetSysClockFreq+0xa0>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <HAL_RCC_GetSysClockFreq+0x98>)
 8003132:	fb03 f202 	mul.w	r2, r3, r2
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e004      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	613b      	str	r3, [r7, #16]
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetSysClockFreq+0x98>)
 8003152:	613b      	str	r3, [r7, #16]
      break;
 8003154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003156:	693b      	ldr	r3, [r7, #16]
}
 8003158:	4618      	mov	r0, r3
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	007a1200 	.word	0x007a1200
 800316c:	08004350 	.word	0x08004350
 8003170:	08004360 	.word	0x08004360
 8003174:	003d0900 	.word	0x003d0900

08003178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <HAL_RCC_GetHCLKFreq+0x10>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	20000004 	.word	0x20000004

0800318c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003190:	f7ff fff2 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	0adb      	lsrs	r3, r3, #11
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4903      	ldr	r1, [pc, #12]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08004348 	.word	0x08004348

080031b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <RCC_Delay+0x34>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <RCC_Delay+0x38>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0a5b      	lsrs	r3, r3, #9
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d0:	bf00      	nop
  }
  while (Delay --);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1e5a      	subs	r2, r3, #1
 80031d6:	60fa      	str	r2, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f9      	bne.n	80031d0 <RCC_Delay+0x1c>
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	20000004 	.word	0x20000004
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d07d      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321c:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	4a4b      	ldr	r2, [pc, #300]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003226:	61d3      	str	r3, [r2, #28]
 8003228:	4b49      	ldr	r3, [pc, #292]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d118      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003244:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a42      	ldr	r2, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003250:	f7fe fca2 	bl	8001b98 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	e008      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003258:	f7fe fc9e 	bl	8001b98 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e06d      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02e      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d027      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003294:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329e:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a4:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d014      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fe fc6d 	bl	8001b98 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe fc69 	bl	8001b98 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e036      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ee      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e4:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4917      	ldr	r1, [pc, #92]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	4a13      	ldr	r2, [pc, #76]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003306:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	490b      	ldr	r1, [pc, #44]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	4904      	ldr	r1, [pc, #16]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	40007000 	.word	0x40007000
 8003358:	42420440 	.word	0x42420440

0800335c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	2300      	movs	r3, #0
 800336e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b10      	cmp	r3, #16
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b10      	cmp	r3, #16
 8003382:	f200 808a 	bhi.w	800349a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d045      	beq.n	8003418 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d075      	beq.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003392:	e082      	b.n	800349a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003394:	4b46      	ldr	r3, [pc, #280]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800339a:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d07b      	beq.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	4a41      	ldr	r2, [pc, #260]	; (80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033be:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0c5b      	lsrs	r3, r3, #17
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	4a3b      	ldr	r2, [pc, #236]	; (80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033d8:	4a38      	ldr	r2, [pc, #224]	; (80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	e004      	b.n	80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033f4:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003400:	d102      	bne.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	61bb      	str	r3, [r7, #24]
      break;
 8003406:	e04a      	b.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
      break;
 8003416:	e042      	b.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003428:	d108      	bne.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e01f      	b.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003446:	d109      	bne.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003454:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e00f      	b.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003466:	d11c      	bne.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003474:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003478:	61bb      	str	r3, [r7, #24]
      break;
 800347a:	e012      	b.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800347c:	e011      	b.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800347e:	f7ff fe85 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0b9b      	lsrs	r3, r3, #14
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	61bb      	str	r3, [r7, #24]
      break;
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034a2:	bf00      	nop
    }
  }
  return (frequency);
 80034a4:	69bb      	ldr	r3, [r7, #24]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08004364 	.word	0x08004364
 80034b8:	08004374 	.word	0x08004374
 80034bc:	007a1200 	.word	0x007a1200
 80034c0:	003d0900 	.word	0x003d0900
 80034c4:	aaaaaaab 	.word	0xaaaaaaab

080034c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e03a      	b.n	8003556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a18      	ldr	r2, [pc, #96]	; (8003560 <HAL_TIM_Base_Start_IT+0x98>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x58>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d009      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x58>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <HAL_TIM_Base_Start_IT+0x9c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x58>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <HAL_TIM_Base_Start_IT+0xa0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b06      	cmp	r3, #6
 8003530:	d010      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003542:	e007      	b.n	8003554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800

0800356c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e041      	b.n	8003602 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fe f966 	bl	8001864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f000 fc0e 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <HAL_TIM_PWM_Start+0x24>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e022      	b.n	8003676 <HAL_TIM_PWM_Start+0x6a>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b04      	cmp	r3, #4
 8003634:	d109      	bne.n	800364a <HAL_TIM_PWM_Start+0x3e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e015      	b.n	8003676 <HAL_TIM_PWM_Start+0x6a>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d109      	bne.n	8003664 <HAL_TIM_PWM_Start+0x58>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e008      	b.n	8003676 <HAL_TIM_PWM_Start+0x6a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e05e      	b.n	800373c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Start+0x82>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368c:	e013      	b.n	80036b6 <HAL_TIM_PWM_Start+0xaa>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d104      	bne.n	800369e <HAL_TIM_PWM_Start+0x92>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	e00b      	b.n	80036b6 <HAL_TIM_PWM_Start+0xaa>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_PWM_Start+0xa2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ac:	e003      	b.n	80036b6 <HAL_TIM_PWM_Start+0xaa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fd6e 	bl	80041a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_TIM_PWM_Start+0x138>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d107      	bne.n	80036de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <HAL_TIM_PWM_Start+0x138>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_TIM_PWM_Start+0xfa>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d009      	beq.n	8003706 <HAL_TIM_PWM_Start+0xfa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_TIM_PWM_Start+0x13c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIM_PWM_Start+0xfa>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_TIM_PWM_Start+0x140>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d111      	bne.n	800372a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b06      	cmp	r3, #6
 8003716:	d010      	beq.n	800373a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	e007      	b.n	800373a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800

08003750 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e093      	b.n	800388c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fe f897 	bl	80018ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003794:	f023 0307 	bic.w	r3, r3, #7
 8003798:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f000 fb11 	bl	8003dcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	4313      	orrs	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037f0:	f023 030c 	bic.w	r3, r3, #12
 80037f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	4313      	orrs	r3, r2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	011a      	lsls	r2, r3, #4
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	031b      	lsls	r3, r3, #12
 8003820:	4313      	orrs	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	4313      	orrs	r3, r2
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d110      	bne.n	80038e6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ca:	7b7b      	ldrb	r3, [r7, #13]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d001      	beq.n	80038d4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e089      	b.n	80039e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e4:	e031      	b.n	800394a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d110      	bne.n	800390e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ec:	7bbb      	ldrb	r3, [r7, #14]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038f2:	7b3b      	ldrb	r3, [r7, #12]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e075      	b.n	80039e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390c:	e01d      	b.n	800394a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d108      	bne.n	8003926 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003914:	7bbb      	ldrb	r3, [r7, #14]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800391a:	7b7b      	ldrb	r3, [r7, #13]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d102      	bne.n	8003926 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003920:	7b3b      	ldrb	r3, [r7, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e05e      	b.n	80039e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b04      	cmp	r3, #4
 8003954:	d010      	beq.n	8003978 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003956:	e01f      	b.n	8003998 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fc1d 	bl	80041a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0202 	orr.w	r2, r2, #2
 8003974:	60da      	str	r2, [r3, #12]
      break;
 8003976:	e02e      	b.n	80039d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	2104      	movs	r1, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fc0d 	bl	80041a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0204 	orr.w	r2, r2, #4
 8003994:	60da      	str	r2, [r3, #12]
      break;
 8003996:	e01e      	b.n	80039d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fbfd 	bl	80041a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	2104      	movs	r1, #4
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fbf6 	bl	80041a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0202 	orr.w	r2, r2, #2
 80039c2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0204 	orr.w	r2, r2, #4
 80039d2:	60da      	str	r2, [r3, #12]
      break;
 80039d4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d122      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d11b      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0202 	mvn.w	r2, #2
 8003a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fd2c 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f9ab 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f9b1 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d122      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d11b      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0204 	mvn.w	r2, #4
 8003a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fd02 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f981 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f987 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0208 	mvn.w	r2, #8
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fcd8 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f957 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f95d 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0210 	mvn.w	r2, #16
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fcae 	bl	8001490 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f92d 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f933 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0201 	mvn.w	r2, #1
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f908 	bl	8003d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b80      	cmp	r3, #128	; 0x80
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b80      	cmp	r3, #128	; 0x80
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fb8b 	bl	80042b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d10e      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d107      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8f7 	bl	8003dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d107      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0220 	mvn.w	r2, #32
 8003bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fb56 	bl	80042a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e0ae      	b.n	8003d7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	f200 809f 	bhi.w	8003d6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003d6d 	.word	0x08003d6d
 8003c3c:	08003d6d 	.word	0x08003d6d
 8003c40:	08003d6d 	.word	0x08003d6d
 8003c44:	08003ca9 	.word	0x08003ca9
 8003c48:	08003d6d 	.word	0x08003d6d
 8003c4c:	08003d6d 	.word	0x08003d6d
 8003c50:	08003d6d 	.word	0x08003d6d
 8003c54:	08003ceb 	.word	0x08003ceb
 8003c58:	08003d6d 	.word	0x08003d6d
 8003c5c:	08003d6d 	.word	0x08003d6d
 8003c60:	08003d6d 	.word	0x08003d6d
 8003c64:	08003d2b 	.word	0x08003d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f90e 	bl	8003e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0208 	orr.w	r2, r2, #8
 8003c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0204 	bic.w	r2, r2, #4
 8003c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6999      	ldr	r1, [r3, #24]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	619a      	str	r2, [r3, #24]
      break;
 8003ca6:	e064      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f954 	bl	8003f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6999      	ldr	r1, [r3, #24]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	021a      	lsls	r2, r3, #8
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	619a      	str	r2, [r3, #24]
      break;
 8003ce8:	e043      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f99d 	bl	8004030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0208 	orr.w	r2, r2, #8
 8003d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0204 	bic.w	r2, r2, #4
 8003d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	61da      	str	r2, [r3, #28]
      break;
 8003d28:	e023      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f9e7 	bl	8004104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69d9      	ldr	r1, [r3, #28]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	021a      	lsls	r2, r3, #8
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	61da      	str	r2, [r3, #28]
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <TIM_Base_SetConfig+0xb8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_Base_SetConfig+0x30>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d007      	beq.n	8003dfc <TIM_Base_SetConfig+0x30>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a26      	ldr	r2, [pc, #152]	; (8003e88 <TIM_Base_SetConfig+0xbc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_Base_SetConfig+0x30>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <TIM_Base_SetConfig+0xc0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d108      	bne.n	8003e0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <TIM_Base_SetConfig+0xb8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_Base_SetConfig+0x62>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1c:	d007      	beq.n	8003e2e <TIM_Base_SetConfig+0x62>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <TIM_Base_SetConfig+0xbc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_Base_SetConfig+0x62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <TIM_Base_SetConfig+0xc0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <TIM_Base_SetConfig+0xb8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	615a      	str	r2, [r3, #20]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800

08003e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f023 0201 	bic.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0303 	bic.w	r3, r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 0302 	bic.w	r3, r3, #2
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <TIM_OC1_SetConfig+0xc8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d10c      	bne.n	8003f06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0308 	bic.w	r3, r3, #8
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <TIM_OC1_SetConfig+0xc8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d111      	bne.n	8003f32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	621a      	str	r2, [r3, #32]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00

08003f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 0210 	bic.w	r2, r3, #16
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0320 	bic.w	r3, r3, #32
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <TIM_OC2_SetConfig+0xd0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10d      	bne.n	8003fd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a14      	ldr	r2, [pc, #80]	; (800402c <TIM_OC2_SetConfig+0xd0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d113      	bne.n	8004008 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00

08004030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <TIM_OC3_SetConfig+0xd0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d10d      	bne.n	80040aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <TIM_OC3_SetConfig+0xd0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d113      	bne.n	80040da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00

08004104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800414e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a0f      	ldr	r2, [pc, #60]	; (800419c <TIM_OC4_SetConfig+0x98>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d109      	bne.n	8004178 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	019b      	lsls	r3, r3, #6
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	40012c00 	.word	0x40012c00

080041a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	2201      	movs	r2, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1a      	ldr	r2, [r3, #32]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	401a      	ands	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e046      	b.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a16      	ldr	r2, [pc, #88]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d009      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a12      	ldr	r2, [pc, #72]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10c      	bne.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4313      	orrs	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800

080042a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <memset>:
 80042c8:	4603      	mov	r3, r0
 80042ca:	4402      	add	r2, r0
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d100      	bne.n	80042d2 <memset+0xa>
 80042d0:	4770      	bx	lr
 80042d2:	f803 1b01 	strb.w	r1, [r3], #1
 80042d6:	e7f9      	b.n	80042cc <memset+0x4>

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	2600      	movs	r6, #0
 80042dc:	4d0c      	ldr	r5, [pc, #48]	; (8004310 <__libc_init_array+0x38>)
 80042de:	4c0d      	ldr	r4, [pc, #52]	; (8004314 <__libc_init_array+0x3c>)
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	f000 f81a 	bl	8004320 <_init>
 80042ec:	2600      	movs	r6, #0
 80042ee:	4d0a      	ldr	r5, [pc, #40]	; (8004318 <__libc_init_array+0x40>)
 80042f0:	4c0a      	ldr	r4, [pc, #40]	; (800431c <__libc_init_array+0x44>)
 80042f2:	1b64      	subs	r4, r4, r5
 80042f4:	10a4      	asrs	r4, r4, #2
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	08004378 	.word	0x08004378
 8004314:	08004378 	.word	0x08004378
 8004318:	08004378 	.word	0x08004378
 800431c:	0800437c 	.word	0x0800437c

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
