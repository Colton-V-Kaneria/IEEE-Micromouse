
Macrorat_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007a18  08007a18  00017a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc4  08007dc4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007dc4  08007dc4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dc4  08007dc4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200001e4  08007fb0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08007fb0  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a79f  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da0  00000000  00000000  0002a9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000953  00000000  00000000  0002d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018db2  00000000  00000000  0002dd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd10  00000000  00000000  00046ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f9ea  00000000  00000000  000537c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004354  00000000  00000000  000e31b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e7504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080079fc 	.word	0x080079fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080079fc 	.word	0x080079fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800117c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001184:	e000      	b.n	8001188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <measure_dist>:
static void ADC1_Select_CH9(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t measure_dist(dist_t dist) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;
	GPIO_TypeDef* receiver_port;
	uint16_t receiver_pin;

	switch(dist) {
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d83a      	bhi.n	800122e <measure_dist+0x86>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <measure_dist+0x18>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	080011e9 	.word	0x080011e9
 80011c8:	08001201 	.word	0x08001201
 80011cc:	08001219 	.word	0x08001219
		case FL:
			emitter_port = EMIT_FL_GPIO_Port;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <measure_dist+0xcc>)
 80011d2:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FL_Pin;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_FL_GPIO_Port;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <measure_dist+0xcc>)
 80011dc:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_FL_Pin;
 80011de:	2302      	movs	r3, #2
 80011e0:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH9();
 80011e2:	f000 fdbf 	bl	8001d64 <ADC1_Select_CH9>
			break;
 80011e6:	e023      	b.n	8001230 <measure_dist+0x88>
		case L:
			emitter_port = EMIT_L_GPIO_Port;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <measure_dist+0xcc>)
 80011ea:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_L_Pin;
 80011ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f0:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_L_GPIO_Port;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <measure_dist+0xcc>)
 80011f4:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_L_Pin;
 80011f6:	2301      	movs	r3, #1
 80011f8:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH8();
 80011fa:	f000 fd95 	bl	8001d28 <ADC1_Select_CH8>
			break;
 80011fe:	e017      	b.n	8001230 <measure_dist+0x88>
		case R:
			emitter_port = EMIT_R_GPIO_Port;
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <measure_dist+0xcc>)
 8001202:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_R_Pin;
 8001204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001208:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_R_GPIO_Port;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <measure_dist+0xd0>)
 800120c:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_R_Pin;
 800120e:	2320      	movs	r3, #32
 8001210:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH5();
 8001212:	f000 fd6b 	bl	8001cec <ADC1_Select_CH5>
			break;
 8001216:	e00b      	b.n	8001230 <measure_dist+0x88>
		case FR:
			emitter_port = EMIT_FR_GPIO_Port;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <measure_dist+0xcc>)
 800121a:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FR_Pin;
 800121c:	2320      	movs	r3, #32
 800121e:	827b      	strh	r3, [r7, #18]
			receiver_port = RECIV_FR_GPIO_Port;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <measure_dist+0xd0>)
 8001222:	60fb      	str	r3, [r7, #12]
			receiver_pin = RECIV_FR_Pin;
 8001224:	2310      	movs	r3, #16
 8001226:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH4();
 8001228:	f000 fd42 	bl	8001cb0 <ADC1_Select_CH4>
			break;
 800122c:	e000      	b.n	8001230 <measure_dist+0x88>
		default:
			break;
 800122e:	bf00      	nop
	}

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 8001230:	8a7b      	ldrh	r3, [r7, #18]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f002 f960 	bl	80034fc <HAL_GPIO_WritePin>
//	HAL_Delay(5);

	HAL_ADC_Start(&hadc1);
 800123c:	480f      	ldr	r0, [pc, #60]	; (800127c <measure_dist+0xd4>)
 800123e:	f001 fb4b 	bl	80028d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001242:	f04f 31ff 	mov.w	r1, #4294967295
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <measure_dist+0xd4>)
 8001248:	f001 fc20 	bl	8002a8c <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <measure_dist+0xd4>)
 800124e:	f001 fd23 	bl	8002c98 <HAL_ADC_GetValue>
 8001252:	4603      	mov	r3, r0
 8001254:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <measure_dist+0xd4>)
 8001258:	f001 fbec 	bl	8002a34 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 800125c:	8a7b      	ldrh	r3, [r7, #18]
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f002 f94a 	bl	80034fc <HAL_GPIO_WritePin>

	return adc_val;
 8001268:	893b      	ldrh	r3, [r7, #8]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40010800 	.word	0x40010800
 800127c:	20000200 	.word	0x20000200

08001280 <scaled_average>:

uint16_t scaled_average(dist_t sensor)	// dist tells us which sensor's distance we are measuring
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	static int IR_index = 0;

	IR_data[sensor][IR_index] = measure_dist(sensor); // puts newest distance into array
 800128a:	79fc      	ldrb	r4, [r7, #7]
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <scaled_average+0xe8>)
 800128e:	681d      	ldr	r5, [r3, #0]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff88 	bl	80011a8 <measure_dist>
 8001298:	4603      	mov	r3, r0
 800129a:	4619      	mov	r1, r3
 800129c:	4a33      	ldr	r2, [pc, #204]	; (800136c <scaled_average+0xec>)
 800129e:	4623      	mov	r3, r4
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	1b1b      	subs	r3, r3, r4
 80012a4:	442b      	add	r3, r5
 80012a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	int sum = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 15; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	e00f      	b.n	80012d4 <scaled_average+0x54>
	{
		sum += IR_data[sensor][i];
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	492d      	ldr	r1, [pc, #180]	; (800136c <scaled_average+0xec>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 15; i++)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b0e      	cmp	r3, #14
 80012d8:	ddec      	ble.n	80012b4 <scaled_average+0x34>
	}

	IR_index = (IR_index + 1) % 15;
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <scaled_average+0xe8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <scaled_average+0xf0>)
 80012e2:	fb83 1302 	smull	r1, r3, r3, r2
 80012e6:	4413      	add	r3, r2
 80012e8:	10d9      	asrs	r1, r3, #3
 80012ea:	17d3      	asrs	r3, r2, #31
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	460b      	mov	r3, r1
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	1a5b      	subs	r3, r3, r1
 80012f4:	1ad1      	subs	r1, r2, r3
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <scaled_average+0xe8>)
 80012f8:	6019      	str	r1, [r3, #0]

	return (sum / 15.0) * (wall_nominal[sensor] / (float)(wall_standard[sensor]));
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff f882 	bl	8000404 <__aeabi_i2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <scaled_average+0xf4>)
 8001306:	f7ff fa11 	bl	800072c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	461d      	mov	r5, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <scaled_average+0xf8>)
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fcde 	bl	8000cdc <__aeabi_i2f>
 8001320:	4606      	mov	r6, r0
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a15      	ldr	r2, [pc, #84]	; (800137c <scaled_average+0xfc>)
 8001326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcd2 	bl	8000cd4 <__aeabi_ui2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4630      	mov	r0, r6
 8001336:	f7ff fdd9 	bl	8000eec <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f873 	bl	8000428 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7ff f8c5 	bl	80004d8 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fb97 	bl	8000a88 <__aeabi_d2uiz>
 800135a:	4603      	mov	r3, r0
 800135c:	b29b      	uxth	r3, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001366:	bf00      	nop
 8001368:	200003f8 	.word	0x200003f8
 800136c:	20000310 	.word	0x20000310
 8001370:	88888889 	.word	0x88888889
 8001374:	402e0000 	.word	0x402e0000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000000 	.word	0x20000000

08001380 <calc_v_batt>:

float calc_v_batt()
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	ADC1_Select_CH1();
 8001384:	f000 fc76 	bl	8001c74 <ADC1_Select_CH1>

	HAL_ADC_Start(&hadc1);
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <calc_v_batt+0x70>)
 800138a:	f001 faa5 	bl	80028d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800138e:	f04f 31ff 	mov.w	r1, #4294967295
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <calc_v_batt+0x70>)
 8001394:	f001 fb7a 	bl	8002a8c <HAL_ADC_PollForConversion>
	battery_reading = HAL_ADC_GetValue(&hadc1);
 8001398:	4815      	ldr	r0, [pc, #84]	; (80013f0 <calc_v_batt+0x70>)
 800139a:	f001 fc7d 	bl	8002c98 <HAL_ADC_GetValue>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <calc_v_batt+0x74>)
 80013a4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80013a6:	4812      	ldr	r0, [pc, #72]	; (80013f0 <calc_v_batt+0x70>)
 80013a8:	f001 fb44 	bl	8002a34 <HAL_ADC_Stop>

	// multiply by ratio to convert to V, then multiply by 3
    return battery_reading * v_ratio * 3;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <calc_v_batt+0x74>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f827 	bl	8000404 <__aeabi_i2d>
 80013b6:	a30c      	add	r3, pc, #48	; (adr r3, 80013e8 <calc_v_batt+0x68>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f88c 	bl	80004d8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <calc_v_batt+0x78>)
 80013ce:	f7ff f883 	bl	80004d8 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fb75 	bl	8000ac8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
//	v_meter = measure_battery(BATTERY);
//	fl_v_meter = (float)(v_meter)/1206;
//	fl_batt_volt = (float)(v_meter*3)/1206;
    //batt volt obtained through voltage division

}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	97635e74 	.word	0x97635e74
 80013ec:	3f4adea8 	.word	0x3f4adea8
 80013f0:	20000200 	.word	0x20000200
 80013f4:	200003e0 	.word	0x200003e0
 80013f8:	40080000 	.word	0x40080000

080013fc <calc_PWM>:

int calc_PWM(float voltage)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	v_batt = calc_v_batt();
 8001404:	f7ff ffbc 	bl	8001380 <calc_v_batt>
 8001408:	4603      	mov	r3, r0
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <calc_PWM+0x3c>)
 800140c:	6013      	str	r3, [r2, #0]
	return (voltage/v_batt)*2047;
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <calc_PWM+0x3c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fd69 	bl	8000eec <__aeabi_fdiv>
 800141a:	4603      	mov	r3, r0
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <calc_PWM+0x40>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fcb0 	bl	8000d84 <__aeabi_fmul>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe72 	bl	8001110 <__aeabi_f2iz>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200003e4 	.word	0x200003e4
 800143c:	44ffe000 	.word	0x44ffe000

08001440 <calc_distance>:

int calc_distance()
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return (d_L + d_R)/2;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <calc_distance+0x1c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <calc_distance+0x20>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4413      	add	r3, r2
 800144e:	0fda      	lsrs	r2, r3, #31
 8001450:	4413      	add	r3, r2
 8001452:	105b      	asrs	r3, r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	200003a0 	.word	0x200003a0
 8001460:	200003a4 	.word	0x200003a4
 8001464:	00000000 	.word	0x00000000

08001468 <calc_angle>:

int calc_angle()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	return (int)((d_R - d_L)/(2.0 * RW) * (180.0/M_PI));
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <calc_angle+0x50>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <calc_angle+0x54>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe ffc4 	bl	8000404 <__aeabi_i2d>
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <calc_angle+0x58>)
 8001482:	f7ff f953 	bl	800072c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	a308      	add	r3, pc, #32	; (adr r3, 80014b0 <calc_angle+0x48>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f820 	bl	80004d8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff faca 	bl	8000a38 <__aeabi_d2iz>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	1a63c1f8 	.word	0x1a63c1f8
 80014b4:	404ca5dc 	.word	0x404ca5dc
 80014b8:	200003a4 	.word	0x200003a4
 80014bc:	200003a0 	.word	0x200003a0
 80014c0:	40548000 	.word	0x40548000
 80014c4:	00000000 	.word	0x00000000

080014c8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	// this is the left encoder timer
	if (htim->Instance == TIM3) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <HAL_TIM_IC_CaptureCallback+0x120>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d13b      	bne.n	8001552 <HAL_TIM_IC_CaptureCallback+0x8a>
		//enc_left = __HAL_TIM_GET_COUNTER(htim);
		raw_count_left = __HAL_TIM_GET_COUNTER(htim);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b42      	ldr	r3, [pc, #264]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x124>)
 80014e4:	801a      	strh	r2, [r3, #0]
		enc_left -= (int16_t)(raw_count_left - prev_count_left);
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a40      	ldr	r2, [pc, #256]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x124>)
 80014ec:	8811      	ldrh	r1, [r2, #0]
 80014ee:	4a41      	ldr	r2, [pc, #260]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014f0:	8812      	ldrh	r2, [r2, #0]
 80014f2:	1a8a      	subs	r2, r1, r2
 80014f4:	b292      	uxth	r2, r2
 80014f6:	b212      	sxth	r2, r2
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80014fc:	6013      	str	r3, [r2, #0]
		d_L = (enc_left / 360.0) * (M_PI * diameter);
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ff7e 	bl	8000404 <__aeabi_i2d>
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800150e:	f7ff f90d 	bl	800072c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	a331      	add	r3, pc, #196	; (adr r3, 80015e0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7fe ffda 	bl	80004d8 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fa84 	bl	8000a38 <__aeabi_d2iz>
 8001530:	4603      	mov	r3, r0
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x134>)
 8001534:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();	// updates distance whenever d_L changes
 8001536:	f7ff ff83 	bl	8001440 <calc_distance>
 800153a:	4603      	mov	r3, r0
 800153c:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x138>)
 800153e:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 8001540:	f7ff ff92 	bl	8001468 <calc_angle>
 8001544:	4603      	mov	r3, r0
 8001546:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001548:	6013      	str	r3, [r2, #0]

		prev_count_left = raw_count_left;
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x124>)
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001550:	801a      	strh	r2, [r3, #0]
	}
	if (htim->Instance == TIM4) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d13b      	bne.n	80015d4 <HAL_TIM_IC_CaptureCallback+0x10c>
		//enc_right = __HAL_TIM_GET_COUNTER(htim);
		raw_count_right = __HAL_TIM_GET_COUNTER(htim);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001566:	801a      	strh	r2, [r3, #0]
		enc_right -= (int16_t)(raw_count_right - prev_count_right);
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_TIM_IC_CaptureCallback+0x148>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <HAL_TIM_IC_CaptureCallback+0x144>)
 800156e:	8811      	ldrh	r1, [r2, #0]
 8001570:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	1a8a      	subs	r2, r1, r2
 8001576:	b292      	uxth	r2, r2
 8001578:	b212      	sxth	r2, r2
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	4a24      	ldr	r2, [pc, #144]	; (8001610 <HAL_TIM_IC_CaptureCallback+0x148>)
 800157e:	6013      	str	r3, [r2, #0]
		d_R = (enc_right / 360.0) * (M_PI * diameter);
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff3d 	bl	8000404 <__aeabi_i2d>
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001590:	f7ff f8cc 	bl	800072c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	a310      	add	r3, pc, #64	; (adr r3, 80015e0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7fe ff99 	bl	80004d8 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fa43 	bl	8000a38 <__aeabi_d2iz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a18      	ldr	r2, [pc, #96]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x150>)
 80015b6:	6013      	str	r3, [r2, #0]
		d_center = calc_distance();
 80015b8:	f7ff ff42 	bl	8001440 <calc_distance>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x138>)
 80015c0:	6013      	str	r3, [r2, #0]
		angle = calc_angle();
 80015c2:	f7ff ff51 	bl	8001468 <calc_angle>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80015ca:	6013      	str	r3, [r2, #0]

		prev_count_right = raw_count_right;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_TIM_IC_CaptureCallback+0x144>)
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80015d2:	801a      	strh	r2, [r3, #0]
	}
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	f3af 8000 	nop.w
 80015e0:	2955385e 	.word	0x2955385e
 80015e4:	405f6a7a 	.word	0x405f6a7a
 80015e8:	40000400 	.word	0x40000400
 80015ec:	200003c8 	.word	0x200003c8
 80015f0:	20000398 	.word	0x20000398
 80015f4:	200003cc 	.word	0x200003cc
 80015f8:	40768000 	.word	0x40768000
 80015fc:	200003a0 	.word	0x200003a0
 8001600:	200003a8 	.word	0x200003a8
 8001604:	200003c4 	.word	0x200003c4
 8001608:	40000800 	.word	0x40000800
 800160c:	200003ca 	.word	0x200003ca
 8001610:	2000039c 	.word	0x2000039c
 8001614:	200003ce 	.word	0x200003ce
 8001618:	200003a4 	.word	0x200003a4

0800161c <IR_scan>:

void IR_scan()
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
	dist_t sensor = FL;
 8001622:	2300      	movs	r3, #0
 8001624:	71fb      	strb	r3, [r7, #7]

	do
	{
		IR_dists[sensor] = scaled_average(sensor);
 8001626:	79fc      	ldrb	r4, [r7, #7]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fe28 	bl	8001280 <scaled_average>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <IR_scan+0x44>)
 8001636:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		sensor = (sensor + 1) % 4;
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	3301      	adds	r3, #1
 800163e:	425a      	negs	r2, r3
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	bf58      	it	pl
 800164a:	4253      	negpl	r3, r2
 800164c:	71fb      	strb	r3, [r7, #7]
	} while (sensor != FL);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1e8      	bne.n	8001626 <IR_scan+0xa>
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	bf00      	nop
 8001660:	20000308 	.word	0x20000308

08001664 <wallCheck>:

int wallCheck(dist_t sensor)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	if (IR_dists[sensor] > 0.5 * wall_nominal[sensor])
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <wallCheck+0x54>)
 8001672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fec4 	bl	8000404 <__aeabi_i2d>
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <wallCheck+0x58>)
 8001684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe febb 	bl	8000404 <__aeabi_i2d>
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <wallCheck+0x5c>)
 8001694:	f7fe ff20 	bl	80004d8 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7ff f9aa 	bl	80009f8 <__aeabi_dcmpgt>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <wallCheck+0x4a>
	{
		return 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <wallCheck+0x4c>
	}
	else
	{
		return 0;
 80016ae:	2300      	movs	r3, #0
	}
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdb0      	pop	{r4, r5, r7, pc}
 80016b8:	20000308 	.word	0x20000308
 80016bc:	20000008 	.word	0x20000008
 80016c0:	3fe00000 	.word	0x3fe00000

080016c4 <within_bounds>:

float within_bounds(float f)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if (f < 0)
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fcf5 	bl	80010c0 <__aeabi_fcmplt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <within_bounds+0x1e>
	{
		return 0;
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e00b      	b.n	80016fa <within_bounds+0x36>
	}
	else if (f > 1.5)
 80016e2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fd08 	bl	80010fc <__aeabi_fcmpgt>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <within_bounds+0x34>
	{
		return 1.5;
 80016f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80016f6:	e000      	b.n	80016fa <within_bounds+0x36>
	}
	else
	{
		return f;
 80016f8:	687b      	ldr	r3, [r7, #4]
	}
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001708:	f000 ffac 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800170c:	f000 f84c 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001710:	f000 fa0e 	bl	8001b30 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001714:	f000 f8e2 	bl	80018dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8001718:	f000 f8a2 	bl	8001860 <MX_ADC1_Init>
  MX_TIM3_Init();
 800171c:	f000 f960 	bl	80019e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001720:	f000 f9b2 	bl	8001a88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);		// start timer 2 in interrupt mode

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001724:	2108      	movs	r1, #8
 8001726:	4818      	ldr	r0, [pc, #96]	; (8001788 <main+0x84>)
 8001728:	f002 fd10 	bl	800414c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800172c:	210c      	movs	r1, #12
 800172e:	4816      	ldr	r0, [pc, #88]	; (8001788 <main+0x84>)
 8001730:	f002 fd0c 	bl	800414c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001734:	213c      	movs	r1, #60	; 0x3c
 8001736:	4815      	ldr	r0, [pc, #84]	; (800178c <main+0x88>)
 8001738:	f002 fe4c 	bl	80043d4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800173c:	213c      	movs	r1, #60	; 0x3c
 800173e:	4814      	ldr	r0, [pc, #80]	; (8001790 <main+0x8c>)
 8001740:	f002 fe48 	bl	80043d4 <HAL_TIM_Encoder_Start_IT>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);	//turn off buzzer?
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <main+0x90>)
 800174c:	f001 fed6 	bl	80034fc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  IR_scan();
 8001750:	f7ff ff64 	bl	800161c <IR_scan>
	  wall_left = wallCheck(L);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff ff85 	bl	8001664 <wallCheck>
 800175a:	4603      	mov	r3, r0
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <main+0x94>)
 800175e:	6013      	str	r3, [r2, #0]
	  wall_right = wallCheck(R);
 8001760:	2002      	movs	r0, #2
 8001762:	f7ff ff7f 	bl	8001664 <wallCheck>
 8001766:	4603      	mov	r3, r0
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <main+0x98>)
 800176a:	6013      	str	r3, [r2, #0]
	  wall_front_L = wallCheck(FL);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ff79 	bl	8001664 <wallCheck>
 8001772:	4603      	mov	r3, r0
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <main+0x9c>)
 8001776:	6013      	str	r3, [r2, #0]
	  wall_front_R = wallCheck(FR);
 8001778:	2003      	movs	r0, #3
 800177a:	f7ff ff73 	bl	8001664 <wallCheck>
 800177e:	4603      	mov	r3, r0
 8001780:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <main+0xa0>)
 8001782:	6013      	str	r3, [r2, #0]
	  IR_scan();
 8001784:	e7e4      	b.n	8001750 <main+0x4c>
 8001786:	bf00      	nop
 8001788:	20000230 	.word	0x20000230
 800178c:	20000278 	.word	0x20000278
 8001790:	200002c0 	.word	0x200002c0
 8001794:	40010c00 	.word	0x40010c00
 8001798:	20000388 	.word	0x20000388
 800179c:	2000038c 	.word	0x2000038c
 80017a0:	20000390 	.word	0x20000390
 80017a4:	20000394 	.word	0x20000394

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	2228      	movs	r2, #40	; 0x28
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 f9dd 	bl	8005b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e6:	2301      	movs	r3, #1
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ea:	2302      	movs	r3, #2
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fe94 	bl	800352c <HAL_RCC_OscConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800180a:	f000 fcb9 	bl	8002180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180e:	230f      	movs	r3, #15
 8001810:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001820:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001824:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2102      	movs	r1, #2
 800182c:	4618      	mov	r0, r3
 800182e:	f002 f8ff 	bl	8003a30 <HAL_RCC_ClockConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001838:	f000 fca2 	bl	8002180 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800183c:	2302      	movs	r3, #2
 800183e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fa6c 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001852:	f000 fc95 	bl	8002180 <Error_Handler>
  }
}
 8001856:	bf00      	nop
 8001858:	3750      	adds	r7, #80	; 0x50
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <MX_ADC1_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_ADC1_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_ADC1_Init+0x74>)
 800188a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800188e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001898:	2201      	movs	r2, #1
 800189a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_ADC1_Init+0x74>)
 800189e:	f000 ff43 	bl	8002728 <HAL_ADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018a8:	f000 fc6a 	bl	8002180 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018ac:	2309      	movs	r3, #9
 80018ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_ADC1_Init+0x74>)
 80018be:	f001 f9f7 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018c8:	f000 fc5a 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000200 	.word	0x20000200
 80018d8:	40012400 	.word	0x40012400

080018dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08e      	sub	sp, #56	; 0x38
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <MX_TIM2_Init+0x100>)
 800190e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <MX_TIM2_Init+0x100>)
 8001916:	2248      	movs	r2, #72	; 0x48
 8001918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <MX_TIM2_Init+0x100>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <MX_TIM2_Init+0x100>)
 8001922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <MX_TIM2_Init+0x100>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <MX_TIM2_Init+0x100>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001934:	4829      	ldr	r0, [pc, #164]	; (80019dc <MX_TIM2_Init+0x100>)
 8001936:	f002 fb61 	bl	8003ffc <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001940:	f000 fc1e 	bl	8002180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194e:	4619      	mov	r1, r3
 8001950:	4822      	ldr	r0, [pc, #136]	; (80019dc <MX_TIM2_Init+0x100>)
 8001952:	f002 ffb7 	bl	80048c4 <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800195c:	f000 fc10 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001960:	481e      	ldr	r0, [pc, #120]	; (80019dc <MX_TIM2_Init+0x100>)
 8001962:	f002 fb9a 	bl	800409a <HAL_TIM_PWM_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800196c:	f000 fc08 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4619      	mov	r1, r3
 800197e:	4817      	ldr	r0, [pc, #92]	; (80019dc <MX_TIM2_Init+0x100>)
 8001980:	f003 fb26 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800198a:	f000 fbf9 	bl	8002180 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198e:	2360      	movs	r3, #96	; 0x60
 8001990:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1024;
 8001992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2208      	movs	r2, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_TIM2_Init+0x100>)
 80019a8:	f002 feca 	bl	8004740 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019b2:	f000 fbe5 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	220c      	movs	r2, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <MX_TIM2_Init+0x100>)
 80019be:	f002 febf 	bl	8004740 <HAL_TIM_PWM_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80019c8:	f000 fbda 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <MX_TIM2_Init+0x100>)
 80019ce:	f000 fd03 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 80019d2:	bf00      	nop
 80019d4:	3738      	adds	r7, #56	; 0x38
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000230 	.word	0x20000230

080019e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2224      	movs	r2, #36	; 0x24
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 f8c1 	bl	8005b76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <MX_TIM3_Init+0xa0>)
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <MX_TIM3_Init+0xa4>)
 8001a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_TIM3_Init+0xa0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_TIM3_Init+0xa0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_TIM3_Init+0xa0>)
 8001a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_TIM3_Init+0xa0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_TIM3_Init+0xa0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a22:	2303      	movs	r3, #3
 8001a24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a26:	2302      	movs	r3, #2
 8001a28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a36:	2302      	movs	r3, #2
 8001a38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM3_Init+0xa0>)
 8001a4e:	f002 fc1f 	bl	8004290 <HAL_TIM_Encoder_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a58:	f000 fb92 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM3_Init+0xa0>)
 8001a6a:	f003 fab1 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a74:	f000 fb84 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3730      	adds	r7, #48	; 0x30
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000278 	.word	0x20000278
 8001a84:	40000400 	.word	0x40000400

08001a88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f86d 	bl	8005b76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <MX_TIM4_Init+0xa4>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aca:	2303      	movs	r3, #3
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001af6:	f002 fbcb 	bl	8004290 <HAL_TIM_Encoder_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b00:	f000 fb3e 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_TIM4_Init+0xa0>)
 8001b12:	f003 fa5d 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b1c:	f000 fb30 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200002c0 	.word	0x200002c0
 8001b2c:	40000800 	.word	0x40000800

08001b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b44:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a2c      	ldr	r2, [pc, #176]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4821      	ldr	r0, [pc, #132]	; (8001c30 <MX_GPIO_Init+0x100>)
 8001bac:	f001 fca6 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f64f 5120 	movw	r1, #64800	; 0xfd20
 8001bb6:	481f      	ldr	r0, [pc, #124]	; (8001c34 <MX_GPIO_Init+0x104>)
 8001bb8:	f001 fca0 	bl	80034fc <HAL_GPIO_WritePin>
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	481d      	ldr	r0, [pc, #116]	; (8001c38 <MX_GPIO_Init+0x108>)
 8001bc4:	f001 fc9a 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_GPIO_Init+0x100>)
 8001be2:	f001 fb07 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_FWD_Pin
                           ML_FWD_Pin MR_BWD_Pin EMIT_FR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8001be6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001bea:	613b      	str	r3, [r7, #16]
                          |ML_FWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <MX_GPIO_Init+0x104>)
 8001c00:	f001 faf8 	bl	80031f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ML_BWD_Pin */
  GPIO_InitStruct.Pin = ML_BWD_Pin;
 8001c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ML_BWD_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_GPIO_Init+0x108>)
 8001c1e:	f001 fae9 	bl	80031f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c22:	bf00      	nop
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40011000 	.word	0x40011000
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40010800 	.word	0x40010800

08001c3c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e009      	b.n	8001c62 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fa80 	bl	800115c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf1      	blt.n	8001c4e <_write+0x12>
  }
  return len;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <ADC1_Select_CH1>:

static void ADC1_Select_CH1(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <ADC1_Select_CH1+0x38>)
 8001c96:	f001 f80b 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <ADC1_Select_CH1+0x30>
	{
		Error_Handler();
 8001ca0:	f000 fa6e 	bl	8002180 <Error_Handler>
	}
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000200 	.word	0x20000200

08001cb0 <ADC1_Select_CH4>:

static void ADC1_Select_CH4(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <ADC1_Select_CH4+0x38>)
 8001cd2:	f000 ffed 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <ADC1_Select_CH4+0x30>
	{
		Error_Handler();
 8001cdc:	f000 fa50 	bl	8002180 <Error_Handler>
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000200 	.word	0x20000200

08001cec <ADC1_Select_CH5>:

static void ADC1_Select_CH5(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001d04:	2301      	movs	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <ADC1_Select_CH5+0x38>)
 8001d0e:	f000 ffcf 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <ADC1_Select_CH5+0x30>
	{
		Error_Handler();
 8001d18:	f000 fa32 	bl	8002180 <Error_Handler>
	}
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000200 	.word	0x20000200

08001d28 <ADC1_Select_CH8>:

static void ADC1_Select_CH8(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <ADC1_Select_CH8+0x38>)
 8001d4a:	f000 ffb1 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <ADC1_Select_CH8+0x30>
	{
		Error_Handler();
 8001d54:	f000 fa14 	bl	8002180 <Error_Handler>
	}
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000200 	.word	0x20000200

08001d64 <ADC1_Select_CH9>:

static void ADC1_Select_CH9(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8001d74:	2309      	movs	r3, #9
 8001d76:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <ADC1_Select_CH9+0x38>)
 8001d86:	f000 ff93 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <ADC1_Select_CH9+0x30>
	{
		Error_Handler();
 8001d90:	f000 f9f6 	bl	8002180 <Error_Handler>
	}
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000200 	.word	0x20000200

08001da0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	if (time_count % ((int)(callback_period * 1000)) == 0)
	{
		IR_scan();
 8001da8:	f7ff fc38 	bl	800161c <IR_scan>

		switch(movement)
 8001dac:	4bb2      	ldr	r3, [pc, #712]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	f200 81cb 	bhi.w	800214c <HAL_TIM_PeriodElapsedCallback+0x3ac>
 8001db6:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	0800214d 	.word	0x0800214d
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08002017 	.word	0x08002017
 8001dc8:	080020c5 	.word	0x080020c5
 8001dcc:	08002109 	.word	0x08002109
		{
			case stopped:
				break;
			case forward:
				y = 6;
 8001dd0:	4baa      	ldr	r3, [pc, #680]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001dd2:	2206      	movs	r2, #6
 8001dd4:	601a      	str	r2, [r3, #0]
				fwd_movement = d_center - prev_d_center;
 8001dd6:	4baa      	ldr	r3, [pc, #680]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4baa      	ldr	r3, [pc, #680]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4aa9      	ldr	r2, [pc, #676]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001de2:	6013      	str	r3, [r2, #0]

				// find the difference between intended distance and actual distance
				fwd_error = fwd_movement - intended_distance;
 8001de4:	4ba8      	ldr	r3, [pc, #672]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4ba8      	ldr	r3, [pc, #672]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	4aa8      	ldr	r2, [pc, #672]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001df0:	6013      	str	r3, [r2, #0]

				left_side_error = wall_nominal[L] - IR_dists[L];
 8001df2:	4ba8      	ldr	r3, [pc, #672]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001df4:	885b      	ldrh	r3, [r3, #2]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4ba7      	ldr	r3, [pc, #668]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001dfa:	885b      	ldrh	r3, [r3, #2]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	4aa7      	ldr	r2, [pc, #668]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001e00:	6013      	str	r3, [r2, #0]
				right_side_error = wall_nominal[R] - IR_dists[R];
 8001e02:	4ba4      	ldr	r3, [pc, #656]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e04:	889b      	ldrh	r3, [r3, #4]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4ba3      	ldr	r3, [pc, #652]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001e0a:	889b      	ldrh	r3, [r3, #4]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	4aa4      	ldr	r2, [pc, #656]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001e10:	6013      	str	r3, [r2, #0]

				if (wallCheck(L) && wallCheck(R))
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fc26 	bl	8001664 <wallCheck>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f7ff fc20 	bl	8001664 <wallCheck>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0xa0>
				{
					str_error = right_side_error - left_side_error;
 8001e2a:	4b9d      	ldr	r3, [pc, #628]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b9b      	ldr	r3, [pc, #620]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a9b      	ldr	r2, [pc, #620]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001e36:	6013      	str	r3, [r2, #0]
					rot_error = 0;
 8001e38:	4b9b      	ldr	r3, [pc, #620]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e040      	b.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x122>
				}
				else if (wallCheck(L) && !wallCheck(R))
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff fc0f 	bl	8001664 <wallCheck>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d012      	beq.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f7ff fc09 	bl	8001664 <wallCheck>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10c      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0xd2>
				{
					str_error = -2 * left_side_error;
 8001e58:	4b90      	ldr	r3, [pc, #576]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	07db      	lsls	r3, r3, #31
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b8f      	ldr	r3, [pc, #572]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001e68:	601a      	str	r2, [r3, #0]
					rot_error = 0;
 8001e6a:	4b8f      	ldr	r3, [pc, #572]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e027      	b.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x122>
				}
				else if (!wallCheck(L) && wallCheck(R))
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff fbf6 	bl	8001664 <wallCheck>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10b      	bne.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f7ff fbf0 	bl	8001664 <wallCheck>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					str_error = 2 * right_side_error;
 8001e8a:	4b85      	ldr	r3, [pc, #532]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4a84      	ldr	r2, [pc, #528]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e015      	b.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x122>
				}
				else	// no walls on either side
				{
					rot_error = (angle - intended_angle) % 360;//enc_right - enc_left; // right diff - left diff
 8001e96:	4b85      	ldr	r3, [pc, #532]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4a84      	ldr	r2, [pc, #528]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea6:	441a      	add	r2, r3
 8001ea8:	1211      	asrs	r1, r2, #8
 8001eaa:	17da      	asrs	r2, r3, #31
 8001eac:	1a8a      	subs	r2, r1, r2
 8001eae:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001eb2:	fb01 f202 	mul.w	r2, r1, r2
 8001eb6:	1a9a      	subs	r2, r3, r2
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001eba:	601a      	str	r2, [r3, #0]
					str_error = 0;
 8001ebc:	4b79      	ldr	r3, [pc, #484]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
				}

				new_v_motor_L = within_bounds(base_v_fwd_L - K_fwd * fwd_error + K_rot * rot_error + K_str * str_error);
 8001ec2:	4b7d      	ldr	r3, [pc, #500]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe faaf 	bl	8000428 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fa96 	bl	8000404 <__aeabi_i2d>
 8001ed8:	a361      	add	r3, pc, #388	; (adr r3, 8002060 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fafb 	bl	80004d8 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe f93d 	bl	8000168 <__aeabi_dsub>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fa82 	bl	8000404 <__aeabi_i2d>
 8001f00:	a359      	add	r3, pc, #356	; (adr r3, 8002068 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe fae7 	bl	80004d8 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe f92b 	bl	800016c <__adddf3>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fa6e 	bl	8000404 <__aeabi_i2d>
 8001f28:	a351      	add	r3, pc, #324	; (adr r3, 8002070 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fad3 	bl	80004d8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe f917 	bl	800016c <__adddf3>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fdbf 	bl	8000ac8 <__aeabi_d2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fbb9 	bl	80016c4 <within_bounds>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a59      	ldr	r2, [pc, #356]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001f56:	6013      	str	r3, [r2, #0]
				new_v_motor_R = within_bounds(base_v_fwd_R - K_fwd * fwd_error - K_rot * rot_error - K_str * str_error);
 8001f58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa63 	bl	8000428 <__aeabi_f2d>
 8001f62:	4604      	mov	r4, r0
 8001f64:	460d      	mov	r5, r1
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fa4a 	bl	8000404 <__aeabi_i2d>
 8001f70:	a33b      	add	r3, pc, #236	; (adr r3, 8002060 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe faaf 	bl	80004d8 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe f8f1 	bl	8000168 <__aeabi_dsub>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa36 	bl	8000404 <__aeabi_i2d>
 8001f98:	a333      	add	r3, pc, #204	; (adr r3, 8002068 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fa9b 	bl	80004d8 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f7fe f8dd 	bl	8000168 <__aeabi_dsub>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fa22 	bl	8000404 <__aeabi_i2d>
 8001fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8002070 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fa87 	bl	80004d8 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f7fe f8c9 	bl	8000168 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7fe fd73 	bl	8000ac8 <__aeabi_d2f>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fb6d 	bl	80016c4 <within_bounds>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001fee:	6013      	str	r3, [r2, #0]

				// IMPORTANT: left motor is channel 4, right motor is channel 3
				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fa01 	bl	80013fc <calc_PWM>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 8002002:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f9f8 	bl	80013fc <calc_PWM>
 800200c:	4602      	mov	r2, r0
 800200e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c

				break;
 8002014:	e09a      	b.n	800214c <HAL_TIM_PeriodElapsedCallback+0x3ac>
			case turn_L:
//				rot_error = (enc_right - initial_enc_right) + (enc_left - initial_enc_left);

				new_v_motor_L = within_bounds(base_v_turn_L);// + K_turn * rot_error);
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fb53 	bl	80016c4 <within_bounds>
 800201e:	4603      	mov	r3, r0
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002022:	6013      	str	r3, [r2, #0]
				new_v_motor_R = within_bounds(base_v_turn_R);// - K_turn * rot_error);
 8002024:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fb4b 	bl	80016c4 <within_bounds>
 800202e:	4603      	mov	r3, r0
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002032:	6013      	str	r3, [r2, #0]

				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f9df 	bl	80013fc <calc_PWM>
 800203e:	4602      	mov	r2, r0
 8002040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f9d6 	bl	80013fc <calc_PWM>
 8002050:	4602      	mov	r2, r0
 8002052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002058:	e078      	b.n	800214c <HAL_TIM_PeriodElapsedCallback+0x3ac>
 800205a:	bf00      	nop
 800205c:	f3af 8000 	nop.w
 8002060:	9999999a 	.word	0x9999999a
 8002064:	3fb99999 	.word	0x3fb99999
 8002068:	d2f1a9fc 	.word	0xd2f1a9fc
 800206c:	3f70624d 	.word	0x3f70624d
 8002070:	eb1c432d 	.word	0xeb1c432d
 8002074:	3f3a36e2 	.word	0x3f3a36e2
 8002078:	200003f4 	.word	0x200003f4
 800207c:	200003dc 	.word	0x200003dc
 8002080:	200003a8 	.word	0x200003a8
 8002084:	200003ac 	.word	0x200003ac
 8002088:	200003d0 	.word	0x200003d0
 800208c:	200003e8 	.word	0x200003e8
 8002090:	200003b0 	.word	0x200003b0
 8002094:	20000008 	.word	0x20000008
 8002098:	20000308 	.word	0x20000308
 800209c:	200003bc 	.word	0x200003bc
 80020a0:	200003c0 	.word	0x200003c0
 80020a4:	200003b8 	.word	0x200003b8
 80020a8:	200003b4 	.word	0x200003b4
 80020ac:	200003c4 	.word	0x200003c4
 80020b0:	200003f0 	.word	0x200003f0
 80020b4:	b60b60b7 	.word	0xb60b60b7
 80020b8:	3f333333 	.word	0x3f333333
 80020bc:	200003d4 	.word	0x200003d4
 80020c0:	200003d8 	.word	0x200003d8
			case turn_R:
//				rot_error = enc_left + enc_right;

				new_v_motor_L = within_bounds(base_v_turn_L);// - K_turn * rot_error);
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fafc 	bl	80016c4 <within_bounds>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80020d0:	6013      	str	r3, [r2, #0]
				new_v_motor_R = within_bounds(base_v_turn_R);// + K_turn * rot_error);
 80020d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff faf4 	bl	80016c4 <within_bounds>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a24      	ldr	r2, [pc, #144]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 80020e0:	6013      	str	r3, [r2, #0]

				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f988 	bl	80013fc <calc_PWM>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f97f 	bl	80013fc <calc_PWM>
 80020fe:	4602      	mov	r2, r0
 8002100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002104:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8002106:	e021      	b.n	800214c <HAL_TIM_PeriodElapsedCallback+0x3ac>
			case turn_180:
//				rot_error = enc_right + enc_left;

				new_v_motor_L = within_bounds(base_v_turn_L);// + K_turn * rot_error);
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fada 	bl	80016c4 <within_bounds>
 8002110:	4603      	mov	r3, r0
 8002112:	4a16      	ldr	r2, [pc, #88]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002114:	6013      	str	r3, [r2, #0]
				new_v_motor_R = within_bounds(base_v_turn_R);// - K_turn * rot_error);
 8002116:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fad2 	bl	80016c4 <within_bounds>
 8002120:	4603      	mov	r3, r0
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002124:	6013      	str	r3, [r2, #0]

				TIM2->CCR4 = calc_PWM(new_v_motor_L);
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f966 	bl	80013fc <calc_PWM>
 8002130:	4602      	mov	r2, r0
 8002132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
				TIM2->CCR3 = calc_PWM(new_v_motor_R);
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff f95d 	bl	80013fc <calc_PWM>
 8002142:	4602      	mov	r2, r0
 8002144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002148:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800214a:	bf00      	nop
		}

		prev_d_center = d_center;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002152:	6013      	str	r3, [r2, #0]
	}

	time_count++;
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800215c:	6013      	str	r3, [r2, #0]
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bdb0      	pop	{r4, r5, r7, pc}
 8002166:	bf00      	nop
 8002168:	3f333333 	.word	0x3f333333
 800216c:	200003d4 	.word	0x200003d4
 8002170:	200003d8 	.word	0x200003d8
 8002174:	200003a8 	.word	0x200003a8
 8002178:	200003ac 	.word	0x200003ac
 800217c:	200003ec 	.word	0x200003ec

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002188:	e7fe      	b.n	8002188 <Error_Handler+0x8>
	...

0800218c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_MspInit+0x5c>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_MspInit+0x5c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6193      	str	r3, [r2, #24]
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_MspInit+0x5c>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_MspInit+0x5c>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_MspInit+0x5c>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_MspInit+0x5c>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_MspInit+0x60>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_MspInit+0x60>)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40010000 	.word	0x40010000

080021f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_ADC_MspInit+0x98>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d137      	bne.n	8002280 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_ADC_MspInit+0x9c>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_ADC_MspInit+0x9c>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_ADC_MspInit+0x9c>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_ADC_MspInit+0x9c>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_ADC_MspInit+0x9c>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_ADC_MspInit+0x9c>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_ADC_MspInit+0x9c>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_ADC_MspInit+0x9c>)
 8002246:	f043 0308 	orr.w	r3, r3, #8
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_ADC_MspInit+0x9c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_METER_Pin|RECIV_FR_Pin|RECIV_R_Pin;
 8002258:	2332      	movs	r3, #50	; 0x32
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800225c:	2303      	movs	r3, #3
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	4619      	mov	r1, r3
 8002266:	480a      	ldr	r0, [pc, #40]	; (8002290 <HAL_ADC_MspInit+0xa0>)
 8002268:	f000 ffc4 	bl	80031f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 800226c:	2303      	movs	r3, #3
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002270:	2303      	movs	r3, #3
 8002272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0318 	add.w	r3, r7, #24
 8002278:	4619      	mov	r1, r3
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <HAL_ADC_MspInit+0xa4>)
 800227c:	f000 ffba 	bl	80031f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40012400 	.word	0x40012400
 800228c:	40021000 	.word	0x40021000
 8002290:	40010800 	.word	0x40010800
 8002294:	40010c00 	.word	0x40010c00

08002298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d113      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_TIM_Base_MspInit+0x44>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <HAL_TIM_Base_MspInit+0x44>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_TIM_Base_MspInit+0x44>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	210f      	movs	r1, #15
 80022c6:	201c      	movs	r0, #28
 80022c8:	f000 ff5d 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022cc:	201c      	movs	r0, #28
 80022ce:	f000 ff76 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <HAL_TIM_Encoder_MspInit+0xe4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d12c      	bne.n	800235a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	61d3      	str	r3, [r2, #28]
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8002330:	23c0      	movs	r3, #192	; 0xc0
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0318 	add.w	r3, r7, #24
 8002340:	4619      	mov	r1, r3
 8002342:	4822      	ldr	r0, [pc, #136]	; (80023cc <HAL_TIM_Encoder_MspInit+0xec>)
 8002344:	f000 ff56 	bl	80031f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	201d      	movs	r0, #29
 800234e:	f000 ff1a 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002352:	201d      	movs	r0, #29
 8002354:	f000 ff33 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002358:	e030      	b.n	80023bc <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d12b      	bne.n	80023bc <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	61d3      	str	r3, [r2, #28]
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8002394:	23c0      	movs	r3, #192	; 0xc0
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4619      	mov	r1, r3
 80023a6:	480b      	ldr	r0, [pc, #44]	; (80023d4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80023a8:	f000 ff24 	bl	80031f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	201e      	movs	r0, #30
 80023b2:	f000 fee8 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023b6:	201e      	movs	r0, #30
 80023b8:	f000 ff01 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010800 	.word	0x40010800
 80023d0:	40000800 	.word	0x40000800
 80023d4:	40010c00 	.word	0x40010c00

080023d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d117      	bne.n	8002428 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_TIM_MspPostInit+0x58>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_TIM_MspPostInit+0x58>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_TIM_MspPostInit+0x58>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 8002410:	230c      	movs	r3, #12
 8002412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2302      	movs	r3, #2
 800241a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4619      	mov	r1, r3
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <HAL_TIM_MspPostInit+0x5c>)
 8002424:	f000 fee6 	bl	80031f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	40010800 	.word	0x40010800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247e:	f000 f937 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM2_IRQHandler+0x10>)
 800248e:	f002 f84f 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000230 	.word	0x20000230

0800249c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM3_IRQHandler+0x10>)
 80024a2:	f002 f845 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000278 	.word	0x20000278

080024b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM4_IRQHandler+0x10>)
 80024b6:	f002 f83b 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200002c0 	.word	0x200002c0

080024c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <_kill>:

int _kill(int pid, int sig)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024dc:	f003 fb9e 	bl	8005c1c <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2216      	movs	r2, #22
 80024e4:	601a      	str	r2, [r3, #0]
  return -1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_exit>:

void _exit (int status)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024fa:	f04f 31ff 	mov.w	r1, #4294967295
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffe7 	bl	80024d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002504:	e7fe      	b.n	8002504 <_exit+0x12>

08002506 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e00a      	b.n	800252e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002518:	f3af 8000 	nop.w
 800251c:	4601      	mov	r1, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	60ba      	str	r2, [r7, #8]
 8002524:	b2ca      	uxtb	r2, r1
 8002526:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	dbf0      	blt.n	8002518 <_read+0x12>
  }

  return len;
 8002536:	687b      	ldr	r3, [r7, #4]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002566:	605a      	str	r2, [r3, #4]
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <_isatty>:

int _isatty(int file)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <_sbrk+0x5c>)
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <_sbrk+0x60>)
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <_sbrk+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <_sbrk+0x64>)
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <_sbrk+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d207      	bcs.n	80025e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d0:	f003 fb24 	bl	8005c1c <__errno>
 80025d4:	4603      	mov	r3, r0
 80025d6:	220c      	movs	r2, #12
 80025d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	e009      	b.n	80025f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <_sbrk+0x64>)
 80025f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20005000 	.word	0x20005000
 8002600:	00000400 	.word	0x00000400
 8002604:	200003fc 	.word	0x200003fc
 8002608:	20000550 	.word	0x20000550

0800260c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002618:	f7ff fff8 	bl	800260c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800261c:	480b      	ldr	r0, [pc, #44]	; (800264c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800261e:	490c      	ldr	r1, [pc, #48]	; (8002650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002624:	e002      	b.n	800262c <LoopCopyDataInit>

08002626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262a:	3304      	adds	r3, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800262c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002630:	d3f9      	bcc.n	8002626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002634:	4c09      	ldr	r4, [pc, #36]	; (800265c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002638:	e001      	b.n	800263e <LoopFillZerobss>

0800263a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263c:	3204      	adds	r2, #4

0800263e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002640:	d3fb      	bcc.n	800263a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002642:	f003 faf1 	bl	8005c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002646:	f7ff f85d 	bl	8001704 <main>
  bx lr
 800264a:	4770      	bx	lr
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002654:	08007dcc 	.word	0x08007dcc
  ldr r2, =_sbss
 8002658:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800265c:	20000550 	.word	0x20000550

08002660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC1_2_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_Init+0x28>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_Init+0x28>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002674:	2003      	movs	r0, #3
 8002676:	f000 fd7b 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	200e      	movs	r0, #14
 800267c:	f000 f808 	bl	8002690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff fd84 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x54>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x58>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fd93 	bl	80031da <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00e      	b.n	80026dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d80a      	bhi.n	80026da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 fd5b 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_InitTick+0x5c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000010 	.word	0x20000010
 80026e8:	20000018 	.word	0x20000018
 80026ec:	20000014 	.word	0x20000014

080026f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x1c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_IncTick+0x20>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_IncTick+0x20>)
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	20000018 	.word	0x20000018
 8002710:	20000400 	.word	0x20000400

08002714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <HAL_GetTick+0x10>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20000400 	.word	0x20000400

08002728 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0be      	b.n	80028c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fd42 	bl	80021f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fbf1 	bl	8002f54 <ADC_ConversionStop_Disable>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8099 	bne.w	80028b6 <HAL_ADC_Init+0x18e>
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8095 	bne.w	80028b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002794:	f023 0302 	bic.w	r3, r3, #2
 8002798:	f043 0202 	orr.w	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7b1b      	ldrb	r3, [r3, #12]
 80027ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c0:	d003      	beq.n	80027ca <HAL_ADC_Init+0xa2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_ADC_Init+0xa8>
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_Init+0xaa>
 80027d0:	2300      	movs	r3, #0
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7d1b      	ldrb	r3, [r3, #20]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d119      	bne.n	8002814 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7b1b      	ldrb	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	035a      	lsls	r2, r3, #13
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e00b      	b.n	8002814 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HAL_ADC_Init+0x1a8>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002844:	d003      	beq.n	800284e <HAL_ADC_Init+0x126>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d104      	bne.n	8002858 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	3b01      	subs	r3, #1
 8002854:	051b      	lsls	r3, r3, #20
 8002856:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	430a      	orrs	r2, r1
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_ADC_Init+0x1ac>)
 8002874:	4013      	ands	r3, r2
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d10b      	bne.n	8002894 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002892:	e018      	b.n	80028c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f023 0312 	bic.w	r3, r3, #18
 800289c:	f043 0210 	orr.w	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028b4:	e007      	b.n	80028c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	ffe1f7fd 	.word	0xffe1f7fd
 80028d4:	ff1f0efe 	.word	0xff1f0efe

080028d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_Start+0x1a>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e098      	b.n	8002a24 <HAL_ADC_Start+0x14c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fad0 	bl	8002ea0 <ADC_Enable>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 8087 	bne.w	8002a1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a41      	ldr	r2, [pc, #260]	; (8002a2c <HAL_ADC_Start+0x154>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d105      	bne.n	8002936 <HAL_ADC_Start+0x5e>
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_ADC_Start+0x158>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d026      	beq.n	800299e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002958:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002960:	e01d      	b.n	800299e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <HAL_ADC_Start+0x158>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_ADC_Start+0xaa>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <HAL_ADC_Start+0x154>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10d      	bne.n	800299e <HAL_ADC_Start+0xc6>
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_ADC_Start+0x158>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002996:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f023 0206 	bic.w	r2, r3, #6
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029b6:	e002      	b.n	80029be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f06f 0202 	mvn.w	r2, #2
 80029ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029de:	d113      	bne.n	8002a08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_ADC_Start+0x154>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_ADC_Start+0x158>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	e00c      	b.n	8002a22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e003      	b.n	8002a22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012800 	.word	0x40012800
 8002a30:	40012400 	.word	0x40012400

08002a34 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_Stop+0x1a>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e01a      	b.n	8002a84 <HAL_ADC_Stop+0x50>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa7c 	bl	8002f54 <ADC_ConversionStop_Disable>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002aa2:	f7ff fe37 	bl	8002714 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0d3      	b.n	8002c76 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d131      	bne.n	8002b40 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d12a      	bne.n	8002b40 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002aea:	e021      	b.n	8002b30 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d01d      	beq.n	8002b30 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x7e>
 8002afa:	f7ff fe0b 	bl	8002714 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d212      	bcs.n	8002b30 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e0a2      	b.n	8002c76 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0d6      	beq.n	8002aec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b3e:	e070      	b.n	8002c22 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b40:	4b4f      	ldr	r3, [pc, #316]	; (8002c80 <HAL_ADC_PollForConversion+0x1f4>)
 8002b42:	681c      	ldr	r4, [r3, #0]
 8002b44:	2002      	movs	r0, #2
 8002b46:	f001 f9a3 	bl	8003e90 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_ADC_PollForConversion+0x1f8>)
 8002b58:	400b      	ands	r3, r1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x104>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68d9      	ldr	r1, [r3, #12]
 8002b64:	4b48      	ldr	r3, [pc, #288]	; (8002c88 <HAL_ADC_PollForConversion+0x1fc>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x104>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6919      	ldr	r1, [r3, #16]
 8002b72:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_ADC_PollForConversion+0x200>)
 8002b74:	400b      	ands	r3, r1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x100>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68d9      	ldr	r1, [r3, #12]
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_ADC_PollForConversion+0x204>)
 8002b82:	400b      	ands	r3, r1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_PollForConversion+0x100>
 8002b88:	2314      	movs	r3, #20
 8002b8a:	e020      	b.n	8002bce <HAL_ADC_PollForConversion+0x142>
 8002b8c:	2329      	movs	r3, #41	; 0x29
 8002b8e:	e01e      	b.n	8002bce <HAL_ADC_PollForConversion+0x142>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6919      	ldr	r1, [r3, #16]
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_ADC_PollForConversion+0x200>)
 8002b98:	400b      	ands	r3, r1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_ADC_PollForConversion+0x120>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_ADC_PollForConversion+0x204>)
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <HAL_ADC_PollForConversion+0x13c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6919      	ldr	r1, [r3, #16]
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_ADC_PollForConversion+0x208>)
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_ADC_PollForConversion+0x140>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68d9      	ldr	r1, [r3, #12]
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_ADC_PollForConversion+0x208>)
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_PollForConversion+0x140>
 8002bc8:	2354      	movs	r3, #84	; 0x54
 8002bca:	e000      	b.n	8002bce <HAL_ADC_PollForConversion+0x142>
 8002bcc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bd4:	e021      	b.n	8002c1a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d01a      	beq.n	8002c14 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_ADC_PollForConversion+0x168>
 8002be4:	f7ff fd96 	bl	8002714 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d20f      	bcs.n	8002c14 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d90b      	bls.n	8002c14 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e030      	b.n	8002c76 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d8d9      	bhi.n	8002bd6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 0212 	mvn.w	r2, #18
 8002c2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c46:	d115      	bne.n	8002c74 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d111      	bne.n	8002c74 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000010 	.word	0x20000010
 8002c84:	24924924 	.word	0x24924924
 8002c88:	00924924 	.word	0x00924924
 8002c8c:	12492492 	.word	0x12492492
 8002c90:	00492492 	.word	0x00492492
 8002c94:	00249249 	.word	0x00249249

08002c98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x20>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0dc      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x1da>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d81c      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b05      	subs	r3, #5
 8002cf2:	221f      	movs	r2, #31
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	4019      	ands	r1, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b05      	subs	r3, #5
 8002d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34
 8002d18:	e03c      	b.n	8002d94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d81c      	bhi.n	8002d5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3b23      	subs	r3, #35	; 0x23
 8002d34:	221f      	movs	r2, #31
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4019      	ands	r1, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b23      	subs	r3, #35	; 0x23
 8002d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
 8002d5a:	e01b      	b.n	8002d94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b41      	subs	r3, #65	; 0x41
 8002d6e:	221f      	movs	r2, #31
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4019      	ands	r1, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b41      	subs	r3, #65	; 0x41
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	d91c      	bls.n	8002dd6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68d9      	ldr	r1, [r3, #12]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	3b1e      	subs	r3, #30
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4019      	ands	r1, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6898      	ldr	r0, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	e019      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6919      	ldr	r1, [r3, #16]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	2207      	movs	r2, #7
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4019      	ands	r1, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6898      	ldr	r0, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d003      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e16:	2b11      	cmp	r3, #17
 8002e18:	d132      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d125      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d126      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d11a      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <HAL_ADC_ConfigChannel+0x1ec>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0c9a      	lsrs	r2, r3, #18
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1b2>
 8002e6e:	e007      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40012400 	.word	0x40012400
 8002e98:	20000010 	.word	0x20000010
 8002e9c:	431bde83 	.word	0x431bde83

08002ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d040      	beq.n	8002f40 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <ADC_Enable+0xac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <ADC_Enable+0xb0>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	0c9b      	lsrs	r3, r3, #18
 8002eda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002edc:	e002      	b.n	8002ee4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f9      	bne.n	8002ede <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eea:	f7ff fc13 	bl	8002714 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ef0:	e01f      	b.n	8002f32 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ef2:	f7ff fc0f 	bl	8002714 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d918      	bls.n	8002f32 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d011      	beq.n	8002f32 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f043 0210 	orr.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e007      	b.n	8002f42 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d1d8      	bne.n	8002ef2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000010 	.word	0x20000010
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d12e      	bne.n	8002fcc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f7e:	f7ff fbc9 	bl	8002714 <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f84:	e01b      	b.n	8002fbe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f86:	f7ff fbc5 	bl	8002714 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d914      	bls.n	8002fbe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10d      	bne.n	8002fbe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	f043 0210 	orr.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e007      	b.n	8002fce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d0dc      	beq.n	8002f86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <__NVIC_SetPriorityGrouping>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4906      	ldr	r1, [pc, #24]	; (8003070 <__NVIC_EnableIRQ+0x34>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <SysTick_Config>:
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff90 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff2d 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff42 	bl	8003020 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff90 	bl	80030c8 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5f 	bl	8003074 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff35 	bl	800303c <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b08b      	sub	sp, #44	; 0x2c
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003206:	e169      	b.n	80034dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003208:	2201      	movs	r2, #1
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	429a      	cmp	r2, r3
 8003222:	f040 8158 	bne.w	80034d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a9a      	ldr	r2, [pc, #616]	; (8003494 <HAL_GPIO_Init+0x2a0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d05e      	beq.n	80032ee <HAL_GPIO_Init+0xfa>
 8003230:	4a98      	ldr	r2, [pc, #608]	; (8003494 <HAL_GPIO_Init+0x2a0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d875      	bhi.n	8003322 <HAL_GPIO_Init+0x12e>
 8003236:	4a98      	ldr	r2, [pc, #608]	; (8003498 <HAL_GPIO_Init+0x2a4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d058      	beq.n	80032ee <HAL_GPIO_Init+0xfa>
 800323c:	4a96      	ldr	r2, [pc, #600]	; (8003498 <HAL_GPIO_Init+0x2a4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d86f      	bhi.n	8003322 <HAL_GPIO_Init+0x12e>
 8003242:	4a96      	ldr	r2, [pc, #600]	; (800349c <HAL_GPIO_Init+0x2a8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d052      	beq.n	80032ee <HAL_GPIO_Init+0xfa>
 8003248:	4a94      	ldr	r2, [pc, #592]	; (800349c <HAL_GPIO_Init+0x2a8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d869      	bhi.n	8003322 <HAL_GPIO_Init+0x12e>
 800324e:	4a94      	ldr	r2, [pc, #592]	; (80034a0 <HAL_GPIO_Init+0x2ac>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d04c      	beq.n	80032ee <HAL_GPIO_Init+0xfa>
 8003254:	4a92      	ldr	r2, [pc, #584]	; (80034a0 <HAL_GPIO_Init+0x2ac>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d863      	bhi.n	8003322 <HAL_GPIO_Init+0x12e>
 800325a:	4a92      	ldr	r2, [pc, #584]	; (80034a4 <HAL_GPIO_Init+0x2b0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d046      	beq.n	80032ee <HAL_GPIO_Init+0xfa>
 8003260:	4a90      	ldr	r2, [pc, #576]	; (80034a4 <HAL_GPIO_Init+0x2b0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d85d      	bhi.n	8003322 <HAL_GPIO_Init+0x12e>
 8003266:	2b12      	cmp	r3, #18
 8003268:	d82a      	bhi.n	80032c0 <HAL_GPIO_Init+0xcc>
 800326a:	2b12      	cmp	r3, #18
 800326c:	d859      	bhi.n	8003322 <HAL_GPIO_Init+0x12e>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_GPIO_Init+0x80>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032ef 	.word	0x080032ef
 8003278:	080032c9 	.word	0x080032c9
 800327c:	080032db 	.word	0x080032db
 8003280:	0800331d 	.word	0x0800331d
 8003284:	08003323 	.word	0x08003323
 8003288:	08003323 	.word	0x08003323
 800328c:	08003323 	.word	0x08003323
 8003290:	08003323 	.word	0x08003323
 8003294:	08003323 	.word	0x08003323
 8003298:	08003323 	.word	0x08003323
 800329c:	08003323 	.word	0x08003323
 80032a0:	08003323 	.word	0x08003323
 80032a4:	08003323 	.word	0x08003323
 80032a8:	08003323 	.word	0x08003323
 80032ac:	08003323 	.word	0x08003323
 80032b0:	08003323 	.word	0x08003323
 80032b4:	08003323 	.word	0x08003323
 80032b8:	080032d1 	.word	0x080032d1
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	4a79      	ldr	r2, [pc, #484]	; (80034a8 <HAL_GPIO_Init+0x2b4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032c6:	e02c      	b.n	8003322 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	623b      	str	r3, [r7, #32]
          break;
 80032ce:	e029      	b.n	8003324 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	3304      	adds	r3, #4
 80032d6:	623b      	str	r3, [r7, #32]
          break;
 80032d8:	e024      	b.n	8003324 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	3308      	adds	r3, #8
 80032e0:	623b      	str	r3, [r7, #32]
          break;
 80032e2:	e01f      	b.n	8003324 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	330c      	adds	r3, #12
 80032ea:	623b      	str	r3, [r7, #32]
          break;
 80032ec:	e01a      	b.n	8003324 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032f6:	2304      	movs	r3, #4
 80032f8:	623b      	str	r3, [r7, #32]
          break;
 80032fa:	e013      	b.n	8003324 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003304:	2308      	movs	r3, #8
 8003306:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	611a      	str	r2, [r3, #16]
          break;
 800330e:	e009      	b.n	8003324 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003310:	2308      	movs	r3, #8
 8003312:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	615a      	str	r2, [r3, #20]
          break;
 800331a:	e003      	b.n	8003324 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800331c:	2300      	movs	r3, #0
 800331e:	623b      	str	r3, [r7, #32]
          break;
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x130>
          break;
 8003322:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2bff      	cmp	r3, #255	; 0xff
 8003328:	d801      	bhi.n	800332e <HAL_GPIO_Init+0x13a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	e001      	b.n	8003332 <HAL_GPIO_Init+0x13e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2bff      	cmp	r3, #255	; 0xff
 8003338:	d802      	bhi.n	8003340 <HAL_GPIO_Init+0x14c>
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	e002      	b.n	8003346 <HAL_GPIO_Init+0x152>
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	3b08      	subs	r3, #8
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	210f      	movs	r1, #15
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	401a      	ands	r2, r3
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	431a      	orrs	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80b1 	beq.w	80034d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003374:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <HAL_GPIO_Init+0x2b8>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	4a4c      	ldr	r2, [pc, #304]	; (80034ac <HAL_GPIO_Init+0x2b8>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6193      	str	r3, [r2, #24]
 8003380:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <HAL_GPIO_Init+0x2b8>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800338c:	4a48      	ldr	r2, [pc, #288]	; (80034b0 <HAL_GPIO_Init+0x2bc>)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	220f      	movs	r2, #15
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <HAL_GPIO_Init+0x2c0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_GPIO_Init+0x1ec>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3f      	ldr	r2, [pc, #252]	; (80034b8 <HAL_GPIO_Init+0x2c4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00d      	beq.n	80033dc <HAL_GPIO_Init+0x1e8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3e      	ldr	r2, [pc, #248]	; (80034bc <HAL_GPIO_Init+0x2c8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <HAL_GPIO_Init+0x1e4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3d      	ldr	r2, [pc, #244]	; (80034c0 <HAL_GPIO_Init+0x2cc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_GPIO_Init+0x1e0>
 80033d0:	2303      	movs	r3, #3
 80033d2:	e006      	b.n	80033e2 <HAL_GPIO_Init+0x1ee>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e004      	b.n	80033e2 <HAL_GPIO_Init+0x1ee>
 80033d8:	2302      	movs	r3, #2
 80033da:	e002      	b.n	80033e2 <HAL_GPIO_Init+0x1ee>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_GPIO_Init+0x1ee>
 80033e0:	2300      	movs	r3, #0
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	f002 0203 	and.w	r2, r2, #3
 80033e8:	0092      	lsls	r2, r2, #2
 80033ea:	4093      	lsls	r3, r2
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033f2:	492f      	ldr	r1, [pc, #188]	; (80034b0 <HAL_GPIO_Init+0x2bc>)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	3302      	adds	r3, #2
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	492c      	ldr	r1, [pc, #176]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]
 8003418:	e006      	b.n	8003428 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	43db      	mvns	r3, r3
 8003422:	4928      	ldr	r1, [pc, #160]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 8003424:	4013      	ands	r3, r2
 8003426:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	4922      	ldr	r1, [pc, #136]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	60cb      	str	r3, [r1, #12]
 8003440:	e006      	b.n	8003450 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	43db      	mvns	r3, r3
 800344a:	491e      	ldr	r1, [pc, #120]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 800344c:	4013      	ands	r3, r2
 800344e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4918      	ldr	r1, [pc, #96]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	43db      	mvns	r3, r3
 8003472:	4914      	ldr	r1, [pc, #80]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 8003474:	4013      	ands	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d021      	beq.n	80034c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	490e      	ldr	r1, [pc, #56]	; (80034c4 <HAL_GPIO_Init+0x2d0>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
 8003490:	e021      	b.n	80034d6 <HAL_GPIO_Init+0x2e2>
 8003492:	bf00      	nop
 8003494:	10320000 	.word	0x10320000
 8003498:	10310000 	.word	0x10310000
 800349c:	10220000 	.word	0x10220000
 80034a0:	10210000 	.word	0x10210000
 80034a4:	10120000 	.word	0x10120000
 80034a8:	10110000 	.word	0x10110000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40010800 	.word	0x40010800
 80034b8:	40010c00 	.word	0x40010c00
 80034bc:	40011000 	.word	0x40011000
 80034c0:	40011400 	.word	0x40011400
 80034c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_GPIO_Init+0x304>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	4909      	ldr	r1, [pc, #36]	; (80034f8 <HAL_GPIO_Init+0x304>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	3301      	adds	r3, #1
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f47f ae8e 	bne.w	8003208 <HAL_GPIO_Init+0x14>
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	372c      	adds	r7, #44	; 0x2c
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	40010400 	.word	0x40010400

080034fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	4613      	mov	r3, r2
 800350a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003518:	e003      	b.n	8003522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	041a      	lsls	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e272      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8087 	beq.w	800365a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b04      	cmp	r3, #4
 8003556:	d00c      	beq.n	8003572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003558:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d112      	bne.n	800358a <HAL_RCC_OscConfig+0x5e>
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d10b      	bne.n	800358a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003572:	4b89      	ldr	r3, [pc, #548]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d06c      	beq.n	8003658 <HAL_RCC_OscConfig+0x12c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d168      	bne.n	8003658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e24c      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x76>
 8003594:	4b80      	ldr	r3, [pc, #512]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a7f      	ldr	r2, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e02e      	b.n	8003600 <HAL_RCC_OscConfig+0xd4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7a      	ldr	r2, [pc, #488]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a77      	ldr	r2, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e01d      	b.n	8003600 <HAL_RCC_OscConfig+0xd4>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0xbc>
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a71      	ldr	r2, [pc, #452]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0xd4>
 80035e8:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a67      	ldr	r2, [pc, #412]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7ff f884 	bl	8002714 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003610:	f7ff f880 	bl	8002714 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e200      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0xe4>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7ff f870 	bl	8002714 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7ff f86c 	bl	8002714 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e1ec      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x10c>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d063      	beq.n	800372e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003666:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	d11c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x18c>
 800367e:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d116      	bne.n	80036b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_RCC_OscConfig+0x176>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e1c0      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a2:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4939      	ldr	r1, [pc, #228]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	e03a      	b.n	800372e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c0:	4b36      	ldr	r3, [pc, #216]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7ff f825 	bl	8002714 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ce:	f7ff f821 	bl	8002714 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e1a1      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4927      	ldr	r1, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7ff f804 	bl	8002714 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003710:	f7ff f800 	bl	8002714 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e180      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03a      	beq.n	80037b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d019      	beq.n	8003776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <HAL_RCC_OscConfig+0x274>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fe ffe4 	bl	8002714 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003750:	f7fe ffe0 	bl	8002714 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e160      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x26c>)
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800376e:	2001      	movs	r0, #1
 8003770:	f000 faba 	bl	8003ce8 <RCC_Delay>
 8003774:	e01c      	b.n	80037b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_OscConfig+0x274>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe ffca 	bl	8002714 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003782:	e00f      	b.n	80037a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe ffc6 	bl	8002714 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d908      	bls.n	80037a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e146      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	42420000 	.word	0x42420000
 80037a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	4b92      	ldr	r3, [pc, #584]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e9      	bne.n	8003784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80a6 	beq.w	800390a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c2:	4b8b      	ldr	r3, [pc, #556]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10d      	bne.n	80037ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4a87      	ldr	r2, [pc, #540]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	61d3      	str	r3, [r2, #28]
 80037da:	4b85      	ldr	r3, [pc, #532]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <HAL_RCC_OscConfig+0x4c8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d118      	bne.n	8003828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <HAL_RCC_OscConfig+0x4c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7e      	ldr	r2, [pc, #504]	; (80039f4 <HAL_RCC_OscConfig+0x4c8>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fe ff87 	bl	8002714 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fe ff83 	bl	8002714 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b64      	cmp	r3, #100	; 0x64
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e103      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b75      	ldr	r3, [pc, #468]	; (80039f4 <HAL_RCC_OscConfig+0x4c8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x312>
 8003830:	4b6f      	ldr	r3, [pc, #444]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a6e      	ldr	r2, [pc, #440]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6213      	str	r3, [r2, #32]
 800383c:	e02d      	b.n	800389a <HAL_RCC_OscConfig+0x36e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x334>
 8003846:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a69      	ldr	r2, [pc, #420]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6213      	str	r3, [r2, #32]
 8003852:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a66      	ldr	r2, [pc, #408]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	6213      	str	r3, [r2, #32]
 800385e:	e01c      	b.n	800389a <HAL_RCC_OscConfig+0x36e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b05      	cmp	r3, #5
 8003866:	d10c      	bne.n	8003882 <HAL_RCC_OscConfig+0x356>
 8003868:	4b61      	ldr	r3, [pc, #388]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4a60      	ldr	r2, [pc, #384]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	f043 0304 	orr.w	r3, r3, #4
 8003872:	6213      	str	r3, [r2, #32]
 8003874:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6213      	str	r3, [r2, #32]
 8003880:	e00b      	b.n	800389a <HAL_RCC_OscConfig+0x36e>
 8003882:	4b5b      	ldr	r3, [pc, #364]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	6213      	str	r3, [r2, #32]
 800388e:	4b58      	ldr	r3, [pc, #352]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4a57      	ldr	r2, [pc, #348]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003894:	f023 0304 	bic.w	r3, r3, #4
 8003898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d015      	beq.n	80038ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe ff37 	bl	8002714 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fe ff33 	bl	8002714 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e0b1      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c0:	4b4b      	ldr	r3, [pc, #300]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ee      	beq.n	80038aa <HAL_RCC_OscConfig+0x37e>
 80038cc:	e014      	b.n	80038f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fe ff21 	bl	8002714 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fe ff1d 	bl	8002714 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e09b      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ec:	4b40      	ldr	r3, [pc, #256]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ee      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d105      	bne.n	800390a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fe:	4b3c      	ldr	r3, [pc, #240]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4a3b      	ldr	r2, [pc, #236]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8087 	beq.w	8003a22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b08      	cmp	r3, #8
 800391e:	d061      	beq.n	80039e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d146      	bne.n	80039b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7fe fef1 	bl	8002714 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7fe feed 	bl	8002714 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e06d      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d108      	bne.n	8003970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4921      	ldr	r1, [pc, #132]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a19      	ldr	r1, [r3, #32]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	430b      	orrs	r3, r1
 8003982:	491b      	ldr	r1, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe fec1 	bl	8002714 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003996:	f7fe febd 	bl	8002714 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e03d      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x46a>
 80039b4:	e035      	b.n	8003a22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe feaa 	bl	8002714 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe fea6 	bl	8002714 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e026      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x498>
 80039e2:	e01e      	b.n	8003a22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e019      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_OscConfig+0x500>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d106      	bne.n	8003a1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0d0      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d910      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b67      	ldr	r3, [pc, #412]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 0207 	bic.w	r2, r3, #7
 8003a5a:	4965      	ldr	r1, [pc, #404]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0b8      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a8c:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a58      	ldr	r2, [pc, #352]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	494d      	ldr	r1, [pc, #308]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d040      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b47      	ldr	r3, [pc, #284]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d115      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e073      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06b      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4936      	ldr	r1, [pc, #216]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b20:	f7fe fdf8 	bl	8002714 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fe fdf4 	bl	8002714 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e053      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 020c 	and.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1eb      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d210      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 0207 	bic.w	r2, r3, #7
 8003b66:	4922      	ldr	r1, [pc, #136]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e032      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4916      	ldr	r1, [pc, #88]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bbe:	f000 f821 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	490a      	ldr	r1, [pc, #40]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd0:	5ccb      	ldrb	r3, [r1, r3]
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1cc>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1d0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fd56 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	08007a18 	.word	0x08007a18
 8003bfc:	20000010 	.word	0x20000010
 8003c00:	20000014 	.word	0x20000014

08003c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x30>
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x36>
 8003c32:	e027      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c36:	613b      	str	r3, [r7, #16]
      break;
 8003c38:	e027      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	0c9b      	lsrs	r3, r3, #18
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	4a17      	ldr	r2, [pc, #92]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c44:	5cd3      	ldrb	r3, [r2, r3]
 8003c46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	0c5b      	lsrs	r3, r3, #17
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c5e:	5cd3      	ldrb	r3, [r2, r3]
 8003c60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c66:	fb03 f202 	mul.w	r2, r3, r2
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e004      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c78:	fb02 f303 	mul.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	613b      	str	r3, [r7, #16]
      break;
 8003c82:	e002      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c86:	613b      	str	r3, [r7, #16]
      break;
 8003c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8a:	693b      	ldr	r3, [r7, #16]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	007a1200 	.word	0x007a1200
 8003ca0:	08007a30 	.word	0x08007a30
 8003ca4:	08007a40 	.word	0x08007a40
 8003ca8:	003d0900 	.word	0x003d0900

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	20000010 	.word	0x20000010

08003cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc4:	f7ff fff2 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	0adb      	lsrs	r3, r3, #11
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	08007a28 	.word	0x08007a28

08003ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RCC_Delay+0x34>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <RCC_Delay+0x38>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0a5b      	lsrs	r3, r3, #9
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d04:	bf00      	nop
  }
  while (Delay --);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	60fa      	str	r2, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f9      	bne.n	8003d04 <RCC_Delay+0x1c>
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	20000010 	.word	0x20000010
 8003d20:	10624dd3 	.word	0x10624dd3

08003d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d07d      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d40:	2300      	movs	r3, #0
 8003d42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d44:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d50:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	4a4b      	ldr	r2, [pc, #300]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	61d3      	str	r3, [r2, #28]
 8003d5c:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d118      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a42      	ldr	r2, [pc, #264]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d84:	f7fe fcc6 	bl	8002714 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8a:	e008      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8c:	f7fe fcc2 	bl	8002714 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e06d      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003daa:	4b36      	ldr	r3, [pc, #216]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d027      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc8:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd2:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dde:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d014      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fe fc91 	bl	8002714 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fe fc8d 	bl	8002714 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e036      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ee      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4917      	ldr	r1, [pc, #92]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	490b      	ldr	r1, [pc, #44]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	4904      	ldr	r1, [pc, #16]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	42420440 	.word	0x42420440

08003e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	f200 808a 	bhi.w	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d045      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d075      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ec6:	e082      	b.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ec8:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ece:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d07b      	beq.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	0c9b      	lsrs	r3, r3, #18
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	4a41      	ldr	r2, [pc, #260]	; (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ee4:	5cd3      	ldrb	r3, [r2, r3]
 8003ee6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d015      	beq.n	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ef2:	4b3c      	ldr	r3, [pc, #240]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0c5b      	lsrs	r3, r3, #17
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f0c:	4a38      	ldr	r2, [pc, #224]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	e004      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4a34      	ldr	r2, [pc, #208]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f28:	4b2e      	ldr	r3, [pc, #184]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f34:	d102      	bne.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	61bb      	str	r3, [r7, #24]
      break;
 8003f3a:	e04a      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4a2d      	ldr	r2, [pc, #180]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
      break;
 8003f4a:	e042      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5c:	d108      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e01f      	b.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7a:	d109      	bne.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f88:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	e00f      	b.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f9a:	d11c      	bne.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d016      	beq.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003fa8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003fac:	61bb      	str	r3, [r7, #24]
      break;
 8003fae:	e012      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fb2:	f7ff fe85 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0b9b      	lsrs	r3, r3, #14
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	61bb      	str	r3, [r7, #24]
      break;
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fd6:	bf00      	nop
    }
  }
  return (frequency);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08007a44 	.word	0x08007a44
 8003fec:	08007a54 	.word	0x08007a54
 8003ff0:	007a1200 	.word	0x007a1200
 8003ff4:	003d0900 	.word	0x003d0900
 8003ff8:	aaaaaaab 	.word	0xaaaaaaab

08003ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e041      	b.n	8004092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe f938 	bl	8002298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 fd24 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e041      	b.n	8004130 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f839 	bl	8004138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f000 fcd5 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
	...

0800414c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_TIM_PWM_Start+0x24>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e022      	b.n	80041b6 <HAL_TIM_PWM_Start+0x6a>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d109      	bne.n	800418a <HAL_TIM_PWM_Start+0x3e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b01      	cmp	r3, #1
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e015      	b.n	80041b6 <HAL_TIM_PWM_Start+0x6a>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d109      	bne.n	80041a4 <HAL_TIM_PWM_Start+0x58>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e008      	b.n	80041b6 <HAL_TIM_PWM_Start+0x6a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e05e      	b.n	800427c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_PWM_Start+0x82>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041cc:	e013      	b.n	80041f6 <HAL_TIM_PWM_Start+0xaa>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Start+0x92>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041dc:	e00b      	b.n	80041f6 <HAL_TIM_PWM_Start+0xaa>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_PWM_Start+0xa2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ec:	e003      	b.n	80041f6 <HAL_TIM_PWM_Start+0xaa>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2201      	movs	r2, #1
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fec2 	bl	8004f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <HAL_TIM_PWM_Start+0x138>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d107      	bne.n	800421e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_TIM_PWM_Start+0x138>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <HAL_TIM_PWM_Start+0xfa>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d009      	beq.n	8004246 <HAL_TIM_PWM_Start+0xfa>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <HAL_TIM_PWM_Start+0x13c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIM_PWM_Start+0xfa>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <HAL_TIM_PWM_Start+0x140>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b06      	cmp	r3, #6
 8004256:	d010      	beq.n	800427a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	e007      	b.n	800427a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800

08004290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e093      	b.n	80043cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fe f811 	bl	80022e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d4:	f023 0307 	bic.w	r3, r3, #7
 80042d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 fbcf 	bl	8004a88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	4313      	orrs	r3, r2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004330:	f023 030c 	bic.w	r3, r3, #12
 8004334:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800433c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	4313      	orrs	r3, r2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	031b      	lsls	r3, r3, #12
 8004360:	4313      	orrs	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	4313      	orrs	r3, r2
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d110      	bne.n	8004426 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800440a:	7b7b      	ldrb	r3, [r7, #13]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e089      	b.n	8004528 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004424:	e031      	b.n	800448a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d110      	bne.n	800444e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800442c:	7bbb      	ldrb	r3, [r7, #14]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004432:	7b3b      	ldrb	r3, [r7, #12]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d001      	beq.n	800443c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e075      	b.n	8004528 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800444c:	e01d      	b.n	800448a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d108      	bne.n	8004466 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004454:	7bbb      	ldrb	r3, [r7, #14]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800445a:	7b7b      	ldrb	r3, [r7, #13]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d102      	bne.n	8004466 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004460:	7b3b      	ldrb	r3, [r7, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d001      	beq.n	800446a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e05e      	b.n	8004528 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d010      	beq.n	80044b8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004496:	e01f      	b.n	80044d8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fd71 	bl	8004f88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0202 	orr.w	r2, r2, #2
 80044b4:	60da      	str	r2, [r3, #12]
      break;
 80044b6:	e02e      	b.n	8004516 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2201      	movs	r2, #1
 80044be:	2104      	movs	r1, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fd61 	bl	8004f88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0204 	orr.w	r2, r2, #4
 80044d4:	60da      	str	r2, [r3, #12]
      break;
 80044d6:	e01e      	b.n	8004516 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fd51 	bl	8004f88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	2104      	movs	r1, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fd4a 	bl	8004f88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0202 	orr.w	r2, r2, #2
 8004502:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0204 	orr.w	r2, r2, #4
 8004512:	60da      	str	r2, [r3, #12]
      break;
 8004514:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d122      	bne.n	800458c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b02      	cmp	r3, #2
 8004552:	d11b      	bne.n	800458c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0202 	mvn.w	r2, #2
 800455c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc ffa8 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8004578:	e005      	b.n	8004586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa69 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa6f 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d122      	bne.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d11b      	bne.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0204 	mvn.w	r2, #4
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc ff7e 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa3f 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fa45 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d122      	bne.n	8004634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d11b      	bne.n	8004634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0208 	mvn.w	r2, #8
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2204      	movs	r2, #4
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc ff54 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa15 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa1b 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b10      	cmp	r3, #16
 8004640:	d122      	bne.n	8004688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b10      	cmp	r3, #16
 800464e:	d11b      	bne.n	8004688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0210 	mvn.w	r2, #16
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2208      	movs	r2, #8
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc ff2a 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9eb 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f9f1 	bl	8004a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0201 	mvn.w	r2, #1
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fb76 	bl	8001da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d10e      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fcdf 	bl	800509e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9b5 	bl	8004a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b20      	cmp	r3, #32
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b20      	cmp	r3, #32
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0220 	mvn.w	r2, #32
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fcaa 	bl	800508c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800475a:	2302      	movs	r3, #2
 800475c:	e0ae      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b0c      	cmp	r3, #12
 800476a:	f200 809f 	bhi.w	80048ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080048ad 	.word	0x080048ad
 800477c:	080048ad 	.word	0x080048ad
 8004780:	080048ad 	.word	0x080048ad
 8004784:	080047e9 	.word	0x080047e9
 8004788:	080048ad 	.word	0x080048ad
 800478c:	080048ad 	.word	0x080048ad
 8004790:	080048ad 	.word	0x080048ad
 8004794:	0800482b 	.word	0x0800482b
 8004798:	080048ad 	.word	0x080048ad
 800479c:	080048ad 	.word	0x080048ad
 80047a0:	080048ad 	.word	0x080048ad
 80047a4:	0800486b 	.word	0x0800486b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f9cc 	bl	8004b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6999      	ldr	r1, [r3, #24]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	619a      	str	r2, [r3, #24]
      break;
 80047e6:	e064      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fa12 	bl	8004c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6999      	ldr	r1, [r3, #24]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	619a      	str	r2, [r3, #24]
      break;
 8004828:	e043      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fa5b 	bl	8004cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0208 	orr.w	r2, r2, #8
 8004844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0204 	bic.w	r2, r2, #4
 8004854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	61da      	str	r2, [r3, #28]
      break;
 8004868:	e023      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 faa5 	bl	8004dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69d9      	ldr	r1, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	021a      	lsls	r2, r3, #8
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	61da      	str	r2, [r3, #28]
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
      break;
 80048b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_TIM_ConfigClockSource+0x1c>
 80048dc:	2302      	movs	r3, #2
 80048de:	e0b4      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x186>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004918:	d03e      	beq.n	8004998 <HAL_TIM_ConfigClockSource+0xd4>
 800491a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491e:	f200 8087 	bhi.w	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004926:	f000 8086 	beq.w	8004a36 <HAL_TIM_ConfigClockSource+0x172>
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492e:	d87f      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b70      	cmp	r3, #112	; 0x70
 8004932:	d01a      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xa6>
 8004934:	2b70      	cmp	r3, #112	; 0x70
 8004936:	d87b      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	2b60      	cmp	r3, #96	; 0x60
 800493a:	d050      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x11a>
 800493c:	2b60      	cmp	r3, #96	; 0x60
 800493e:	d877      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004940:	2b50      	cmp	r3, #80	; 0x50
 8004942:	d03c      	beq.n	80049be <HAL_TIM_ConfigClockSource+0xfa>
 8004944:	2b50      	cmp	r3, #80	; 0x50
 8004946:	d873      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d058      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x13a>
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d86f      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b30      	cmp	r3, #48	; 0x30
 8004952:	d064      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d86b      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004958:	2b20      	cmp	r3, #32
 800495a:	d060      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 800495c:	2b20      	cmp	r3, #32
 800495e:	d867      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d05c      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 8004964:	2b10      	cmp	r3, #16
 8004966:	d05a      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 8004968:	e062      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800497a:	f000 fae6 	bl	8004f4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800498c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	609a      	str	r2, [r3, #8]
      break;
 8004996:	e04f      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049a8:	f000 facf 	bl	8004f4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ba:	609a      	str	r2, [r3, #8]
      break;
 80049bc:	e03c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ca:	461a      	mov	r2, r3
 80049cc:	f000 fa46 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2150      	movs	r1, #80	; 0x50
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fa9d 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 80049dc:	e02c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ea:	461a      	mov	r2, r3
 80049ec:	f000 fa64 	bl	8004eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2160      	movs	r1, #96	; 0x60
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa8d 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 80049fc:	e01c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f000 fa26 	bl	8004e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2140      	movs	r1, #64	; 0x40
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fa7d 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 8004a1c:	e00c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f000 fa74 	bl	8004f16 <TIM_ITRx_SetConfig>
      break;
 8004a2e:	e003      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	e000      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a29      	ldr	r2, [pc, #164]	; (8004b40 <TIM_Base_SetConfig+0xb8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <TIM_Base_SetConfig+0x30>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d007      	beq.n	8004ab8 <TIM_Base_SetConfig+0x30>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <TIM_Base_SetConfig+0xbc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0x30>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <TIM_Base_SetConfig+0xc0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <TIM_Base_SetConfig+0xb8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <TIM_Base_SetConfig+0x62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d007      	beq.n	8004aea <TIM_Base_SetConfig+0x62>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <TIM_Base_SetConfig+0xbc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_Base_SetConfig+0x62>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <TIM_Base_SetConfig+0xc0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <TIM_Base_SetConfig+0xb8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	615a      	str	r2, [r3, #20]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800

08004b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f023 0201 	bic.w	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 0302 	bic.w	r3, r3, #2
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <TIM_OC1_SetConfig+0xc8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d10c      	bne.n	8004bc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 0308 	bic.w	r3, r3, #8
 8004bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <TIM_OC1_SetConfig+0xc8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d111      	bne.n	8004bee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00

08004c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f023 0210 	bic.w	r2, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0320 	bic.w	r3, r3, #32
 8004c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <TIM_OC2_SetConfig+0xd0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d10d      	bne.n	8004c94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <TIM_OC2_SetConfig+0xd0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d113      	bne.n	8004cc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00

08004cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <TIM_OC3_SetConfig+0xd0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10d      	bne.n	8004d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <TIM_OC3_SetConfig+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d113      	bne.n	8004d96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00

08004dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	031b      	lsls	r3, r3, #12
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0f      	ldr	r2, [pc, #60]	; (8004e58 <TIM_OC4_SetConfig+0x98>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d109      	bne.n	8004e34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	019b      	lsls	r3, r3, #6
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	40012c00 	.word	0x40012c00

08004e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 030a 	bic.w	r3, r3, #10
 8004e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0210 	bic.w	r2, r3, #16
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	031b      	lsls	r3, r3, #12
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	621a      	str	r2, [r3, #32]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr

08004f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f043 0307 	orr.w	r3, r3, #7
 8004f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	609a      	str	r2, [r3, #8]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	021a      	lsls	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	401a      	ands	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e046      	b.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a16      	ldr	r2, [pc, #88]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d009      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a12      	ldr	r2, [pc, #72]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a10      	ldr	r2, [pc, #64]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10c      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4313      	orrs	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800

0800508c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <__cvt>:
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b6:	461f      	mov	r7, r3
 80050b8:	bfbb      	ittet	lt
 80050ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80050be:	461f      	movlt	r7, r3
 80050c0:	2300      	movge	r3, #0
 80050c2:	232d      	movlt	r3, #45	; 0x2d
 80050c4:	b088      	sub	sp, #32
 80050c6:	4614      	mov	r4, r2
 80050c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050cc:	7013      	strb	r3, [r2, #0]
 80050ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050d4:	f023 0820 	bic.w	r8, r3, #32
 80050d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050dc:	d005      	beq.n	80050ea <__cvt+0x3a>
 80050de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050e2:	d100      	bne.n	80050e6 <__cvt+0x36>
 80050e4:	3501      	adds	r5, #1
 80050e6:	2302      	movs	r3, #2
 80050e8:	e000      	b.n	80050ec <__cvt+0x3c>
 80050ea:	2303      	movs	r3, #3
 80050ec:	aa07      	add	r2, sp, #28
 80050ee:	9204      	str	r2, [sp, #16]
 80050f0:	aa06      	add	r2, sp, #24
 80050f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050f6:	e9cd 3500 	strd	r3, r5, [sp]
 80050fa:	4622      	mov	r2, r4
 80050fc:	463b      	mov	r3, r7
 80050fe:	f000 fe53 	bl	8005da8 <_dtoa_r>
 8005102:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005106:	4606      	mov	r6, r0
 8005108:	d102      	bne.n	8005110 <__cvt+0x60>
 800510a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800510c:	07db      	lsls	r3, r3, #31
 800510e:	d522      	bpl.n	8005156 <__cvt+0xa6>
 8005110:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005114:	eb06 0905 	add.w	r9, r6, r5
 8005118:	d110      	bne.n	800513c <__cvt+0x8c>
 800511a:	7833      	ldrb	r3, [r6, #0]
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d10a      	bne.n	8005136 <__cvt+0x86>
 8005120:	2200      	movs	r2, #0
 8005122:	2300      	movs	r3, #0
 8005124:	4620      	mov	r0, r4
 8005126:	4639      	mov	r1, r7
 8005128:	f7fb fc3e 	bl	80009a8 <__aeabi_dcmpeq>
 800512c:	b918      	cbnz	r0, 8005136 <__cvt+0x86>
 800512e:	f1c5 0501 	rsb	r5, r5, #1
 8005132:	f8ca 5000 	str.w	r5, [sl]
 8005136:	f8da 3000 	ldr.w	r3, [sl]
 800513a:	4499      	add	r9, r3
 800513c:	2200      	movs	r2, #0
 800513e:	2300      	movs	r3, #0
 8005140:	4620      	mov	r0, r4
 8005142:	4639      	mov	r1, r7
 8005144:	f7fb fc30 	bl	80009a8 <__aeabi_dcmpeq>
 8005148:	b108      	cbz	r0, 800514e <__cvt+0x9e>
 800514a:	f8cd 901c 	str.w	r9, [sp, #28]
 800514e:	2230      	movs	r2, #48	; 0x30
 8005150:	9b07      	ldr	r3, [sp, #28]
 8005152:	454b      	cmp	r3, r9
 8005154:	d307      	bcc.n	8005166 <__cvt+0xb6>
 8005156:	4630      	mov	r0, r6
 8005158:	9b07      	ldr	r3, [sp, #28]
 800515a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800515c:	1b9b      	subs	r3, r3, r6
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	b008      	add	sp, #32
 8005162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005166:	1c59      	adds	r1, r3, #1
 8005168:	9107      	str	r1, [sp, #28]
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	e7f0      	b.n	8005150 <__cvt+0xa0>

0800516e <__exponent>:
 800516e:	4603      	mov	r3, r0
 8005170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005172:	2900      	cmp	r1, #0
 8005174:	f803 2b02 	strb.w	r2, [r3], #2
 8005178:	bfb6      	itet	lt
 800517a:	222d      	movlt	r2, #45	; 0x2d
 800517c:	222b      	movge	r2, #43	; 0x2b
 800517e:	4249      	neglt	r1, r1
 8005180:	2909      	cmp	r1, #9
 8005182:	7042      	strb	r2, [r0, #1]
 8005184:	dd2a      	ble.n	80051dc <__exponent+0x6e>
 8005186:	f10d 0207 	add.w	r2, sp, #7
 800518a:	4617      	mov	r7, r2
 800518c:	260a      	movs	r6, #10
 800518e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005192:	4694      	mov	ip, r2
 8005194:	fb06 1415 	mls	r4, r6, r5, r1
 8005198:	3430      	adds	r4, #48	; 0x30
 800519a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800519e:	460c      	mov	r4, r1
 80051a0:	2c63      	cmp	r4, #99	; 0x63
 80051a2:	4629      	mov	r1, r5
 80051a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80051a8:	dcf1      	bgt.n	800518e <__exponent+0x20>
 80051aa:	3130      	adds	r1, #48	; 0x30
 80051ac:	f1ac 0402 	sub.w	r4, ip, #2
 80051b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80051b4:	4622      	mov	r2, r4
 80051b6:	1c41      	adds	r1, r0, #1
 80051b8:	42ba      	cmp	r2, r7
 80051ba:	d30a      	bcc.n	80051d2 <__exponent+0x64>
 80051bc:	f10d 0209 	add.w	r2, sp, #9
 80051c0:	eba2 020c 	sub.w	r2, r2, ip
 80051c4:	42bc      	cmp	r4, r7
 80051c6:	bf88      	it	hi
 80051c8:	2200      	movhi	r2, #0
 80051ca:	4413      	add	r3, r2
 80051cc:	1a18      	subs	r0, r3, r0
 80051ce:	b003      	add	sp, #12
 80051d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80051d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80051da:	e7ed      	b.n	80051b8 <__exponent+0x4a>
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	3130      	adds	r1, #48	; 0x30
 80051e0:	7083      	strb	r3, [r0, #2]
 80051e2:	70c1      	strb	r1, [r0, #3]
 80051e4:	1d03      	adds	r3, r0, #4
 80051e6:	e7f1      	b.n	80051cc <__exponent+0x5e>

080051e8 <_printf_float>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	b091      	sub	sp, #68	; 0x44
 80051ee:	460c      	mov	r4, r1
 80051f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051f4:	4616      	mov	r6, r2
 80051f6:	461f      	mov	r7, r3
 80051f8:	4605      	mov	r5, r0
 80051fa:	f000 fcc5 	bl	8005b88 <_localeconv_r>
 80051fe:	6803      	ldr	r3, [r0, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	9309      	str	r3, [sp, #36]	; 0x24
 8005204:	f7fa ffa4 	bl	8000150 <strlen>
 8005208:	2300      	movs	r3, #0
 800520a:	930e      	str	r3, [sp, #56]	; 0x38
 800520c:	f8d8 3000 	ldr.w	r3, [r8]
 8005210:	900a      	str	r0, [sp, #40]	; 0x28
 8005212:	3307      	adds	r3, #7
 8005214:	f023 0307 	bic.w	r3, r3, #7
 8005218:	f103 0208 	add.w	r2, r3, #8
 800521c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005220:	f8d4 b000 	ldr.w	fp, [r4]
 8005224:	f8c8 2000 	str.w	r2, [r8]
 8005228:	e9d3 a800 	ldrd	sl, r8, [r3]
 800522c:	4652      	mov	r2, sl
 800522e:	4643      	mov	r3, r8
 8005230:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005234:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005238:	930b      	str	r3, [sp, #44]	; 0x2c
 800523a:	f04f 32ff 	mov.w	r2, #4294967295
 800523e:	4650      	mov	r0, sl
 8005240:	4b9c      	ldr	r3, [pc, #624]	; (80054b4 <_printf_float+0x2cc>)
 8005242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005244:	f7fb fbe2 	bl	8000a0c <__aeabi_dcmpun>
 8005248:	bb70      	cbnz	r0, 80052a8 <_printf_float+0xc0>
 800524a:	f04f 32ff 	mov.w	r2, #4294967295
 800524e:	4650      	mov	r0, sl
 8005250:	4b98      	ldr	r3, [pc, #608]	; (80054b4 <_printf_float+0x2cc>)
 8005252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005254:	f7fb fbbc 	bl	80009d0 <__aeabi_dcmple>
 8005258:	bb30      	cbnz	r0, 80052a8 <_printf_float+0xc0>
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	4650      	mov	r0, sl
 8005260:	4641      	mov	r1, r8
 8005262:	f7fb fbab 	bl	80009bc <__aeabi_dcmplt>
 8005266:	b110      	cbz	r0, 800526e <_printf_float+0x86>
 8005268:	232d      	movs	r3, #45	; 0x2d
 800526a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526e:	4a92      	ldr	r2, [pc, #584]	; (80054b8 <_printf_float+0x2d0>)
 8005270:	4b92      	ldr	r3, [pc, #584]	; (80054bc <_printf_float+0x2d4>)
 8005272:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005276:	bf94      	ite	ls
 8005278:	4690      	movls	r8, r2
 800527a:	4698      	movhi	r8, r3
 800527c:	2303      	movs	r3, #3
 800527e:	f04f 0a00 	mov.w	sl, #0
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	f02b 0304 	bic.w	r3, fp, #4
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	4633      	mov	r3, r6
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	9700      	str	r7, [sp, #0]
 8005292:	aa0f      	add	r2, sp, #60	; 0x3c
 8005294:	f000 f9d6 	bl	8005644 <_printf_common>
 8005298:	3001      	adds	r0, #1
 800529a:	f040 8090 	bne.w	80053be <_printf_float+0x1d6>
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	b011      	add	sp, #68	; 0x44
 80052a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a8:	4652      	mov	r2, sl
 80052aa:	4643      	mov	r3, r8
 80052ac:	4650      	mov	r0, sl
 80052ae:	4641      	mov	r1, r8
 80052b0:	f7fb fbac 	bl	8000a0c <__aeabi_dcmpun>
 80052b4:	b148      	cbz	r0, 80052ca <_printf_float+0xe2>
 80052b6:	f1b8 0f00 	cmp.w	r8, #0
 80052ba:	bfb8      	it	lt
 80052bc:	232d      	movlt	r3, #45	; 0x2d
 80052be:	4a80      	ldr	r2, [pc, #512]	; (80054c0 <_printf_float+0x2d8>)
 80052c0:	bfb8      	it	lt
 80052c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052c6:	4b7f      	ldr	r3, [pc, #508]	; (80054c4 <_printf_float+0x2dc>)
 80052c8:	e7d3      	b.n	8005272 <_printf_float+0x8a>
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	d142      	bne.n	800535a <_printf_float+0x172>
 80052d4:	2306      	movs	r3, #6
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	9206      	str	r2, [sp, #24]
 80052dc:	aa0e      	add	r2, sp, #56	; 0x38
 80052de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052e2:	aa0d      	add	r2, sp, #52	; 0x34
 80052e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052e8:	9203      	str	r2, [sp, #12]
 80052ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	4652      	mov	r2, sl
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	4628      	mov	r0, r5
 80052fc:	4643      	mov	r3, r8
 80052fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8005300:	f7ff fed6 	bl	80050b0 <__cvt>
 8005304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005306:	4680      	mov	r8, r0
 8005308:	2947      	cmp	r1, #71	; 0x47
 800530a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800530c:	d108      	bne.n	8005320 <_printf_float+0x138>
 800530e:	1cc8      	adds	r0, r1, #3
 8005310:	db02      	blt.n	8005318 <_printf_float+0x130>
 8005312:	6863      	ldr	r3, [r4, #4]
 8005314:	4299      	cmp	r1, r3
 8005316:	dd40      	ble.n	800539a <_printf_float+0x1b2>
 8005318:	f1a9 0902 	sub.w	r9, r9, #2
 800531c:	fa5f f989 	uxtb.w	r9, r9
 8005320:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005324:	d81f      	bhi.n	8005366 <_printf_float+0x17e>
 8005326:	464a      	mov	r2, r9
 8005328:	3901      	subs	r1, #1
 800532a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800532e:	910d      	str	r1, [sp, #52]	; 0x34
 8005330:	f7ff ff1d 	bl	800516e <__exponent>
 8005334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005336:	4682      	mov	sl, r0
 8005338:	1813      	adds	r3, r2, r0
 800533a:	2a01      	cmp	r2, #1
 800533c:	6123      	str	r3, [r4, #16]
 800533e:	dc02      	bgt.n	8005346 <_printf_float+0x15e>
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	07d2      	lsls	r2, r2, #31
 8005344:	d501      	bpl.n	800534a <_printf_float+0x162>
 8005346:	3301      	adds	r3, #1
 8005348:	6123      	str	r3, [r4, #16]
 800534a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800534e:	2b00      	cmp	r3, #0
 8005350:	d09b      	beq.n	800528a <_printf_float+0xa2>
 8005352:	232d      	movs	r3, #45	; 0x2d
 8005354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005358:	e797      	b.n	800528a <_printf_float+0xa2>
 800535a:	2947      	cmp	r1, #71	; 0x47
 800535c:	d1bc      	bne.n	80052d8 <_printf_float+0xf0>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ba      	bne.n	80052d8 <_printf_float+0xf0>
 8005362:	2301      	movs	r3, #1
 8005364:	e7b7      	b.n	80052d6 <_printf_float+0xee>
 8005366:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800536a:	d118      	bne.n	800539e <_printf_float+0x1b6>
 800536c:	2900      	cmp	r1, #0
 800536e:	6863      	ldr	r3, [r4, #4]
 8005370:	dd0b      	ble.n	800538a <_printf_float+0x1a2>
 8005372:	6121      	str	r1, [r4, #16]
 8005374:	b913      	cbnz	r3, 800537c <_printf_float+0x194>
 8005376:	6822      	ldr	r2, [r4, #0]
 8005378:	07d0      	lsls	r0, r2, #31
 800537a:	d502      	bpl.n	8005382 <_printf_float+0x19a>
 800537c:	3301      	adds	r3, #1
 800537e:	440b      	add	r3, r1
 8005380:	6123      	str	r3, [r4, #16]
 8005382:	f04f 0a00 	mov.w	sl, #0
 8005386:	65a1      	str	r1, [r4, #88]	; 0x58
 8005388:	e7df      	b.n	800534a <_printf_float+0x162>
 800538a:	b913      	cbnz	r3, 8005392 <_printf_float+0x1aa>
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	07d2      	lsls	r2, r2, #31
 8005390:	d501      	bpl.n	8005396 <_printf_float+0x1ae>
 8005392:	3302      	adds	r3, #2
 8005394:	e7f4      	b.n	8005380 <_printf_float+0x198>
 8005396:	2301      	movs	r3, #1
 8005398:	e7f2      	b.n	8005380 <_printf_float+0x198>
 800539a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800539e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a0:	4299      	cmp	r1, r3
 80053a2:	db05      	blt.n	80053b0 <_printf_float+0x1c8>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	6121      	str	r1, [r4, #16]
 80053a8:	07d8      	lsls	r0, r3, #31
 80053aa:	d5ea      	bpl.n	8005382 <_printf_float+0x19a>
 80053ac:	1c4b      	adds	r3, r1, #1
 80053ae:	e7e7      	b.n	8005380 <_printf_float+0x198>
 80053b0:	2900      	cmp	r1, #0
 80053b2:	bfcc      	ite	gt
 80053b4:	2201      	movgt	r2, #1
 80053b6:	f1c1 0202 	rsble	r2, r1, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	e7e0      	b.n	8005380 <_printf_float+0x198>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	055a      	lsls	r2, r3, #21
 80053c2:	d407      	bmi.n	80053d4 <_printf_float+0x1ec>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	4642      	mov	r2, r8
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	d12b      	bne.n	800542a <_printf_float+0x242>
 80053d2:	e764      	b.n	800529e <_printf_float+0xb6>
 80053d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053d8:	f240 80dd 	bls.w	8005596 <_printf_float+0x3ae>
 80053dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053e0:	2200      	movs	r2, #0
 80053e2:	2300      	movs	r3, #0
 80053e4:	f7fb fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d033      	beq.n	8005454 <_printf_float+0x26c>
 80053ec:	2301      	movs	r3, #1
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <_printf_float+0x2e0>)
 80053f4:	47b8      	blx	r7
 80053f6:	3001      	adds	r0, #1
 80053f8:	f43f af51 	beq.w	800529e <_printf_float+0xb6>
 80053fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005400:	429a      	cmp	r2, r3
 8005402:	db02      	blt.n	800540a <_printf_float+0x222>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	07d8      	lsls	r0, r3, #31
 8005408:	d50f      	bpl.n	800542a <_printf_float+0x242>
 800540a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f af42 	beq.w	800529e <_printf_float+0xb6>
 800541a:	f04f 0800 	mov.w	r8, #0
 800541e:	f104 091a 	add.w	r9, r4, #26
 8005422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005424:	3b01      	subs	r3, #1
 8005426:	4543      	cmp	r3, r8
 8005428:	dc09      	bgt.n	800543e <_printf_float+0x256>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	079b      	lsls	r3, r3, #30
 800542e:	f100 8104 	bmi.w	800563a <_printf_float+0x452>
 8005432:	68e0      	ldr	r0, [r4, #12]
 8005434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005436:	4298      	cmp	r0, r3
 8005438:	bfb8      	it	lt
 800543a:	4618      	movlt	r0, r3
 800543c:	e731      	b.n	80052a2 <_printf_float+0xba>
 800543e:	2301      	movs	r3, #1
 8005440:	464a      	mov	r2, r9
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f af28 	beq.w	800529e <_printf_float+0xb6>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	e7e6      	b.n	8005422 <_printf_float+0x23a>
 8005454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005456:	2b00      	cmp	r3, #0
 8005458:	dc38      	bgt.n	80054cc <_printf_float+0x2e4>
 800545a:	2301      	movs	r3, #1
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	4a19      	ldr	r2, [pc, #100]	; (80054c8 <_printf_float+0x2e0>)
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f af1a 	beq.w	800529e <_printf_float+0xb6>
 800546a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800546e:	4313      	orrs	r3, r2
 8005470:	d102      	bne.n	8005478 <_printf_float+0x290>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	07d9      	lsls	r1, r3, #31
 8005476:	d5d8      	bpl.n	800542a <_printf_float+0x242>
 8005478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f af0b 	beq.w	800529e <_printf_float+0xb6>
 8005488:	f04f 0900 	mov.w	r9, #0
 800548c:	f104 0a1a 	add.w	sl, r4, #26
 8005490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005492:	425b      	negs	r3, r3
 8005494:	454b      	cmp	r3, r9
 8005496:	dc01      	bgt.n	800549c <_printf_float+0x2b4>
 8005498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800549a:	e794      	b.n	80053c6 <_printf_float+0x1de>
 800549c:	2301      	movs	r3, #1
 800549e:	4652      	mov	r2, sl
 80054a0:	4631      	mov	r1, r6
 80054a2:	4628      	mov	r0, r5
 80054a4:	47b8      	blx	r7
 80054a6:	3001      	adds	r0, #1
 80054a8:	f43f aef9 	beq.w	800529e <_printf_float+0xb6>
 80054ac:	f109 0901 	add.w	r9, r9, #1
 80054b0:	e7ee      	b.n	8005490 <_printf_float+0x2a8>
 80054b2:	bf00      	nop
 80054b4:	7fefffff 	.word	0x7fefffff
 80054b8:	08007a56 	.word	0x08007a56
 80054bc:	08007a5a 	.word	0x08007a5a
 80054c0:	08007a5e 	.word	0x08007a5e
 80054c4:	08007a62 	.word	0x08007a62
 80054c8:	08007a66 	.word	0x08007a66
 80054cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054d0:	429a      	cmp	r2, r3
 80054d2:	bfa8      	it	ge
 80054d4:	461a      	movge	r2, r3
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	4691      	mov	r9, r2
 80054da:	dc37      	bgt.n	800554c <_printf_float+0x364>
 80054dc:	f04f 0b00 	mov.w	fp, #0
 80054e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054e4:	f104 021a 	add.w	r2, r4, #26
 80054e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054ec:	ebaa 0309 	sub.w	r3, sl, r9
 80054f0:	455b      	cmp	r3, fp
 80054f2:	dc33      	bgt.n	800555c <_printf_float+0x374>
 80054f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054f8:	429a      	cmp	r2, r3
 80054fa:	db3b      	blt.n	8005574 <_printf_float+0x38c>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	07da      	lsls	r2, r3, #31
 8005500:	d438      	bmi.n	8005574 <_printf_float+0x38c>
 8005502:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005506:	eba2 0903 	sub.w	r9, r2, r3
 800550a:	eba2 020a 	sub.w	r2, r2, sl
 800550e:	4591      	cmp	r9, r2
 8005510:	bfa8      	it	ge
 8005512:	4691      	movge	r9, r2
 8005514:	f1b9 0f00 	cmp.w	r9, #0
 8005518:	dc34      	bgt.n	8005584 <_printf_float+0x39c>
 800551a:	f04f 0800 	mov.w	r8, #0
 800551e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005522:	f104 0a1a 	add.w	sl, r4, #26
 8005526:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	eba3 0309 	sub.w	r3, r3, r9
 8005530:	4543      	cmp	r3, r8
 8005532:	f77f af7a 	ble.w	800542a <_printf_float+0x242>
 8005536:	2301      	movs	r3, #1
 8005538:	4652      	mov	r2, sl
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f aeac 	beq.w	800529e <_printf_float+0xb6>
 8005546:	f108 0801 	add.w	r8, r8, #1
 800554a:	e7ec      	b.n	8005526 <_printf_float+0x33e>
 800554c:	4613      	mov	r3, r2
 800554e:	4631      	mov	r1, r6
 8005550:	4642      	mov	r2, r8
 8005552:	4628      	mov	r0, r5
 8005554:	47b8      	blx	r7
 8005556:	3001      	adds	r0, #1
 8005558:	d1c0      	bne.n	80054dc <_printf_float+0x2f4>
 800555a:	e6a0      	b.n	800529e <_printf_float+0xb6>
 800555c:	2301      	movs	r3, #1
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	920b      	str	r2, [sp, #44]	; 0x2c
 8005564:	47b8      	blx	r7
 8005566:	3001      	adds	r0, #1
 8005568:	f43f ae99 	beq.w	800529e <_printf_float+0xb6>
 800556c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800556e:	f10b 0b01 	add.w	fp, fp, #1
 8005572:	e7b9      	b.n	80054e8 <_printf_float+0x300>
 8005574:	4631      	mov	r1, r6
 8005576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	d1bf      	bne.n	8005502 <_printf_float+0x31a>
 8005582:	e68c      	b.n	800529e <_printf_float+0xb6>
 8005584:	464b      	mov	r3, r9
 8005586:	4631      	mov	r1, r6
 8005588:	4628      	mov	r0, r5
 800558a:	eb08 020a 	add.w	r2, r8, sl
 800558e:	47b8      	blx	r7
 8005590:	3001      	adds	r0, #1
 8005592:	d1c2      	bne.n	800551a <_printf_float+0x332>
 8005594:	e683      	b.n	800529e <_printf_float+0xb6>
 8005596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005598:	2a01      	cmp	r2, #1
 800559a:	dc01      	bgt.n	80055a0 <_printf_float+0x3b8>
 800559c:	07db      	lsls	r3, r3, #31
 800559e:	d539      	bpl.n	8005614 <_printf_float+0x42c>
 80055a0:	2301      	movs	r3, #1
 80055a2:	4642      	mov	r2, r8
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	f43f ae77 	beq.w	800529e <_printf_float+0xb6>
 80055b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055b4:	4631      	mov	r1, r6
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b8      	blx	r7
 80055ba:	3001      	adds	r0, #1
 80055bc:	f43f ae6f 	beq.w	800529e <_printf_float+0xb6>
 80055c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055c4:	2200      	movs	r2, #0
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80055cc:	f7fb f9ec 	bl	80009a8 <__aeabi_dcmpeq>
 80055d0:	b9d8      	cbnz	r0, 800560a <_printf_float+0x422>
 80055d2:	f109 33ff 	add.w	r3, r9, #4294967295
 80055d6:	f108 0201 	add.w	r2, r8, #1
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	47b8      	blx	r7
 80055e0:	3001      	adds	r0, #1
 80055e2:	d10e      	bne.n	8005602 <_printf_float+0x41a>
 80055e4:	e65b      	b.n	800529e <_printf_float+0xb6>
 80055e6:	2301      	movs	r3, #1
 80055e8:	464a      	mov	r2, r9
 80055ea:	4631      	mov	r1, r6
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b8      	blx	r7
 80055f0:	3001      	adds	r0, #1
 80055f2:	f43f ae54 	beq.w	800529e <_printf_float+0xb6>
 80055f6:	f108 0801 	add.w	r8, r8, #1
 80055fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055fc:	3b01      	subs	r3, #1
 80055fe:	4543      	cmp	r3, r8
 8005600:	dcf1      	bgt.n	80055e6 <_printf_float+0x3fe>
 8005602:	4653      	mov	r3, sl
 8005604:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005608:	e6de      	b.n	80053c8 <_printf_float+0x1e0>
 800560a:	f04f 0800 	mov.w	r8, #0
 800560e:	f104 091a 	add.w	r9, r4, #26
 8005612:	e7f2      	b.n	80055fa <_printf_float+0x412>
 8005614:	2301      	movs	r3, #1
 8005616:	4642      	mov	r2, r8
 8005618:	e7df      	b.n	80055da <_printf_float+0x3f2>
 800561a:	2301      	movs	r3, #1
 800561c:	464a      	mov	r2, r9
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f ae3a 	beq.w	800529e <_printf_float+0xb6>
 800562a:	f108 0801 	add.w	r8, r8, #1
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005632:	1a5b      	subs	r3, r3, r1
 8005634:	4543      	cmp	r3, r8
 8005636:	dcf0      	bgt.n	800561a <_printf_float+0x432>
 8005638:	e6fb      	b.n	8005432 <_printf_float+0x24a>
 800563a:	f04f 0800 	mov.w	r8, #0
 800563e:	f104 0919 	add.w	r9, r4, #25
 8005642:	e7f4      	b.n	800562e <_printf_float+0x446>

08005644 <_printf_common>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	4616      	mov	r6, r2
 800564a:	4699      	mov	r9, r3
 800564c:	688a      	ldr	r2, [r1, #8]
 800564e:	690b      	ldr	r3, [r1, #16]
 8005650:	4607      	mov	r7, r0
 8005652:	4293      	cmp	r3, r2
 8005654:	bfb8      	it	lt
 8005656:	4613      	movlt	r3, r2
 8005658:	6033      	str	r3, [r6, #0]
 800565a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800565e:	460c      	mov	r4, r1
 8005660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005664:	b10a      	cbz	r2, 800566a <_printf_common+0x26>
 8005666:	3301      	adds	r3, #1
 8005668:	6033      	str	r3, [r6, #0]
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	0699      	lsls	r1, r3, #26
 800566e:	bf42      	ittt	mi
 8005670:	6833      	ldrmi	r3, [r6, #0]
 8005672:	3302      	addmi	r3, #2
 8005674:	6033      	strmi	r3, [r6, #0]
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	f015 0506 	ands.w	r5, r5, #6
 800567c:	d106      	bne.n	800568c <_printf_common+0x48>
 800567e:	f104 0a19 	add.w	sl, r4, #25
 8005682:	68e3      	ldr	r3, [r4, #12]
 8005684:	6832      	ldr	r2, [r6, #0]
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	42ab      	cmp	r3, r5
 800568a:	dc2b      	bgt.n	80056e4 <_printf_common+0xa0>
 800568c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005690:	1e13      	subs	r3, r2, #0
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	bf18      	it	ne
 8005696:	2301      	movne	r3, #1
 8005698:	0692      	lsls	r2, r2, #26
 800569a:	d430      	bmi.n	80056fe <_printf_common+0xba>
 800569c:	4649      	mov	r1, r9
 800569e:	4638      	mov	r0, r7
 80056a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056a4:	47c0      	blx	r8
 80056a6:	3001      	adds	r0, #1
 80056a8:	d023      	beq.n	80056f2 <_printf_common+0xae>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	6922      	ldr	r2, [r4, #16]
 80056ae:	f003 0306 	and.w	r3, r3, #6
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	bf14      	ite	ne
 80056b6:	2500      	movne	r5, #0
 80056b8:	6833      	ldreq	r3, [r6, #0]
 80056ba:	f04f 0600 	mov.w	r6, #0
 80056be:	bf08      	it	eq
 80056c0:	68e5      	ldreq	r5, [r4, #12]
 80056c2:	f104 041a 	add.w	r4, r4, #26
 80056c6:	bf08      	it	eq
 80056c8:	1aed      	subeq	r5, r5, r3
 80056ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80056ce:	bf08      	it	eq
 80056d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bfc4      	itt	gt
 80056d8:	1a9b      	subgt	r3, r3, r2
 80056da:	18ed      	addgt	r5, r5, r3
 80056dc:	42b5      	cmp	r5, r6
 80056de:	d11a      	bne.n	8005716 <_printf_common+0xd2>
 80056e0:	2000      	movs	r0, #0
 80056e2:	e008      	b.n	80056f6 <_printf_common+0xb2>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4652      	mov	r2, sl
 80056e8:	4649      	mov	r1, r9
 80056ea:	4638      	mov	r0, r7
 80056ec:	47c0      	blx	r8
 80056ee:	3001      	adds	r0, #1
 80056f0:	d103      	bne.n	80056fa <_printf_common+0xb6>
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	3501      	adds	r5, #1
 80056fc:	e7c1      	b.n	8005682 <_printf_common+0x3e>
 80056fe:	2030      	movs	r0, #48	; 0x30
 8005700:	18e1      	adds	r1, r4, r3
 8005702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800570c:	4422      	add	r2, r4
 800570e:	3302      	adds	r3, #2
 8005710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005714:	e7c2      	b.n	800569c <_printf_common+0x58>
 8005716:	2301      	movs	r3, #1
 8005718:	4622      	mov	r2, r4
 800571a:	4649      	mov	r1, r9
 800571c:	4638      	mov	r0, r7
 800571e:	47c0      	blx	r8
 8005720:	3001      	adds	r0, #1
 8005722:	d0e6      	beq.n	80056f2 <_printf_common+0xae>
 8005724:	3601      	adds	r6, #1
 8005726:	e7d9      	b.n	80056dc <_printf_common+0x98>

08005728 <_printf_i>:
 8005728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	7e0f      	ldrb	r7, [r1, #24]
 800572e:	4691      	mov	r9, r2
 8005730:	2f78      	cmp	r7, #120	; 0x78
 8005732:	4680      	mov	r8, r0
 8005734:	460c      	mov	r4, r1
 8005736:	469a      	mov	sl, r3
 8005738:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800573a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800573e:	d807      	bhi.n	8005750 <_printf_i+0x28>
 8005740:	2f62      	cmp	r7, #98	; 0x62
 8005742:	d80a      	bhi.n	800575a <_printf_i+0x32>
 8005744:	2f00      	cmp	r7, #0
 8005746:	f000 80d5 	beq.w	80058f4 <_printf_i+0x1cc>
 800574a:	2f58      	cmp	r7, #88	; 0x58
 800574c:	f000 80c1 	beq.w	80058d2 <_printf_i+0x1aa>
 8005750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005758:	e03a      	b.n	80057d0 <_printf_i+0xa8>
 800575a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800575e:	2b15      	cmp	r3, #21
 8005760:	d8f6      	bhi.n	8005750 <_printf_i+0x28>
 8005762:	a101      	add	r1, pc, #4	; (adr r1, 8005768 <_printf_i+0x40>)
 8005764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005768:	080057c1 	.word	0x080057c1
 800576c:	080057d5 	.word	0x080057d5
 8005770:	08005751 	.word	0x08005751
 8005774:	08005751 	.word	0x08005751
 8005778:	08005751 	.word	0x08005751
 800577c:	08005751 	.word	0x08005751
 8005780:	080057d5 	.word	0x080057d5
 8005784:	08005751 	.word	0x08005751
 8005788:	08005751 	.word	0x08005751
 800578c:	08005751 	.word	0x08005751
 8005790:	08005751 	.word	0x08005751
 8005794:	080058db 	.word	0x080058db
 8005798:	08005801 	.word	0x08005801
 800579c:	08005895 	.word	0x08005895
 80057a0:	08005751 	.word	0x08005751
 80057a4:	08005751 	.word	0x08005751
 80057a8:	080058fd 	.word	0x080058fd
 80057ac:	08005751 	.word	0x08005751
 80057b0:	08005801 	.word	0x08005801
 80057b4:	08005751 	.word	0x08005751
 80057b8:	08005751 	.word	0x08005751
 80057bc:	0800589d 	.word	0x0800589d
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	602a      	str	r2, [r5, #0]
 80057c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0a0      	b.n	8005916 <_printf_i+0x1ee>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	0607      	lsls	r7, r0, #24
 80057da:	f103 0104 	add.w	r1, r3, #4
 80057de:	6029      	str	r1, [r5, #0]
 80057e0:	d501      	bpl.n	80057e6 <_printf_i+0xbe>
 80057e2:	681e      	ldr	r6, [r3, #0]
 80057e4:	e003      	b.n	80057ee <_printf_i+0xc6>
 80057e6:	0646      	lsls	r6, r0, #25
 80057e8:	d5fb      	bpl.n	80057e2 <_printf_i+0xba>
 80057ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	da03      	bge.n	80057fa <_printf_i+0xd2>
 80057f2:	232d      	movs	r3, #45	; 0x2d
 80057f4:	4276      	negs	r6, r6
 80057f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fa:	230a      	movs	r3, #10
 80057fc:	4859      	ldr	r0, [pc, #356]	; (8005964 <_printf_i+0x23c>)
 80057fe:	e012      	b.n	8005826 <_printf_i+0xfe>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	6820      	ldr	r0, [r4, #0]
 8005804:	1d19      	adds	r1, r3, #4
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	0605      	lsls	r5, r0, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xe8>
 800580c:	681e      	ldr	r6, [r3, #0]
 800580e:	e002      	b.n	8005816 <_printf_i+0xee>
 8005810:	0641      	lsls	r1, r0, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xe4>
 8005814:	881e      	ldrh	r6, [r3, #0]
 8005816:	2f6f      	cmp	r7, #111	; 0x6f
 8005818:	bf0c      	ite	eq
 800581a:	2308      	moveq	r3, #8
 800581c:	230a      	movne	r3, #10
 800581e:	4851      	ldr	r0, [pc, #324]	; (8005964 <_printf_i+0x23c>)
 8005820:	2100      	movs	r1, #0
 8005822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005826:	6865      	ldr	r5, [r4, #4]
 8005828:	2d00      	cmp	r5, #0
 800582a:	bfa8      	it	ge
 800582c:	6821      	ldrge	r1, [r4, #0]
 800582e:	60a5      	str	r5, [r4, #8]
 8005830:	bfa4      	itt	ge
 8005832:	f021 0104 	bicge.w	r1, r1, #4
 8005836:	6021      	strge	r1, [r4, #0]
 8005838:	b90e      	cbnz	r6, 800583e <_printf_i+0x116>
 800583a:	2d00      	cmp	r5, #0
 800583c:	d04b      	beq.n	80058d6 <_printf_i+0x1ae>
 800583e:	4615      	mov	r5, r2
 8005840:	fbb6 f1f3 	udiv	r1, r6, r3
 8005844:	fb03 6711 	mls	r7, r3, r1, r6
 8005848:	5dc7      	ldrb	r7, [r0, r7]
 800584a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800584e:	4637      	mov	r7, r6
 8005850:	42bb      	cmp	r3, r7
 8005852:	460e      	mov	r6, r1
 8005854:	d9f4      	bls.n	8005840 <_printf_i+0x118>
 8005856:	2b08      	cmp	r3, #8
 8005858:	d10b      	bne.n	8005872 <_printf_i+0x14a>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	07de      	lsls	r6, r3, #31
 800585e:	d508      	bpl.n	8005872 <_printf_i+0x14a>
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	6861      	ldr	r1, [r4, #4]
 8005864:	4299      	cmp	r1, r3
 8005866:	bfde      	ittt	le
 8005868:	2330      	movle	r3, #48	; 0x30
 800586a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800586e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005872:	1b52      	subs	r2, r2, r5
 8005874:	6122      	str	r2, [r4, #16]
 8005876:	464b      	mov	r3, r9
 8005878:	4621      	mov	r1, r4
 800587a:	4640      	mov	r0, r8
 800587c:	f8cd a000 	str.w	sl, [sp]
 8005880:	aa03      	add	r2, sp, #12
 8005882:	f7ff fedf 	bl	8005644 <_printf_common>
 8005886:	3001      	adds	r0, #1
 8005888:	d14a      	bne.n	8005920 <_printf_i+0x1f8>
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	b004      	add	sp, #16
 8005890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	f043 0320 	orr.w	r3, r3, #32
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	2778      	movs	r7, #120	; 0x78
 800589e:	4832      	ldr	r0, [pc, #200]	; (8005968 <_printf_i+0x240>)
 80058a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	6829      	ldr	r1, [r5, #0]
 80058a8:	061f      	lsls	r7, r3, #24
 80058aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80058ae:	d402      	bmi.n	80058b6 <_printf_i+0x18e>
 80058b0:	065f      	lsls	r7, r3, #25
 80058b2:	bf48      	it	mi
 80058b4:	b2b6      	uxthmi	r6, r6
 80058b6:	07df      	lsls	r7, r3, #31
 80058b8:	bf48      	it	mi
 80058ba:	f043 0320 	orrmi.w	r3, r3, #32
 80058be:	6029      	str	r1, [r5, #0]
 80058c0:	bf48      	it	mi
 80058c2:	6023      	strmi	r3, [r4, #0]
 80058c4:	b91e      	cbnz	r6, 80058ce <_printf_i+0x1a6>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	f023 0320 	bic.w	r3, r3, #32
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	2310      	movs	r3, #16
 80058d0:	e7a6      	b.n	8005820 <_printf_i+0xf8>
 80058d2:	4824      	ldr	r0, [pc, #144]	; (8005964 <_printf_i+0x23c>)
 80058d4:	e7e4      	b.n	80058a0 <_printf_i+0x178>
 80058d6:	4615      	mov	r5, r2
 80058d8:	e7bd      	b.n	8005856 <_printf_i+0x12e>
 80058da:	682b      	ldr	r3, [r5, #0]
 80058dc:	6826      	ldr	r6, [r4, #0]
 80058de:	1d18      	adds	r0, r3, #4
 80058e0:	6961      	ldr	r1, [r4, #20]
 80058e2:	6028      	str	r0, [r5, #0]
 80058e4:	0635      	lsls	r5, r6, #24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	d501      	bpl.n	80058ee <_printf_i+0x1c6>
 80058ea:	6019      	str	r1, [r3, #0]
 80058ec:	e002      	b.n	80058f4 <_printf_i+0x1cc>
 80058ee:	0670      	lsls	r0, r6, #25
 80058f0:	d5fb      	bpl.n	80058ea <_printf_i+0x1c2>
 80058f2:	8019      	strh	r1, [r3, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	4615      	mov	r5, r2
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	e7bc      	b.n	8005876 <_printf_i+0x14e>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	2100      	movs	r1, #0
 8005900:	1d1a      	adds	r2, r3, #4
 8005902:	602a      	str	r2, [r5, #0]
 8005904:	681d      	ldr	r5, [r3, #0]
 8005906:	6862      	ldr	r2, [r4, #4]
 8005908:	4628      	mov	r0, r5
 800590a:	f000 f9b4 	bl	8005c76 <memchr>
 800590e:	b108      	cbz	r0, 8005914 <_printf_i+0x1ec>
 8005910:	1b40      	subs	r0, r0, r5
 8005912:	6060      	str	r0, [r4, #4]
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	2300      	movs	r3, #0
 800591a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800591e:	e7aa      	b.n	8005876 <_printf_i+0x14e>
 8005920:	462a      	mov	r2, r5
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	47d0      	blx	sl
 800592a:	3001      	adds	r0, #1
 800592c:	d0ad      	beq.n	800588a <_printf_i+0x162>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	079b      	lsls	r3, r3, #30
 8005932:	d413      	bmi.n	800595c <_printf_i+0x234>
 8005934:	68e0      	ldr	r0, [r4, #12]
 8005936:	9b03      	ldr	r3, [sp, #12]
 8005938:	4298      	cmp	r0, r3
 800593a:	bfb8      	it	lt
 800593c:	4618      	movlt	r0, r3
 800593e:	e7a6      	b.n	800588e <_printf_i+0x166>
 8005940:	2301      	movs	r3, #1
 8005942:	4632      	mov	r2, r6
 8005944:	4649      	mov	r1, r9
 8005946:	4640      	mov	r0, r8
 8005948:	47d0      	blx	sl
 800594a:	3001      	adds	r0, #1
 800594c:	d09d      	beq.n	800588a <_printf_i+0x162>
 800594e:	3501      	adds	r5, #1
 8005950:	68e3      	ldr	r3, [r4, #12]
 8005952:	9903      	ldr	r1, [sp, #12]
 8005954:	1a5b      	subs	r3, r3, r1
 8005956:	42ab      	cmp	r3, r5
 8005958:	dcf2      	bgt.n	8005940 <_printf_i+0x218>
 800595a:	e7eb      	b.n	8005934 <_printf_i+0x20c>
 800595c:	2500      	movs	r5, #0
 800595e:	f104 0619 	add.w	r6, r4, #25
 8005962:	e7f5      	b.n	8005950 <_printf_i+0x228>
 8005964:	08007a68 	.word	0x08007a68
 8005968:	08007a79 	.word	0x08007a79

0800596c <std>:
 800596c:	2300      	movs	r3, #0
 800596e:	b510      	push	{r4, lr}
 8005970:	4604      	mov	r4, r0
 8005972:	e9c0 3300 	strd	r3, r3, [r0]
 8005976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800597a:	6083      	str	r3, [r0, #8]
 800597c:	8181      	strh	r1, [r0, #12]
 800597e:	6643      	str	r3, [r0, #100]	; 0x64
 8005980:	81c2      	strh	r2, [r0, #14]
 8005982:	6183      	str	r3, [r0, #24]
 8005984:	4619      	mov	r1, r3
 8005986:	2208      	movs	r2, #8
 8005988:	305c      	adds	r0, #92	; 0x5c
 800598a:	f000 f8f4 	bl	8005b76 <memset>
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <std+0x58>)
 8005990:	6224      	str	r4, [r4, #32]
 8005992:	6263      	str	r3, [r4, #36]	; 0x24
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <std+0x5c>)
 8005996:	62a3      	str	r3, [r4, #40]	; 0x28
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <std+0x60>)
 800599a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <std+0x64>)
 800599e:	6323      	str	r3, [r4, #48]	; 0x30
 80059a0:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <std+0x68>)
 80059a2:	429c      	cmp	r4, r3
 80059a4:	d006      	beq.n	80059b4 <std+0x48>
 80059a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80059aa:	4294      	cmp	r4, r2
 80059ac:	d002      	beq.n	80059b4 <std+0x48>
 80059ae:	33d0      	adds	r3, #208	; 0xd0
 80059b0:	429c      	cmp	r4, r3
 80059b2:	d105      	bne.n	80059c0 <std+0x54>
 80059b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059bc:	f000 b958 	b.w	8005c70 <__retarget_lock_init_recursive>
 80059c0:	bd10      	pop	{r4, pc}
 80059c2:	bf00      	nop
 80059c4:	08005af1 	.word	0x08005af1
 80059c8:	08005b13 	.word	0x08005b13
 80059cc:	08005b4b 	.word	0x08005b4b
 80059d0:	08005b6f 	.word	0x08005b6f
 80059d4:	20000404 	.word	0x20000404

080059d8 <stdio_exit_handler>:
 80059d8:	4a02      	ldr	r2, [pc, #8]	; (80059e4 <stdio_exit_handler+0xc>)
 80059da:	4903      	ldr	r1, [pc, #12]	; (80059e8 <stdio_exit_handler+0x10>)
 80059dc:	4803      	ldr	r0, [pc, #12]	; (80059ec <stdio_exit_handler+0x14>)
 80059de:	f000 b869 	b.w	8005ab4 <_fwalk_sglue>
 80059e2:	bf00      	nop
 80059e4:	2000001c 	.word	0x2000001c
 80059e8:	0800735d 	.word	0x0800735d
 80059ec:	20000028 	.word	0x20000028

080059f0 <cleanup_stdio>:
 80059f0:	6841      	ldr	r1, [r0, #4]
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <cleanup_stdio+0x34>)
 80059f4:	b510      	push	{r4, lr}
 80059f6:	4299      	cmp	r1, r3
 80059f8:	4604      	mov	r4, r0
 80059fa:	d001      	beq.n	8005a00 <cleanup_stdio+0x10>
 80059fc:	f001 fcae 	bl	800735c <_fflush_r>
 8005a00:	68a1      	ldr	r1, [r4, #8]
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <cleanup_stdio+0x38>)
 8005a04:	4299      	cmp	r1, r3
 8005a06:	d002      	beq.n	8005a0e <cleanup_stdio+0x1e>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f001 fca7 	bl	800735c <_fflush_r>
 8005a0e:	68e1      	ldr	r1, [r4, #12]
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <cleanup_stdio+0x3c>)
 8005a12:	4299      	cmp	r1, r3
 8005a14:	d004      	beq.n	8005a20 <cleanup_stdio+0x30>
 8005a16:	4620      	mov	r0, r4
 8005a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1c:	f001 bc9e 	b.w	800735c <_fflush_r>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	bf00      	nop
 8005a24:	20000404 	.word	0x20000404
 8005a28:	2000046c 	.word	0x2000046c
 8005a2c:	200004d4 	.word	0x200004d4

08005a30 <global_stdio_init.part.0>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <global_stdio_init.part.0+0x30>)
 8005a34:	4c0b      	ldr	r4, [pc, #44]	; (8005a64 <global_stdio_init.part.0+0x34>)
 8005a36:	4a0c      	ldr	r2, [pc, #48]	; (8005a68 <global_stdio_init.part.0+0x38>)
 8005a38:	4620      	mov	r0, r4
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f7ff ff94 	bl	800596c <std>
 8005a44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a48:	2201      	movs	r2, #1
 8005a4a:	2109      	movs	r1, #9
 8005a4c:	f7ff ff8e 	bl	800596c <std>
 8005a50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a54:	2202      	movs	r2, #2
 8005a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a5a:	2112      	movs	r1, #18
 8005a5c:	f7ff bf86 	b.w	800596c <std>
 8005a60:	2000053c 	.word	0x2000053c
 8005a64:	20000404 	.word	0x20000404
 8005a68:	080059d9 	.word	0x080059d9

08005a6c <__sfp_lock_acquire>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	; (8005a74 <__sfp_lock_acquire+0x8>)
 8005a6e:	f000 b900 	b.w	8005c72 <__retarget_lock_acquire_recursive>
 8005a72:	bf00      	nop
 8005a74:	20000545 	.word	0x20000545

08005a78 <__sfp_lock_release>:
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <__sfp_lock_release+0x8>)
 8005a7a:	f000 b8fb 	b.w	8005c74 <__retarget_lock_release_recursive>
 8005a7e:	bf00      	nop
 8005a80:	20000545 	.word	0x20000545

08005a84 <__sinit>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
 8005a88:	f7ff fff0 	bl	8005a6c <__sfp_lock_acquire>
 8005a8c:	6a23      	ldr	r3, [r4, #32]
 8005a8e:	b11b      	cbz	r3, 8005a98 <__sinit+0x14>
 8005a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a94:	f7ff bff0 	b.w	8005a78 <__sfp_lock_release>
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <__sinit+0x28>)
 8005a9a:	6223      	str	r3, [r4, #32]
 8005a9c:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <__sinit+0x2c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f5      	bne.n	8005a90 <__sinit+0xc>
 8005aa4:	f7ff ffc4 	bl	8005a30 <global_stdio_init.part.0>
 8005aa8:	e7f2      	b.n	8005a90 <__sinit+0xc>
 8005aaa:	bf00      	nop
 8005aac:	080059f1 	.word	0x080059f1
 8005ab0:	2000053c 	.word	0x2000053c

08005ab4 <_fwalk_sglue>:
 8005ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab8:	4607      	mov	r7, r0
 8005aba:	4688      	mov	r8, r1
 8005abc:	4614      	mov	r4, r2
 8005abe:	2600      	movs	r6, #0
 8005ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac8:	d505      	bpl.n	8005ad6 <_fwalk_sglue+0x22>
 8005aca:	6824      	ldr	r4, [r4, #0]
 8005acc:	2c00      	cmp	r4, #0
 8005ace:	d1f7      	bne.n	8005ac0 <_fwalk_sglue+0xc>
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad6:	89ab      	ldrh	r3, [r5, #12]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d907      	bls.n	8005aec <_fwalk_sglue+0x38>
 8005adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	d003      	beq.n	8005aec <_fwalk_sglue+0x38>
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	47c0      	blx	r8
 8005aea:	4306      	orrs	r6, r0
 8005aec:	3568      	adds	r5, #104	; 0x68
 8005aee:	e7e9      	b.n	8005ac4 <_fwalk_sglue+0x10>

08005af0 <__sread>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	460c      	mov	r4, r1
 8005af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af8:	f000 f86c 	bl	8005bd4 <_read_r>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	bfab      	itete	ge
 8005b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b02:	89a3      	ldrhlt	r3, [r4, #12]
 8005b04:	181b      	addge	r3, r3, r0
 8005b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b0a:	bfac      	ite	ge
 8005b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b0e:	81a3      	strhlt	r3, [r4, #12]
 8005b10:	bd10      	pop	{r4, pc}

08005b12 <__swrite>:
 8005b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b16:	461f      	mov	r7, r3
 8005b18:	898b      	ldrh	r3, [r1, #12]
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	05db      	lsls	r3, r3, #23
 8005b1e:	460c      	mov	r4, r1
 8005b20:	4616      	mov	r6, r2
 8005b22:	d505      	bpl.n	8005b30 <__swrite+0x1e>
 8005b24:	2302      	movs	r3, #2
 8005b26:	2200      	movs	r2, #0
 8005b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2c:	f000 f840 	bl	8005bb0 <_lseek_r>
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	4632      	mov	r2, r6
 8005b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b46:	f000 b857 	b.w	8005bf8 <_write_r>

08005b4a <__sseek>:
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b52:	f000 f82d 	bl	8005bb0 <_lseek_r>
 8005b56:	1c43      	adds	r3, r0, #1
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	bf15      	itete	ne
 8005b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b66:	81a3      	strheq	r3, [r4, #12]
 8005b68:	bf18      	it	ne
 8005b6a:	81a3      	strhne	r3, [r4, #12]
 8005b6c:	bd10      	pop	{r4, pc}

08005b6e <__sclose>:
 8005b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b72:	f000 b80d 	b.w	8005b90 <_close_r>

08005b76 <memset>:
 8005b76:	4603      	mov	r3, r0
 8005b78:	4402      	add	r2, r0
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d100      	bne.n	8005b80 <memset+0xa>
 8005b7e:	4770      	bx	lr
 8005b80:	f803 1b01 	strb.w	r1, [r3], #1
 8005b84:	e7f9      	b.n	8005b7a <memset+0x4>
	...

08005b88 <_localeconv_r>:
 8005b88:	4800      	ldr	r0, [pc, #0]	; (8005b8c <_localeconv_r+0x4>)
 8005b8a:	4770      	bx	lr
 8005b8c:	20000168 	.word	0x20000168

08005b90 <_close_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	2300      	movs	r3, #0
 8005b94:	4d05      	ldr	r5, [pc, #20]	; (8005bac <_close_r+0x1c>)
 8005b96:	4604      	mov	r4, r0
 8005b98:	4608      	mov	r0, r1
 8005b9a:	602b      	str	r3, [r5, #0]
 8005b9c:	f7fc fcd0 	bl	8002540 <_close>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d102      	bne.n	8005baa <_close_r+0x1a>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	b103      	cbz	r3, 8005baa <_close_r+0x1a>
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	20000540 	.word	0x20000540

08005bb0 <_lseek_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4d05      	ldr	r5, [pc, #20]	; (8005bd0 <_lseek_r+0x20>)
 8005bbc:	602a      	str	r2, [r5, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7fc fce2 	bl	8002588 <_lseek>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_lseek_r+0x1e>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_lseek_r+0x1e>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000540 	.word	0x20000540

08005bd4 <_read_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4d05      	ldr	r5, [pc, #20]	; (8005bf4 <_read_r+0x20>)
 8005be0:	602a      	str	r2, [r5, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f7fc fc8f 	bl	8002506 <_read>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_read_r+0x1e>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_read_r+0x1e>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000540 	.word	0x20000540

08005bf8 <_write_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	2200      	movs	r2, #0
 8005c02:	4d05      	ldr	r5, [pc, #20]	; (8005c18 <_write_r+0x20>)
 8005c04:	602a      	str	r2, [r5, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f7fc f818 	bl	8001c3c <_write>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_write_r+0x1e>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_write_r+0x1e>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	20000540 	.word	0x20000540

08005c1c <__errno>:
 8005c1c:	4b01      	ldr	r3, [pc, #4]	; (8005c24 <__errno+0x8>)
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000074 	.word	0x20000074

08005c28 <__libc_init_array>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	4d0c      	ldr	r5, [pc, #48]	; (8005c60 <__libc_init_array+0x38>)
 8005c2e:	4c0d      	ldr	r4, [pc, #52]	; (8005c64 <__libc_init_array+0x3c>)
 8005c30:	1b64      	subs	r4, r4, r5
 8005c32:	10a4      	asrs	r4, r4, #2
 8005c34:	42a6      	cmp	r6, r4
 8005c36:	d109      	bne.n	8005c4c <__libc_init_array+0x24>
 8005c38:	f001 fee0 	bl	80079fc <_init>
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	4d0a      	ldr	r5, [pc, #40]	; (8005c68 <__libc_init_array+0x40>)
 8005c40:	4c0a      	ldr	r4, [pc, #40]	; (8005c6c <__libc_init_array+0x44>)
 8005c42:	1b64      	subs	r4, r4, r5
 8005c44:	10a4      	asrs	r4, r4, #2
 8005c46:	42a6      	cmp	r6, r4
 8005c48:	d105      	bne.n	8005c56 <__libc_init_array+0x2e>
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c50:	4798      	blx	r3
 8005c52:	3601      	adds	r6, #1
 8005c54:	e7ee      	b.n	8005c34 <__libc_init_array+0xc>
 8005c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5a:	4798      	blx	r3
 8005c5c:	3601      	adds	r6, #1
 8005c5e:	e7f2      	b.n	8005c46 <__libc_init_array+0x1e>
 8005c60:	08007dc4 	.word	0x08007dc4
 8005c64:	08007dc4 	.word	0x08007dc4
 8005c68:	08007dc4 	.word	0x08007dc4
 8005c6c:	08007dc8 	.word	0x08007dc8

08005c70 <__retarget_lock_init_recursive>:
 8005c70:	4770      	bx	lr

08005c72 <__retarget_lock_acquire_recursive>:
 8005c72:	4770      	bx	lr

08005c74 <__retarget_lock_release_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <memchr>:
 8005c76:	4603      	mov	r3, r0
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	b2c9      	uxtb	r1, r1
 8005c7c:	4402      	add	r2, r0
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	d101      	bne.n	8005c88 <memchr+0x12>
 8005c84:	2000      	movs	r0, #0
 8005c86:	e003      	b.n	8005c90 <memchr+0x1a>
 8005c88:	7804      	ldrb	r4, [r0, #0]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	428c      	cmp	r4, r1
 8005c8e:	d1f6      	bne.n	8005c7e <memchr+0x8>
 8005c90:	bd10      	pop	{r4, pc}

08005c92 <quorem>:
 8005c92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c96:	6903      	ldr	r3, [r0, #16]
 8005c98:	690c      	ldr	r4, [r1, #16]
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	db7f      	blt.n	8005da0 <quorem+0x10e>
 8005ca0:	3c01      	subs	r4, #1
 8005ca2:	f100 0514 	add.w	r5, r0, #20
 8005ca6:	f101 0814 	add.w	r8, r1, #20
 8005caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cc8:	d331      	bcc.n	8005d2e <quorem+0x9c>
 8005cca:	f04f 0e00 	mov.w	lr, #0
 8005cce:	4640      	mov	r0, r8
 8005cd0:	46ac      	mov	ip, r5
 8005cd2:	46f2      	mov	sl, lr
 8005cd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cd8:	b293      	uxth	r3, r2
 8005cda:	fb06 e303 	mla	r3, r6, r3, lr
 8005cde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ce2:	0c1a      	lsrs	r2, r3, #16
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	fb06 220e 	mla	r2, r6, lr, r2
 8005cea:	ebaa 0303 	sub.w	r3, sl, r3
 8005cee:	f8dc a000 	ldr.w	sl, [ip]
 8005cf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cf6:	fa1f fa8a 	uxth.w	sl, sl
 8005cfa:	4453      	add	r3, sl
 8005cfc:	f8dc a000 	ldr.w	sl, [ip]
 8005d00:	b292      	uxth	r2, r2
 8005d02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d10:	4581      	cmp	r9, r0
 8005d12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d16:	f84c 3b04 	str.w	r3, [ip], #4
 8005d1a:	d2db      	bcs.n	8005cd4 <quorem+0x42>
 8005d1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d20:	b92b      	cbnz	r3, 8005d2e <quorem+0x9c>
 8005d22:	9b01      	ldr	r3, [sp, #4]
 8005d24:	3b04      	subs	r3, #4
 8005d26:	429d      	cmp	r5, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	d32d      	bcc.n	8005d88 <quorem+0xf6>
 8005d2c:	613c      	str	r4, [r7, #16]
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f001 f994 	bl	800705c <__mcmp>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	db23      	blt.n	8005d80 <quorem+0xee>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d42:	f8d1 c000 	ldr.w	ip, [r1]
 8005d46:	b293      	uxth	r3, r2
 8005d48:	1ac3      	subs	r3, r0, r3
 8005d4a:	0c12      	lsrs	r2, r2, #16
 8005d4c:	fa1f f08c 	uxth.w	r0, ip
 8005d50:	4403      	add	r3, r0
 8005d52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d60:	45c1      	cmp	r9, r8
 8005d62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d66:	f841 3b04 	str.w	r3, [r1], #4
 8005d6a:	d2e8      	bcs.n	8005d3e <quorem+0xac>
 8005d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d74:	b922      	cbnz	r2, 8005d80 <quorem+0xee>
 8005d76:	3b04      	subs	r3, #4
 8005d78:	429d      	cmp	r5, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	d30a      	bcc.n	8005d94 <quorem+0x102>
 8005d7e:	613c      	str	r4, [r7, #16]
 8005d80:	4630      	mov	r0, r6
 8005d82:	b003      	add	sp, #12
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	3b04      	subs	r3, #4
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	d1cd      	bne.n	8005d2c <quorem+0x9a>
 8005d90:	3c01      	subs	r4, #1
 8005d92:	e7c8      	b.n	8005d26 <quorem+0x94>
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	3b04      	subs	r3, #4
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d1f0      	bne.n	8005d7e <quorem+0xec>
 8005d9c:	3c01      	subs	r4, #1
 8005d9e:	e7eb      	b.n	8005d78 <quorem+0xe6>
 8005da0:	2000      	movs	r0, #0
 8005da2:	e7ee      	b.n	8005d82 <quorem+0xf0>
 8005da4:	0000      	movs	r0, r0
	...

08005da8 <_dtoa_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	4616      	mov	r6, r2
 8005dae:	461f      	mov	r7, r3
 8005db0:	69c4      	ldr	r4, [r0, #28]
 8005db2:	b099      	sub	sp, #100	; 0x64
 8005db4:	4605      	mov	r5, r0
 8005db6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005dba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005dbe:	b974      	cbnz	r4, 8005dde <_dtoa_r+0x36>
 8005dc0:	2010      	movs	r0, #16
 8005dc2:	f000 fe1d 	bl	8006a00 <malloc>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	61e8      	str	r0, [r5, #28]
 8005dca:	b920      	cbnz	r0, 8005dd6 <_dtoa_r+0x2e>
 8005dcc:	21ef      	movs	r1, #239	; 0xef
 8005dce:	4bac      	ldr	r3, [pc, #688]	; (8006080 <_dtoa_r+0x2d8>)
 8005dd0:	48ac      	ldr	r0, [pc, #688]	; (8006084 <_dtoa_r+0x2dc>)
 8005dd2:	f001 fb09 	bl	80073e8 <__assert_func>
 8005dd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dda:	6004      	str	r4, [r0, #0]
 8005ddc:	60c4      	str	r4, [r0, #12]
 8005dde:	69eb      	ldr	r3, [r5, #28]
 8005de0:	6819      	ldr	r1, [r3, #0]
 8005de2:	b151      	cbz	r1, 8005dfa <_dtoa_r+0x52>
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	2301      	movs	r3, #1
 8005de8:	4093      	lsls	r3, r2
 8005dea:	604a      	str	r2, [r1, #4]
 8005dec:	608b      	str	r3, [r1, #8]
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 fefa 	bl	8006be8 <_Bfree>
 8005df4:	2200      	movs	r2, #0
 8005df6:	69eb      	ldr	r3, [r5, #28]
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	1e3b      	subs	r3, r7, #0
 8005dfc:	bfaf      	iteee	ge
 8005dfe:	2300      	movge	r3, #0
 8005e00:	2201      	movlt	r2, #1
 8005e02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e06:	9305      	strlt	r3, [sp, #20]
 8005e08:	bfa8      	it	ge
 8005e0a:	f8c8 3000 	strge.w	r3, [r8]
 8005e0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005e12:	4b9d      	ldr	r3, [pc, #628]	; (8006088 <_dtoa_r+0x2e0>)
 8005e14:	bfb8      	it	lt
 8005e16:	f8c8 2000 	strlt.w	r2, [r8]
 8005e1a:	ea33 0309 	bics.w	r3, r3, r9
 8005e1e:	d119      	bne.n	8005e54 <_dtoa_r+0xac>
 8005e20:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e2c:	4333      	orrs	r3, r6
 8005e2e:	f000 8589 	beq.w	8006944 <_dtoa_r+0xb9c>
 8005e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e34:	b953      	cbnz	r3, 8005e4c <_dtoa_r+0xa4>
 8005e36:	4b95      	ldr	r3, [pc, #596]	; (800608c <_dtoa_r+0x2e4>)
 8005e38:	e023      	b.n	8005e82 <_dtoa_r+0xda>
 8005e3a:	4b95      	ldr	r3, [pc, #596]	; (8006090 <_dtoa_r+0x2e8>)
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	9803      	ldr	r0, [sp, #12]
 8005e46:	b019      	add	sp, #100	; 0x64
 8005e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4c:	4b8f      	ldr	r3, [pc, #572]	; (800608c <_dtoa_r+0x2e4>)
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	3303      	adds	r3, #3
 8005e52:	e7f5      	b.n	8005e40 <_dtoa_r+0x98>
 8005e54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e60:	2200      	movs	r2, #0
 8005e62:	2300      	movs	r3, #0
 8005e64:	f7fa fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8005e68:	4680      	mov	r8, r0
 8005e6a:	b160      	cbz	r0, 8005e86 <_dtoa_r+0xde>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8562 	beq.w	800693e <_dtoa_r+0xb96>
 8005e7a:	4b86      	ldr	r3, [pc, #536]	; (8006094 <_dtoa_r+0x2ec>)
 8005e7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	e7de      	b.n	8005e44 <_dtoa_r+0x9c>
 8005e86:	ab16      	add	r3, sp, #88	; 0x58
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	ab17      	add	r3, sp, #92	; 0x5c
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	4628      	mov	r0, r5
 8005e90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e94:	f001 f98a 	bl	80071ac <__d2b>
 8005e98:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d07e      	beq.n	8005fa0 <_dtoa_r+0x1f8>
 8005ea2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ea8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eb0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005eb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005eb8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	4b75      	ldr	r3, [pc, #468]	; (8006098 <_dtoa_r+0x2f0>)
 8005ec2:	f7fa f951 	bl	8000168 <__aeabi_dsub>
 8005ec6:	a368      	add	r3, pc, #416	; (adr r3, 8006068 <_dtoa_r+0x2c0>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa fb04 	bl	80004d8 <__aeabi_dmul>
 8005ed0:	a367      	add	r3, pc, #412	; (adr r3, 8006070 <_dtoa_r+0x2c8>)
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f7fa f949 	bl	800016c <__adddf3>
 8005eda:	4606      	mov	r6, r0
 8005edc:	4620      	mov	r0, r4
 8005ede:	460f      	mov	r7, r1
 8005ee0:	f7fa fa90 	bl	8000404 <__aeabi_i2d>
 8005ee4:	a364      	add	r3, pc, #400	; (adr r3, 8006078 <_dtoa_r+0x2d0>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa faf5 	bl	80004d8 <__aeabi_dmul>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	4639      	mov	r1, r7
 8005ef6:	f7fa f939 	bl	800016c <__adddf3>
 8005efa:	4606      	mov	r6, r0
 8005efc:	460f      	mov	r7, r1
 8005efe:	f7fa fd9b 	bl	8000a38 <__aeabi_d2iz>
 8005f02:	2200      	movs	r2, #0
 8005f04:	4683      	mov	fp, r0
 8005f06:	2300      	movs	r3, #0
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa fd56 	bl	80009bc <__aeabi_dcmplt>
 8005f10:	b148      	cbz	r0, 8005f26 <_dtoa_r+0x17e>
 8005f12:	4658      	mov	r0, fp
 8005f14:	f7fa fa76 	bl	8000404 <__aeabi_i2d>
 8005f18:	4632      	mov	r2, r6
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	f7fa fd44 	bl	80009a8 <__aeabi_dcmpeq>
 8005f20:	b908      	cbnz	r0, 8005f26 <_dtoa_r+0x17e>
 8005f22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f26:	f1bb 0f16 	cmp.w	fp, #22
 8005f2a:	d857      	bhi.n	8005fdc <_dtoa_r+0x234>
 8005f2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f30:	4b5a      	ldr	r3, [pc, #360]	; (800609c <_dtoa_r+0x2f4>)
 8005f32:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa fd3f 	bl	80009bc <__aeabi_dcmplt>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d04e      	beq.n	8005fe0 <_dtoa_r+0x238>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f48:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f4c:	1b1b      	subs	r3, r3, r4
 8005f4e:	1e5a      	subs	r2, r3, #1
 8005f50:	bf46      	itte	mi
 8005f52:	f1c3 0901 	rsbmi	r9, r3, #1
 8005f56:	2300      	movmi	r3, #0
 8005f58:	f04f 0900 	movpl.w	r9, #0
 8005f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f5e:	bf48      	it	mi
 8005f60:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f62:	f1bb 0f00 	cmp.w	fp, #0
 8005f66:	db3d      	blt.n	8005fe4 <_dtoa_r+0x23c>
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005f6e:	445b      	add	r3, fp
 8005f70:	9309      	str	r3, [sp, #36]	; 0x24
 8005f72:	2300      	movs	r3, #0
 8005f74:	930a      	str	r3, [sp, #40]	; 0x28
 8005f76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	d867      	bhi.n	800604c <_dtoa_r+0x2a4>
 8005f7c:	2b05      	cmp	r3, #5
 8005f7e:	bfc4      	itt	gt
 8005f80:	3b04      	subgt	r3, #4
 8005f82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f86:	bfc8      	it	gt
 8005f88:	2400      	movgt	r4, #0
 8005f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8005f8e:	bfd8      	it	le
 8005f90:	2401      	movle	r4, #1
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	f200 8086 	bhi.w	80060a4 <_dtoa_r+0x2fc>
 8005f98:	e8df f003 	tbb	[pc, r3]
 8005f9c:	5637392c 	.word	0x5637392c
 8005fa0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005fa4:	441c      	add	r4, r3
 8005fa6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	bfc1      	itttt	gt
 8005fae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fb2:	fa09 f903 	lslgt.w	r9, r9, r3
 8005fb6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005fba:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005fbe:	bfd6      	itet	le
 8005fc0:	f1c3 0320 	rsble	r3, r3, #32
 8005fc4:	ea49 0003 	orrgt.w	r0, r9, r3
 8005fc8:	fa06 f003 	lslle.w	r0, r6, r3
 8005fcc:	f7fa fa0a 	bl	80003e4 <__aeabi_ui2d>
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005fd6:	3c01      	subs	r4, #1
 8005fd8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005fda:	e76f      	b.n	8005ebc <_dtoa_r+0x114>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e7b3      	b.n	8005f48 <_dtoa_r+0x1a0>
 8005fe0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005fe2:	e7b2      	b.n	8005f4a <_dtoa_r+0x1a2>
 8005fe4:	f1cb 0300 	rsb	r3, fp, #0
 8005fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fea:	2300      	movs	r3, #0
 8005fec:	eba9 090b 	sub.w	r9, r9, fp
 8005ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff2:	e7c0      	b.n	8005f76 <_dtoa_r+0x1ce>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	dc55      	bgt.n	80060aa <_dtoa_r+0x302>
 8005ffe:	2301      	movs	r3, #1
 8006000:	461a      	mov	r2, r3
 8006002:	9306      	str	r3, [sp, #24]
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	9223      	str	r2, [sp, #140]	; 0x8c
 8006008:	e00b      	b.n	8006022 <_dtoa_r+0x27a>
 800600a:	2301      	movs	r3, #1
 800600c:	e7f3      	b.n	8005ff6 <_dtoa_r+0x24e>
 800600e:	2300      	movs	r3, #0
 8006010:	930b      	str	r3, [sp, #44]	; 0x2c
 8006012:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006014:	445b      	add	r3, fp
 8006016:	9306      	str	r3, [sp, #24]
 8006018:	3301      	adds	r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	9308      	str	r3, [sp, #32]
 800601e:	bfb8      	it	lt
 8006020:	2301      	movlt	r3, #1
 8006022:	2100      	movs	r1, #0
 8006024:	2204      	movs	r2, #4
 8006026:	69e8      	ldr	r0, [r5, #28]
 8006028:	f102 0614 	add.w	r6, r2, #20
 800602c:	429e      	cmp	r6, r3
 800602e:	d940      	bls.n	80060b2 <_dtoa_r+0x30a>
 8006030:	6041      	str	r1, [r0, #4]
 8006032:	4628      	mov	r0, r5
 8006034:	f000 fd98 	bl	8006b68 <_Balloc>
 8006038:	9003      	str	r0, [sp, #12]
 800603a:	2800      	cmp	r0, #0
 800603c:	d13c      	bne.n	80060b8 <_dtoa_r+0x310>
 800603e:	4602      	mov	r2, r0
 8006040:	f240 11af 	movw	r1, #431	; 0x1af
 8006044:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <_dtoa_r+0x2f8>)
 8006046:	e6c3      	b.n	8005dd0 <_dtoa_r+0x28>
 8006048:	2301      	movs	r3, #1
 800604a:	e7e1      	b.n	8006010 <_dtoa_r+0x268>
 800604c:	2401      	movs	r4, #1
 800604e:	2300      	movs	r3, #0
 8006050:	940b      	str	r4, [sp, #44]	; 0x2c
 8006052:	9322      	str	r3, [sp, #136]	; 0x88
 8006054:	f04f 33ff 	mov.w	r3, #4294967295
 8006058:	2200      	movs	r2, #0
 800605a:	9306      	str	r3, [sp, #24]
 800605c:	9308      	str	r3, [sp, #32]
 800605e:	2312      	movs	r3, #18
 8006060:	e7d1      	b.n	8006006 <_dtoa_r+0x25e>
 8006062:	bf00      	nop
 8006064:	f3af 8000 	nop.w
 8006068:	636f4361 	.word	0x636f4361
 800606c:	3fd287a7 	.word	0x3fd287a7
 8006070:	8b60c8b3 	.word	0x8b60c8b3
 8006074:	3fc68a28 	.word	0x3fc68a28
 8006078:	509f79fb 	.word	0x509f79fb
 800607c:	3fd34413 	.word	0x3fd34413
 8006080:	08007a97 	.word	0x08007a97
 8006084:	08007aae 	.word	0x08007aae
 8006088:	7ff00000 	.word	0x7ff00000
 800608c:	08007a93 	.word	0x08007a93
 8006090:	08007a8a 	.word	0x08007a8a
 8006094:	08007a67 	.word	0x08007a67
 8006098:	3ff80000 	.word	0x3ff80000
 800609c:	08007b98 	.word	0x08007b98
 80060a0:	08007b06 	.word	0x08007b06
 80060a4:	2301      	movs	r3, #1
 80060a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060a8:	e7d4      	b.n	8006054 <_dtoa_r+0x2ac>
 80060aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060ac:	9306      	str	r3, [sp, #24]
 80060ae:	9308      	str	r3, [sp, #32]
 80060b0:	e7b7      	b.n	8006022 <_dtoa_r+0x27a>
 80060b2:	3101      	adds	r1, #1
 80060b4:	0052      	lsls	r2, r2, #1
 80060b6:	e7b7      	b.n	8006028 <_dtoa_r+0x280>
 80060b8:	69eb      	ldr	r3, [r5, #28]
 80060ba:	9a03      	ldr	r2, [sp, #12]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	9b08      	ldr	r3, [sp, #32]
 80060c0:	2b0e      	cmp	r3, #14
 80060c2:	f200 80a8 	bhi.w	8006216 <_dtoa_r+0x46e>
 80060c6:	2c00      	cmp	r4, #0
 80060c8:	f000 80a5 	beq.w	8006216 <_dtoa_r+0x46e>
 80060cc:	f1bb 0f00 	cmp.w	fp, #0
 80060d0:	dd34      	ble.n	800613c <_dtoa_r+0x394>
 80060d2:	4b9a      	ldr	r3, [pc, #616]	; (800633c <_dtoa_r+0x594>)
 80060d4:	f00b 020f 	and.w	r2, fp, #15
 80060d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80060ec:	d016      	beq.n	800611c <_dtoa_r+0x374>
 80060ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060f2:	4b93      	ldr	r3, [pc, #588]	; (8006340 <_dtoa_r+0x598>)
 80060f4:	2703      	movs	r7, #3
 80060f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060fa:	f7fa fb17 	bl	800072c <__aeabi_ddiv>
 80060fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006102:	f004 040f 	and.w	r4, r4, #15
 8006106:	4e8e      	ldr	r6, [pc, #568]	; (8006340 <_dtoa_r+0x598>)
 8006108:	b954      	cbnz	r4, 8006120 <_dtoa_r+0x378>
 800610a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800610e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006112:	f7fa fb0b 	bl	800072c <__aeabi_ddiv>
 8006116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800611a:	e029      	b.n	8006170 <_dtoa_r+0x3c8>
 800611c:	2702      	movs	r7, #2
 800611e:	e7f2      	b.n	8006106 <_dtoa_r+0x35e>
 8006120:	07e1      	lsls	r1, r4, #31
 8006122:	d508      	bpl.n	8006136 <_dtoa_r+0x38e>
 8006124:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006128:	e9d6 2300 	ldrd	r2, r3, [r6]
 800612c:	f7fa f9d4 	bl	80004d8 <__aeabi_dmul>
 8006130:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006134:	3701      	adds	r7, #1
 8006136:	1064      	asrs	r4, r4, #1
 8006138:	3608      	adds	r6, #8
 800613a:	e7e5      	b.n	8006108 <_dtoa_r+0x360>
 800613c:	f000 80a5 	beq.w	800628a <_dtoa_r+0x4e2>
 8006140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006144:	f1cb 0400 	rsb	r4, fp, #0
 8006148:	4b7c      	ldr	r3, [pc, #496]	; (800633c <_dtoa_r+0x594>)
 800614a:	f004 020f 	and.w	r2, r4, #15
 800614e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa f9bf 	bl	80004d8 <__aeabi_dmul>
 800615a:	2702      	movs	r7, #2
 800615c:	2300      	movs	r3, #0
 800615e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006162:	4e77      	ldr	r6, [pc, #476]	; (8006340 <_dtoa_r+0x598>)
 8006164:	1124      	asrs	r4, r4, #4
 8006166:	2c00      	cmp	r4, #0
 8006168:	f040 8084 	bne.w	8006274 <_dtoa_r+0x4cc>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1d2      	bne.n	8006116 <_dtoa_r+0x36e>
 8006170:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006174:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8087 	beq.w	800628e <_dtoa_r+0x4e6>
 8006180:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006184:	2200      	movs	r2, #0
 8006186:	4b6f      	ldr	r3, [pc, #444]	; (8006344 <_dtoa_r+0x59c>)
 8006188:	f7fa fc18 	bl	80009bc <__aeabi_dcmplt>
 800618c:	2800      	cmp	r0, #0
 800618e:	d07e      	beq.n	800628e <_dtoa_r+0x4e6>
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d07b      	beq.n	800628e <_dtoa_r+0x4e6>
 8006196:	9b06      	ldr	r3, [sp, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	dd38      	ble.n	800620e <_dtoa_r+0x466>
 800619c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061a0:	2200      	movs	r2, #0
 80061a2:	4b69      	ldr	r3, [pc, #420]	; (8006348 <_dtoa_r+0x5a0>)
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ac:	9c06      	ldr	r4, [sp, #24]
 80061ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 80061b2:	3701      	adds	r7, #1
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7fa f925 	bl	8000404 <__aeabi_i2d>
 80061ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061be:	f7fa f98b 	bl	80004d8 <__aeabi_dmul>
 80061c2:	2200      	movs	r2, #0
 80061c4:	4b61      	ldr	r3, [pc, #388]	; (800634c <_dtoa_r+0x5a4>)
 80061c6:	f7f9 ffd1 	bl	800016c <__adddf3>
 80061ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80061ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061d2:	9611      	str	r6, [sp, #68]	; 0x44
 80061d4:	2c00      	cmp	r4, #0
 80061d6:	d15d      	bne.n	8006294 <_dtoa_r+0x4ec>
 80061d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061dc:	2200      	movs	r2, #0
 80061de:	4b5c      	ldr	r3, [pc, #368]	; (8006350 <_dtoa_r+0x5a8>)
 80061e0:	f7f9 ffc2 	bl	8000168 <__aeabi_dsub>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061ec:	4633      	mov	r3, r6
 80061ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061f0:	f7fa fc02 	bl	80009f8 <__aeabi_dcmpgt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f040 8295 	bne.w	8006724 <_dtoa_r+0x97c>
 80061fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006200:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006204:	f7fa fbda 	bl	80009bc <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 8289 	bne.w	8006720 <_dtoa_r+0x978>
 800620e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006212:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006216:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006218:	2b00      	cmp	r3, #0
 800621a:	f2c0 8151 	blt.w	80064c0 <_dtoa_r+0x718>
 800621e:	f1bb 0f0e 	cmp.w	fp, #14
 8006222:	f300 814d 	bgt.w	80064c0 <_dtoa_r+0x718>
 8006226:	4b45      	ldr	r3, [pc, #276]	; (800633c <_dtoa_r+0x594>)
 8006228:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800622c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006230:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006234:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006236:	2b00      	cmp	r3, #0
 8006238:	f280 80da 	bge.w	80063f0 <_dtoa_r+0x648>
 800623c:	9b08      	ldr	r3, [sp, #32]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f300 80d6 	bgt.w	80063f0 <_dtoa_r+0x648>
 8006244:	f040 826b 	bne.w	800671e <_dtoa_r+0x976>
 8006248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800624c:	2200      	movs	r2, #0
 800624e:	4b40      	ldr	r3, [pc, #256]	; (8006350 <_dtoa_r+0x5a8>)
 8006250:	f7fa f942 	bl	80004d8 <__aeabi_dmul>
 8006254:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006258:	f7fa fbc4 	bl	80009e4 <__aeabi_dcmpge>
 800625c:	9c08      	ldr	r4, [sp, #32]
 800625e:	4626      	mov	r6, r4
 8006260:	2800      	cmp	r0, #0
 8006262:	f040 8241 	bne.w	80066e8 <_dtoa_r+0x940>
 8006266:	2331      	movs	r3, #49	; 0x31
 8006268:	9f03      	ldr	r7, [sp, #12]
 800626a:	f10b 0b01 	add.w	fp, fp, #1
 800626e:	f807 3b01 	strb.w	r3, [r7], #1
 8006272:	e23d      	b.n	80066f0 <_dtoa_r+0x948>
 8006274:	07e2      	lsls	r2, r4, #31
 8006276:	d505      	bpl.n	8006284 <_dtoa_r+0x4dc>
 8006278:	e9d6 2300 	ldrd	r2, r3, [r6]
 800627c:	f7fa f92c 	bl	80004d8 <__aeabi_dmul>
 8006280:	2301      	movs	r3, #1
 8006282:	3701      	adds	r7, #1
 8006284:	1064      	asrs	r4, r4, #1
 8006286:	3608      	adds	r6, #8
 8006288:	e76d      	b.n	8006166 <_dtoa_r+0x3be>
 800628a:	2702      	movs	r7, #2
 800628c:	e770      	b.n	8006170 <_dtoa_r+0x3c8>
 800628e:	46d8      	mov	r8, fp
 8006290:	9c08      	ldr	r4, [sp, #32]
 8006292:	e78f      	b.n	80061b4 <_dtoa_r+0x40c>
 8006294:	9903      	ldr	r1, [sp, #12]
 8006296:	4b29      	ldr	r3, [pc, #164]	; (800633c <_dtoa_r+0x594>)
 8006298:	4421      	add	r1, r4
 800629a:	9112      	str	r1, [sp, #72]	; 0x48
 800629c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800629e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062aa:	2900      	cmp	r1, #0
 80062ac:	d054      	beq.n	8006358 <_dtoa_r+0x5b0>
 80062ae:	2000      	movs	r0, #0
 80062b0:	4928      	ldr	r1, [pc, #160]	; (8006354 <_dtoa_r+0x5ac>)
 80062b2:	f7fa fa3b 	bl	800072c <__aeabi_ddiv>
 80062b6:	463b      	mov	r3, r7
 80062b8:	4632      	mov	r2, r6
 80062ba:	f7f9 ff55 	bl	8000168 <__aeabi_dsub>
 80062be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062c2:	9f03      	ldr	r7, [sp, #12]
 80062c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c8:	f7fa fbb6 	bl	8000a38 <__aeabi_d2iz>
 80062cc:	4604      	mov	r4, r0
 80062ce:	f7fa f899 	bl	8000404 <__aeabi_i2d>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062da:	f7f9 ff45 	bl	8000168 <__aeabi_dsub>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	3430      	adds	r4, #48	; 0x30
 80062e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062ec:	f807 4b01 	strb.w	r4, [r7], #1
 80062f0:	f7fa fb64 	bl	80009bc <__aeabi_dcmplt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d173      	bne.n	80063e0 <_dtoa_r+0x638>
 80062f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062fc:	2000      	movs	r0, #0
 80062fe:	4911      	ldr	r1, [pc, #68]	; (8006344 <_dtoa_r+0x59c>)
 8006300:	f7f9 ff32 	bl	8000168 <__aeabi_dsub>
 8006304:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006308:	f7fa fb58 	bl	80009bc <__aeabi_dcmplt>
 800630c:	2800      	cmp	r0, #0
 800630e:	f040 80b6 	bne.w	800647e <_dtoa_r+0x6d6>
 8006312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006314:	429f      	cmp	r7, r3
 8006316:	f43f af7a 	beq.w	800620e <_dtoa_r+0x466>
 800631a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800631e:	2200      	movs	r2, #0
 8006320:	4b09      	ldr	r3, [pc, #36]	; (8006348 <_dtoa_r+0x5a0>)
 8006322:	f7fa f8d9 	bl	80004d8 <__aeabi_dmul>
 8006326:	2200      	movs	r2, #0
 8006328:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800632c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <_dtoa_r+0x5a0>)
 8006332:	f7fa f8d1 	bl	80004d8 <__aeabi_dmul>
 8006336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800633a:	e7c3      	b.n	80062c4 <_dtoa_r+0x51c>
 800633c:	08007b98 	.word	0x08007b98
 8006340:	08007b70 	.word	0x08007b70
 8006344:	3ff00000 	.word	0x3ff00000
 8006348:	40240000 	.word	0x40240000
 800634c:	401c0000 	.word	0x401c0000
 8006350:	40140000 	.word	0x40140000
 8006354:	3fe00000 	.word	0x3fe00000
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa f8bc 	bl	80004d8 <__aeabi_dmul>
 8006360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006362:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006366:	9c03      	ldr	r4, [sp, #12]
 8006368:	9314      	str	r3, [sp, #80]	; 0x50
 800636a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800636e:	f7fa fb63 	bl	8000a38 <__aeabi_d2iz>
 8006372:	9015      	str	r0, [sp, #84]	; 0x54
 8006374:	f7fa f846 	bl	8000404 <__aeabi_i2d>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006380:	f7f9 fef2 	bl	8000168 <__aeabi_dsub>
 8006384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006386:	4606      	mov	r6, r0
 8006388:	3330      	adds	r3, #48	; 0x30
 800638a:	f804 3b01 	strb.w	r3, [r4], #1
 800638e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006390:	460f      	mov	r7, r1
 8006392:	429c      	cmp	r4, r3
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	d124      	bne.n	80063e4 <_dtoa_r+0x63c>
 800639a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800639e:	4baf      	ldr	r3, [pc, #700]	; (800665c <_dtoa_r+0x8b4>)
 80063a0:	f7f9 fee4 	bl	800016c <__adddf3>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4630      	mov	r0, r6
 80063aa:	4639      	mov	r1, r7
 80063ac:	f7fa fb24 	bl	80009f8 <__aeabi_dcmpgt>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d163      	bne.n	800647c <_dtoa_r+0x6d4>
 80063b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063b8:	2000      	movs	r0, #0
 80063ba:	49a8      	ldr	r1, [pc, #672]	; (800665c <_dtoa_r+0x8b4>)
 80063bc:	f7f9 fed4 	bl	8000168 <__aeabi_dsub>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4630      	mov	r0, r6
 80063c6:	4639      	mov	r1, r7
 80063c8:	f7fa faf8 	bl	80009bc <__aeabi_dcmplt>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f43f af1e 	beq.w	800620e <_dtoa_r+0x466>
 80063d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80063d4:	1e7b      	subs	r3, r7, #1
 80063d6:	9314      	str	r3, [sp, #80]	; 0x50
 80063d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d0f8      	beq.n	80063d2 <_dtoa_r+0x62a>
 80063e0:	46c3      	mov	fp, r8
 80063e2:	e03b      	b.n	800645c <_dtoa_r+0x6b4>
 80063e4:	4b9e      	ldr	r3, [pc, #632]	; (8006660 <_dtoa_r+0x8b8>)
 80063e6:	f7fa f877 	bl	80004d8 <__aeabi_dmul>
 80063ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ee:	e7bc      	b.n	800636a <_dtoa_r+0x5c2>
 80063f0:	9f03      	ldr	r7, [sp, #12]
 80063f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80063f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f7fa f995 	bl	800072c <__aeabi_ddiv>
 8006402:	f7fa fb19 	bl	8000a38 <__aeabi_d2iz>
 8006406:	4604      	mov	r4, r0
 8006408:	f7f9 fffc 	bl	8000404 <__aeabi_i2d>
 800640c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006410:	f7fa f862 	bl	80004d8 <__aeabi_dmul>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4640      	mov	r0, r8
 800641a:	4649      	mov	r1, r9
 800641c:	f7f9 fea4 	bl	8000168 <__aeabi_dsub>
 8006420:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006424:	f807 6b01 	strb.w	r6, [r7], #1
 8006428:	9e03      	ldr	r6, [sp, #12]
 800642a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800642e:	1bbe      	subs	r6, r7, r6
 8006430:	45b4      	cmp	ip, r6
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	d136      	bne.n	80064a6 <_dtoa_r+0x6fe>
 8006438:	f7f9 fe98 	bl	800016c <__adddf3>
 800643c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006440:	4680      	mov	r8, r0
 8006442:	4689      	mov	r9, r1
 8006444:	f7fa fad8 	bl	80009f8 <__aeabi_dcmpgt>
 8006448:	bb58      	cbnz	r0, 80064a2 <_dtoa_r+0x6fa>
 800644a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800644e:	4640      	mov	r0, r8
 8006450:	4649      	mov	r1, r9
 8006452:	f7fa faa9 	bl	80009a8 <__aeabi_dcmpeq>
 8006456:	b108      	cbz	r0, 800645c <_dtoa_r+0x6b4>
 8006458:	07e3      	lsls	r3, r4, #31
 800645a:	d422      	bmi.n	80064a2 <_dtoa_r+0x6fa>
 800645c:	4651      	mov	r1, sl
 800645e:	4628      	mov	r0, r5
 8006460:	f000 fbc2 	bl	8006be8 <_Bfree>
 8006464:	2300      	movs	r3, #0
 8006466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006468:	703b      	strb	r3, [r7, #0]
 800646a:	f10b 0301 	add.w	r3, fp, #1
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006472:	2b00      	cmp	r3, #0
 8006474:	f43f ace6 	beq.w	8005e44 <_dtoa_r+0x9c>
 8006478:	601f      	str	r7, [r3, #0]
 800647a:	e4e3      	b.n	8005e44 <_dtoa_r+0x9c>
 800647c:	4627      	mov	r7, r4
 800647e:	463b      	mov	r3, r7
 8006480:	461f      	mov	r7, r3
 8006482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006486:	2a39      	cmp	r2, #57	; 0x39
 8006488:	d107      	bne.n	800649a <_dtoa_r+0x6f2>
 800648a:	9a03      	ldr	r2, [sp, #12]
 800648c:	429a      	cmp	r2, r3
 800648e:	d1f7      	bne.n	8006480 <_dtoa_r+0x6d8>
 8006490:	2230      	movs	r2, #48	; 0x30
 8006492:	9903      	ldr	r1, [sp, #12]
 8006494:	f108 0801 	add.w	r8, r8, #1
 8006498:	700a      	strb	r2, [r1, #0]
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	3201      	adds	r2, #1
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e79e      	b.n	80063e0 <_dtoa_r+0x638>
 80064a2:	46d8      	mov	r8, fp
 80064a4:	e7eb      	b.n	800647e <_dtoa_r+0x6d6>
 80064a6:	2200      	movs	r2, #0
 80064a8:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <_dtoa_r+0x8b8>)
 80064aa:	f7fa f815 	bl	80004d8 <__aeabi_dmul>
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	4680      	mov	r8, r0
 80064b4:	4689      	mov	r9, r1
 80064b6:	f7fa fa77 	bl	80009a8 <__aeabi_dcmpeq>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d09b      	beq.n	80063f6 <_dtoa_r+0x64e>
 80064be:	e7cd      	b.n	800645c <_dtoa_r+0x6b4>
 80064c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	f000 80c4 	beq.w	8006650 <_dtoa_r+0x8a8>
 80064c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80064ca:	2a01      	cmp	r2, #1
 80064cc:	f300 80a8 	bgt.w	8006620 <_dtoa_r+0x878>
 80064d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	f000 80a0 	beq.w	8006618 <_dtoa_r+0x870>
 80064d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064dc:	464f      	mov	r7, r9
 80064de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e2:	2101      	movs	r1, #1
 80064e4:	441a      	add	r2, r3
 80064e6:	4628      	mov	r0, r5
 80064e8:	4499      	add	r9, r3
 80064ea:	9209      	str	r2, [sp, #36]	; 0x24
 80064ec:	f000 fc32 	bl	8006d54 <__i2b>
 80064f0:	4606      	mov	r6, r0
 80064f2:	b15f      	cbz	r7, 800650c <_dtoa_r+0x764>
 80064f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dd08      	ble.n	800650c <_dtoa_r+0x764>
 80064fa:	42bb      	cmp	r3, r7
 80064fc:	bfa8      	it	ge
 80064fe:	463b      	movge	r3, r7
 8006500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006502:	eba9 0903 	sub.w	r9, r9, r3
 8006506:	1aff      	subs	r7, r7, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	9309      	str	r3, [sp, #36]	; 0x24
 800650c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650e:	b1f3      	cbz	r3, 800654e <_dtoa_r+0x7a6>
 8006510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80a0 	beq.w	8006658 <_dtoa_r+0x8b0>
 8006518:	2c00      	cmp	r4, #0
 800651a:	dd10      	ble.n	800653e <_dtoa_r+0x796>
 800651c:	4631      	mov	r1, r6
 800651e:	4622      	mov	r2, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f000 fcd5 	bl	8006ed0 <__pow5mult>
 8006526:	4652      	mov	r2, sl
 8006528:	4601      	mov	r1, r0
 800652a:	4606      	mov	r6, r0
 800652c:	4628      	mov	r0, r5
 800652e:	f000 fc27 	bl	8006d80 <__multiply>
 8006532:	4680      	mov	r8, r0
 8006534:	4651      	mov	r1, sl
 8006536:	4628      	mov	r0, r5
 8006538:	f000 fb56 	bl	8006be8 <_Bfree>
 800653c:	46c2      	mov	sl, r8
 800653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006540:	1b1a      	subs	r2, r3, r4
 8006542:	d004      	beq.n	800654e <_dtoa_r+0x7a6>
 8006544:	4651      	mov	r1, sl
 8006546:	4628      	mov	r0, r5
 8006548:	f000 fcc2 	bl	8006ed0 <__pow5mult>
 800654c:	4682      	mov	sl, r0
 800654e:	2101      	movs	r1, #1
 8006550:	4628      	mov	r0, r5
 8006552:	f000 fbff 	bl	8006d54 <__i2b>
 8006556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006558:	4604      	mov	r4, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	f340 8082 	ble.w	8006664 <_dtoa_r+0x8bc>
 8006560:	461a      	mov	r2, r3
 8006562:	4601      	mov	r1, r0
 8006564:	4628      	mov	r0, r5
 8006566:	f000 fcb3 	bl	8006ed0 <__pow5mult>
 800656a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800656c:	4604      	mov	r4, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	dd7b      	ble.n	800666a <_dtoa_r+0x8c2>
 8006572:	f04f 0800 	mov.w	r8, #0
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800657c:	6918      	ldr	r0, [r3, #16]
 800657e:	f000 fb9b 	bl	8006cb8 <__hi0bits>
 8006582:	f1c0 0020 	rsb	r0, r0, #32
 8006586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006588:	4418      	add	r0, r3
 800658a:	f010 001f 	ands.w	r0, r0, #31
 800658e:	f000 8092 	beq.w	80066b6 <_dtoa_r+0x90e>
 8006592:	f1c0 0320 	rsb	r3, r0, #32
 8006596:	2b04      	cmp	r3, #4
 8006598:	f340 8085 	ble.w	80066a6 <_dtoa_r+0x8fe>
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	f1c0 001c 	rsb	r0, r0, #28
 80065a2:	4403      	add	r3, r0
 80065a4:	4481      	add	r9, r0
 80065a6:	4407      	add	r7, r0
 80065a8:	9309      	str	r3, [sp, #36]	; 0x24
 80065aa:	f1b9 0f00 	cmp.w	r9, #0
 80065ae:	dd05      	ble.n	80065bc <_dtoa_r+0x814>
 80065b0:	4651      	mov	r1, sl
 80065b2:	464a      	mov	r2, r9
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 fce5 	bl	8006f84 <__lshift>
 80065ba:	4682      	mov	sl, r0
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd05      	ble.n	80065ce <_dtoa_r+0x826>
 80065c2:	4621      	mov	r1, r4
 80065c4:	461a      	mov	r2, r3
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 fcdc 	bl	8006f84 <__lshift>
 80065cc:	4604      	mov	r4, r0
 80065ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d072      	beq.n	80066ba <_dtoa_r+0x912>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4650      	mov	r0, sl
 80065d8:	f000 fd40 	bl	800705c <__mcmp>
 80065dc:	2800      	cmp	r0, #0
 80065de:	da6c      	bge.n	80066ba <_dtoa_r+0x912>
 80065e0:	2300      	movs	r3, #0
 80065e2:	4651      	mov	r1, sl
 80065e4:	220a      	movs	r2, #10
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 fb20 	bl	8006c2c <__multadd>
 80065ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ee:	4682      	mov	sl, r0
 80065f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 81ac 	beq.w	8006952 <_dtoa_r+0xbaa>
 80065fa:	2300      	movs	r3, #0
 80065fc:	4631      	mov	r1, r6
 80065fe:	220a      	movs	r2, #10
 8006600:	4628      	mov	r0, r5
 8006602:	f000 fb13 	bl	8006c2c <__multadd>
 8006606:	9b06      	ldr	r3, [sp, #24]
 8006608:	4606      	mov	r6, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	f300 8093 	bgt.w	8006736 <_dtoa_r+0x98e>
 8006610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006612:	2b02      	cmp	r3, #2
 8006614:	dc59      	bgt.n	80066ca <_dtoa_r+0x922>
 8006616:	e08e      	b.n	8006736 <_dtoa_r+0x98e>
 8006618:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800661a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800661e:	e75d      	b.n	80064dc <_dtoa_r+0x734>
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	1e5c      	subs	r4, r3, #1
 8006624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006626:	42a3      	cmp	r3, r4
 8006628:	bfbf      	itttt	lt
 800662a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800662c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800662e:	1ae3      	sublt	r3, r4, r3
 8006630:	18d2      	addlt	r2, r2, r3
 8006632:	bfa8      	it	ge
 8006634:	1b1c      	subge	r4, r3, r4
 8006636:	9b08      	ldr	r3, [sp, #32]
 8006638:	bfbe      	ittt	lt
 800663a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800663c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800663e:	2400      	movlt	r4, #0
 8006640:	2b00      	cmp	r3, #0
 8006642:	bfb5      	itete	lt
 8006644:	eba9 0703 	sublt.w	r7, r9, r3
 8006648:	464f      	movge	r7, r9
 800664a:	2300      	movlt	r3, #0
 800664c:	9b08      	ldrge	r3, [sp, #32]
 800664e:	e747      	b.n	80064e0 <_dtoa_r+0x738>
 8006650:	464f      	mov	r7, r9
 8006652:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006654:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006656:	e74c      	b.n	80064f2 <_dtoa_r+0x74a>
 8006658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665a:	e773      	b.n	8006544 <_dtoa_r+0x79c>
 800665c:	3fe00000 	.word	0x3fe00000
 8006660:	40240000 	.word	0x40240000
 8006664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006666:	2b01      	cmp	r3, #1
 8006668:	dc18      	bgt.n	800669c <_dtoa_r+0x8f4>
 800666a:	9b04      	ldr	r3, [sp, #16]
 800666c:	b9b3      	cbnz	r3, 800669c <_dtoa_r+0x8f4>
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006674:	b993      	cbnz	r3, 800669c <_dtoa_r+0x8f4>
 8006676:	9b05      	ldr	r3, [sp, #20]
 8006678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800667c:	0d1b      	lsrs	r3, r3, #20
 800667e:	051b      	lsls	r3, r3, #20
 8006680:	b17b      	cbz	r3, 80066a2 <_dtoa_r+0x8fa>
 8006682:	f04f 0801 	mov.w	r8, #1
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	f109 0901 	add.w	r9, r9, #1
 800668c:	3301      	adds	r3, #1
 800668e:	9309      	str	r3, [sp, #36]	; 0x24
 8006690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006692:	2b00      	cmp	r3, #0
 8006694:	f47f af6f 	bne.w	8006576 <_dtoa_r+0x7ce>
 8006698:	2001      	movs	r0, #1
 800669a:	e774      	b.n	8006586 <_dtoa_r+0x7de>
 800669c:	f04f 0800 	mov.w	r8, #0
 80066a0:	e7f6      	b.n	8006690 <_dtoa_r+0x8e8>
 80066a2:	4698      	mov	r8, r3
 80066a4:	e7f4      	b.n	8006690 <_dtoa_r+0x8e8>
 80066a6:	d080      	beq.n	80065aa <_dtoa_r+0x802>
 80066a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066aa:	331c      	adds	r3, #28
 80066ac:	441a      	add	r2, r3
 80066ae:	4499      	add	r9, r3
 80066b0:	441f      	add	r7, r3
 80066b2:	9209      	str	r2, [sp, #36]	; 0x24
 80066b4:	e779      	b.n	80065aa <_dtoa_r+0x802>
 80066b6:	4603      	mov	r3, r0
 80066b8:	e7f6      	b.n	80066a8 <_dtoa_r+0x900>
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dc34      	bgt.n	800672a <_dtoa_r+0x982>
 80066c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	dd31      	ble.n	800672a <_dtoa_r+0x982>
 80066c6:	9b08      	ldr	r3, [sp, #32]
 80066c8:	9306      	str	r3, [sp, #24]
 80066ca:	9b06      	ldr	r3, [sp, #24]
 80066cc:	b963      	cbnz	r3, 80066e8 <_dtoa_r+0x940>
 80066ce:	4621      	mov	r1, r4
 80066d0:	2205      	movs	r2, #5
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 faaa 	bl	8006c2c <__multadd>
 80066d8:	4601      	mov	r1, r0
 80066da:	4604      	mov	r4, r0
 80066dc:	4650      	mov	r0, sl
 80066de:	f000 fcbd 	bl	800705c <__mcmp>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f73f adbf 	bgt.w	8006266 <_dtoa_r+0x4be>
 80066e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ea:	9f03      	ldr	r7, [sp, #12]
 80066ec:	ea6f 0b03 	mvn.w	fp, r3
 80066f0:	f04f 0800 	mov.w	r8, #0
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 fa76 	bl	8006be8 <_Bfree>
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	f43f aead 	beq.w	800645c <_dtoa_r+0x6b4>
 8006702:	f1b8 0f00 	cmp.w	r8, #0
 8006706:	d005      	beq.n	8006714 <_dtoa_r+0x96c>
 8006708:	45b0      	cmp	r8, r6
 800670a:	d003      	beq.n	8006714 <_dtoa_r+0x96c>
 800670c:	4641      	mov	r1, r8
 800670e:	4628      	mov	r0, r5
 8006710:	f000 fa6a 	bl	8006be8 <_Bfree>
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	f000 fa66 	bl	8006be8 <_Bfree>
 800671c:	e69e      	b.n	800645c <_dtoa_r+0x6b4>
 800671e:	2400      	movs	r4, #0
 8006720:	4626      	mov	r6, r4
 8006722:	e7e1      	b.n	80066e8 <_dtoa_r+0x940>
 8006724:	46c3      	mov	fp, r8
 8006726:	4626      	mov	r6, r4
 8006728:	e59d      	b.n	8006266 <_dtoa_r+0x4be>
 800672a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80c8 	beq.w	80068c2 <_dtoa_r+0xb1a>
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	9306      	str	r3, [sp, #24]
 8006736:	2f00      	cmp	r7, #0
 8006738:	dd05      	ble.n	8006746 <_dtoa_r+0x99e>
 800673a:	4631      	mov	r1, r6
 800673c:	463a      	mov	r2, r7
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fc20 	bl	8006f84 <__lshift>
 8006744:	4606      	mov	r6, r0
 8006746:	f1b8 0f00 	cmp.w	r8, #0
 800674a:	d05b      	beq.n	8006804 <_dtoa_r+0xa5c>
 800674c:	4628      	mov	r0, r5
 800674e:	6871      	ldr	r1, [r6, #4]
 8006750:	f000 fa0a 	bl	8006b68 <_Balloc>
 8006754:	4607      	mov	r7, r0
 8006756:	b928      	cbnz	r0, 8006764 <_dtoa_r+0x9bc>
 8006758:	4602      	mov	r2, r0
 800675a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800675e:	4b81      	ldr	r3, [pc, #516]	; (8006964 <_dtoa_r+0xbbc>)
 8006760:	f7ff bb36 	b.w	8005dd0 <_dtoa_r+0x28>
 8006764:	6932      	ldr	r2, [r6, #16]
 8006766:	f106 010c 	add.w	r1, r6, #12
 800676a:	3202      	adds	r2, #2
 800676c:	0092      	lsls	r2, r2, #2
 800676e:	300c      	adds	r0, #12
 8006770:	f000 fe2c 	bl	80073cc <memcpy>
 8006774:	2201      	movs	r2, #1
 8006776:	4639      	mov	r1, r7
 8006778:	4628      	mov	r0, r5
 800677a:	f000 fc03 	bl	8006f84 <__lshift>
 800677e:	46b0      	mov	r8, r6
 8006780:	4606      	mov	r6, r0
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	9a03      	ldr	r2, [sp, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	9308      	str	r3, [sp, #32]
 800678a:	9b06      	ldr	r3, [sp, #24]
 800678c:	4413      	add	r3, r2
 800678e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006790:	9b04      	ldr	r3, [sp, #16]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	930a      	str	r3, [sp, #40]	; 0x28
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	4621      	mov	r1, r4
 800679c:	3b01      	subs	r3, #1
 800679e:	4650      	mov	r0, sl
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	f7ff fa76 	bl	8005c92 <quorem>
 80067a6:	4641      	mov	r1, r8
 80067a8:	9006      	str	r0, [sp, #24]
 80067aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067ae:	4650      	mov	r0, sl
 80067b0:	f000 fc54 	bl	800705c <__mcmp>
 80067b4:	4632      	mov	r2, r6
 80067b6:	9009      	str	r0, [sp, #36]	; 0x24
 80067b8:	4621      	mov	r1, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 fc6a 	bl	8007094 <__mdiff>
 80067c0:	68c2      	ldr	r2, [r0, #12]
 80067c2:	4607      	mov	r7, r0
 80067c4:	bb02      	cbnz	r2, 8006808 <_dtoa_r+0xa60>
 80067c6:	4601      	mov	r1, r0
 80067c8:	4650      	mov	r0, sl
 80067ca:	f000 fc47 	bl	800705c <__mcmp>
 80067ce:	4602      	mov	r2, r0
 80067d0:	4639      	mov	r1, r7
 80067d2:	4628      	mov	r0, r5
 80067d4:	920c      	str	r2, [sp, #48]	; 0x30
 80067d6:	f000 fa07 	bl	8006be8 <_Bfree>
 80067da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067de:	9f08      	ldr	r7, [sp, #32]
 80067e0:	ea43 0102 	orr.w	r1, r3, r2
 80067e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e6:	4319      	orrs	r1, r3
 80067e8:	d110      	bne.n	800680c <_dtoa_r+0xa64>
 80067ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067ee:	d029      	beq.n	8006844 <_dtoa_r+0xa9c>
 80067f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dd02      	ble.n	80067fc <_dtoa_r+0xa54>
 80067f6:	9b06      	ldr	r3, [sp, #24]
 80067f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80067fc:	9b04      	ldr	r3, [sp, #16]
 80067fe:	f883 9000 	strb.w	r9, [r3]
 8006802:	e777      	b.n	80066f4 <_dtoa_r+0x94c>
 8006804:	4630      	mov	r0, r6
 8006806:	e7ba      	b.n	800677e <_dtoa_r+0x9d6>
 8006808:	2201      	movs	r2, #1
 800680a:	e7e1      	b.n	80067d0 <_dtoa_r+0xa28>
 800680c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	db04      	blt.n	800681c <_dtoa_r+0xa74>
 8006812:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006814:	430b      	orrs	r3, r1
 8006816:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006818:	430b      	orrs	r3, r1
 800681a:	d120      	bne.n	800685e <_dtoa_r+0xab6>
 800681c:	2a00      	cmp	r2, #0
 800681e:	dded      	ble.n	80067fc <_dtoa_r+0xa54>
 8006820:	4651      	mov	r1, sl
 8006822:	2201      	movs	r2, #1
 8006824:	4628      	mov	r0, r5
 8006826:	f000 fbad 	bl	8006f84 <__lshift>
 800682a:	4621      	mov	r1, r4
 800682c:	4682      	mov	sl, r0
 800682e:	f000 fc15 	bl	800705c <__mcmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	dc03      	bgt.n	800683e <_dtoa_r+0xa96>
 8006836:	d1e1      	bne.n	80067fc <_dtoa_r+0xa54>
 8006838:	f019 0f01 	tst.w	r9, #1
 800683c:	d0de      	beq.n	80067fc <_dtoa_r+0xa54>
 800683e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006842:	d1d8      	bne.n	80067f6 <_dtoa_r+0xa4e>
 8006844:	2339      	movs	r3, #57	; 0x39
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	7013      	strb	r3, [r2, #0]
 800684a:	463b      	mov	r3, r7
 800684c:	461f      	mov	r7, r3
 800684e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006852:	3b01      	subs	r3, #1
 8006854:	2a39      	cmp	r2, #57	; 0x39
 8006856:	d06b      	beq.n	8006930 <_dtoa_r+0xb88>
 8006858:	3201      	adds	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e74a      	b.n	80066f4 <_dtoa_r+0x94c>
 800685e:	2a00      	cmp	r2, #0
 8006860:	dd07      	ble.n	8006872 <_dtoa_r+0xaca>
 8006862:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006866:	d0ed      	beq.n	8006844 <_dtoa_r+0xa9c>
 8006868:	9a04      	ldr	r2, [sp, #16]
 800686a:	f109 0301 	add.w	r3, r9, #1
 800686e:	7013      	strb	r3, [r2, #0]
 8006870:	e740      	b.n	80066f4 <_dtoa_r+0x94c>
 8006872:	9b08      	ldr	r3, [sp, #32]
 8006874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006876:	f803 9c01 	strb.w	r9, [r3, #-1]
 800687a:	4293      	cmp	r3, r2
 800687c:	d042      	beq.n	8006904 <_dtoa_r+0xb5c>
 800687e:	4651      	mov	r1, sl
 8006880:	2300      	movs	r3, #0
 8006882:	220a      	movs	r2, #10
 8006884:	4628      	mov	r0, r5
 8006886:	f000 f9d1 	bl	8006c2c <__multadd>
 800688a:	45b0      	cmp	r8, r6
 800688c:	4682      	mov	sl, r0
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	f04f 020a 	mov.w	r2, #10
 8006896:	4641      	mov	r1, r8
 8006898:	4628      	mov	r0, r5
 800689a:	d107      	bne.n	80068ac <_dtoa_r+0xb04>
 800689c:	f000 f9c6 	bl	8006c2c <__multadd>
 80068a0:	4680      	mov	r8, r0
 80068a2:	4606      	mov	r6, r0
 80068a4:	9b08      	ldr	r3, [sp, #32]
 80068a6:	3301      	adds	r3, #1
 80068a8:	9308      	str	r3, [sp, #32]
 80068aa:	e775      	b.n	8006798 <_dtoa_r+0x9f0>
 80068ac:	f000 f9be 	bl	8006c2c <__multadd>
 80068b0:	4631      	mov	r1, r6
 80068b2:	4680      	mov	r8, r0
 80068b4:	2300      	movs	r3, #0
 80068b6:	220a      	movs	r2, #10
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 f9b7 	bl	8006c2c <__multadd>
 80068be:	4606      	mov	r6, r0
 80068c0:	e7f0      	b.n	80068a4 <_dtoa_r+0xafc>
 80068c2:	9b08      	ldr	r3, [sp, #32]
 80068c4:	9306      	str	r3, [sp, #24]
 80068c6:	9f03      	ldr	r7, [sp, #12]
 80068c8:	4621      	mov	r1, r4
 80068ca:	4650      	mov	r0, sl
 80068cc:	f7ff f9e1 	bl	8005c92 <quorem>
 80068d0:	9b03      	ldr	r3, [sp, #12]
 80068d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80068d6:	f807 9b01 	strb.w	r9, [r7], #1
 80068da:	1afa      	subs	r2, r7, r3
 80068dc:	9b06      	ldr	r3, [sp, #24]
 80068de:	4293      	cmp	r3, r2
 80068e0:	dd07      	ble.n	80068f2 <_dtoa_r+0xb4a>
 80068e2:	4651      	mov	r1, sl
 80068e4:	2300      	movs	r3, #0
 80068e6:	220a      	movs	r2, #10
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f99f 	bl	8006c2c <__multadd>
 80068ee:	4682      	mov	sl, r0
 80068f0:	e7ea      	b.n	80068c8 <_dtoa_r+0xb20>
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	f04f 0800 	mov.w	r8, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bfcc      	ite	gt
 80068fc:	461f      	movgt	r7, r3
 80068fe:	2701      	movle	r7, #1
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	441f      	add	r7, r3
 8006904:	4651      	mov	r1, sl
 8006906:	2201      	movs	r2, #1
 8006908:	4628      	mov	r0, r5
 800690a:	f000 fb3b 	bl	8006f84 <__lshift>
 800690e:	4621      	mov	r1, r4
 8006910:	4682      	mov	sl, r0
 8006912:	f000 fba3 	bl	800705c <__mcmp>
 8006916:	2800      	cmp	r0, #0
 8006918:	dc97      	bgt.n	800684a <_dtoa_r+0xaa2>
 800691a:	d102      	bne.n	8006922 <_dtoa_r+0xb7a>
 800691c:	f019 0f01 	tst.w	r9, #1
 8006920:	d193      	bne.n	800684a <_dtoa_r+0xaa2>
 8006922:	463b      	mov	r3, r7
 8006924:	461f      	mov	r7, r3
 8006926:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800692a:	2a30      	cmp	r2, #48	; 0x30
 800692c:	d0fa      	beq.n	8006924 <_dtoa_r+0xb7c>
 800692e:	e6e1      	b.n	80066f4 <_dtoa_r+0x94c>
 8006930:	9a03      	ldr	r2, [sp, #12]
 8006932:	429a      	cmp	r2, r3
 8006934:	d18a      	bne.n	800684c <_dtoa_r+0xaa4>
 8006936:	2331      	movs	r3, #49	; 0x31
 8006938:	f10b 0b01 	add.w	fp, fp, #1
 800693c:	e797      	b.n	800686e <_dtoa_r+0xac6>
 800693e:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <_dtoa_r+0xbc0>)
 8006940:	f7ff ba9f 	b.w	8005e82 <_dtoa_r+0xda>
 8006944:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006946:	2b00      	cmp	r3, #0
 8006948:	f47f aa77 	bne.w	8005e3a <_dtoa_r+0x92>
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <_dtoa_r+0xbc4>)
 800694e:	f7ff ba98 	b.w	8005e82 <_dtoa_r+0xda>
 8006952:	9b06      	ldr	r3, [sp, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	dcb6      	bgt.n	80068c6 <_dtoa_r+0xb1e>
 8006958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800695a:	2b02      	cmp	r3, #2
 800695c:	f73f aeb5 	bgt.w	80066ca <_dtoa_r+0x922>
 8006960:	e7b1      	b.n	80068c6 <_dtoa_r+0xb1e>
 8006962:	bf00      	nop
 8006964:	08007b06 	.word	0x08007b06
 8006968:	08007a66 	.word	0x08007a66
 800696c:	08007a8a 	.word	0x08007a8a

08006970 <_free_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4605      	mov	r5, r0
 8006974:	2900      	cmp	r1, #0
 8006976:	d040      	beq.n	80069fa <_free_r+0x8a>
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f0c      	subs	r4, r1, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfb8      	it	lt
 8006982:	18e4      	addlt	r4, r4, r3
 8006984:	f000 f8e4 	bl	8006b50 <__malloc_lock>
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <_free_r+0x8c>)
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	b933      	cbnz	r3, 800699c <_free_r+0x2c>
 800698e:	6063      	str	r3, [r4, #4]
 8006990:	6014      	str	r4, [r2, #0]
 8006992:	4628      	mov	r0, r5
 8006994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006998:	f000 b8e0 	b.w	8006b5c <__malloc_unlock>
 800699c:	42a3      	cmp	r3, r4
 800699e:	d908      	bls.n	80069b2 <_free_r+0x42>
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	1821      	adds	r1, r4, r0
 80069a4:	428b      	cmp	r3, r1
 80069a6:	bf01      	itttt	eq
 80069a8:	6819      	ldreq	r1, [r3, #0]
 80069aa:	685b      	ldreq	r3, [r3, #4]
 80069ac:	1809      	addeq	r1, r1, r0
 80069ae:	6021      	streq	r1, [r4, #0]
 80069b0:	e7ed      	b.n	800698e <_free_r+0x1e>
 80069b2:	461a      	mov	r2, r3
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	b10b      	cbz	r3, 80069bc <_free_r+0x4c>
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	d9fa      	bls.n	80069b2 <_free_r+0x42>
 80069bc:	6811      	ldr	r1, [r2, #0]
 80069be:	1850      	adds	r0, r2, r1
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d10b      	bne.n	80069dc <_free_r+0x6c>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	4401      	add	r1, r0
 80069c8:	1850      	adds	r0, r2, r1
 80069ca:	4283      	cmp	r3, r0
 80069cc:	6011      	str	r1, [r2, #0]
 80069ce:	d1e0      	bne.n	8006992 <_free_r+0x22>
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	4408      	add	r0, r1
 80069d6:	6010      	str	r0, [r2, #0]
 80069d8:	6053      	str	r3, [r2, #4]
 80069da:	e7da      	b.n	8006992 <_free_r+0x22>
 80069dc:	d902      	bls.n	80069e4 <_free_r+0x74>
 80069de:	230c      	movs	r3, #12
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	e7d6      	b.n	8006992 <_free_r+0x22>
 80069e4:	6820      	ldr	r0, [r4, #0]
 80069e6:	1821      	adds	r1, r4, r0
 80069e8:	428b      	cmp	r3, r1
 80069ea:	bf01      	itttt	eq
 80069ec:	6819      	ldreq	r1, [r3, #0]
 80069ee:	685b      	ldreq	r3, [r3, #4]
 80069f0:	1809      	addeq	r1, r1, r0
 80069f2:	6021      	streq	r1, [r4, #0]
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	6054      	str	r4, [r2, #4]
 80069f8:	e7cb      	b.n	8006992 <_free_r+0x22>
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	20000548 	.word	0x20000548

08006a00 <malloc>:
 8006a00:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <malloc+0xc>)
 8006a02:	4601      	mov	r1, r0
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	f000 b823 	b.w	8006a50 <_malloc_r>
 8006a0a:	bf00      	nop
 8006a0c:	20000074 	.word	0x20000074

08006a10 <sbrk_aligned>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4e0e      	ldr	r6, [pc, #56]	; (8006a4c <sbrk_aligned+0x3c>)
 8006a14:	460c      	mov	r4, r1
 8006a16:	6831      	ldr	r1, [r6, #0]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	b911      	cbnz	r1, 8006a22 <sbrk_aligned+0x12>
 8006a1c:	f000 fcc6 	bl	80073ac <_sbrk_r>
 8006a20:	6030      	str	r0, [r6, #0]
 8006a22:	4621      	mov	r1, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 fcc1 	bl	80073ac <_sbrk_r>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	d00a      	beq.n	8006a44 <sbrk_aligned+0x34>
 8006a2e:	1cc4      	adds	r4, r0, #3
 8006a30:	f024 0403 	bic.w	r4, r4, #3
 8006a34:	42a0      	cmp	r0, r4
 8006a36:	d007      	beq.n	8006a48 <sbrk_aligned+0x38>
 8006a38:	1a21      	subs	r1, r4, r0
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 fcb6 	bl	80073ac <_sbrk_r>
 8006a40:	3001      	adds	r0, #1
 8006a42:	d101      	bne.n	8006a48 <sbrk_aligned+0x38>
 8006a44:	f04f 34ff 	mov.w	r4, #4294967295
 8006a48:	4620      	mov	r0, r4
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	2000054c 	.word	0x2000054c

08006a50 <_malloc_r>:
 8006a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a54:	1ccd      	adds	r5, r1, #3
 8006a56:	f025 0503 	bic.w	r5, r5, #3
 8006a5a:	3508      	adds	r5, #8
 8006a5c:	2d0c      	cmp	r5, #12
 8006a5e:	bf38      	it	cc
 8006a60:	250c      	movcc	r5, #12
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	4607      	mov	r7, r0
 8006a66:	db01      	blt.n	8006a6c <_malloc_r+0x1c>
 8006a68:	42a9      	cmp	r1, r5
 8006a6a:	d905      	bls.n	8006a78 <_malloc_r+0x28>
 8006a6c:	230c      	movs	r3, #12
 8006a6e:	2600      	movs	r6, #0
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	4630      	mov	r0, r6
 8006a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b4c <_malloc_r+0xfc>
 8006a7c:	f000 f868 	bl	8006b50 <__malloc_lock>
 8006a80:	f8d8 3000 	ldr.w	r3, [r8]
 8006a84:	461c      	mov	r4, r3
 8006a86:	bb5c      	cbnz	r4, 8006ae0 <_malloc_r+0x90>
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	f7ff ffc0 	bl	8006a10 <sbrk_aligned>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	4604      	mov	r4, r0
 8006a94:	d155      	bne.n	8006b42 <_malloc_r+0xf2>
 8006a96:	f8d8 4000 	ldr.w	r4, [r8]
 8006a9a:	4626      	mov	r6, r4
 8006a9c:	2e00      	cmp	r6, #0
 8006a9e:	d145      	bne.n	8006b2c <_malloc_r+0xdc>
 8006aa0:	2c00      	cmp	r4, #0
 8006aa2:	d048      	beq.n	8006b36 <_malloc_r+0xe6>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	eb04 0903 	add.w	r9, r4, r3
 8006aae:	f000 fc7d 	bl	80073ac <_sbrk_r>
 8006ab2:	4581      	cmp	r9, r0
 8006ab4:	d13f      	bne.n	8006b36 <_malloc_r+0xe6>
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	4638      	mov	r0, r7
 8006aba:	1a6d      	subs	r5, r5, r1
 8006abc:	4629      	mov	r1, r5
 8006abe:	f7ff ffa7 	bl	8006a10 <sbrk_aligned>
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d037      	beq.n	8006b36 <_malloc_r+0xe6>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	442b      	add	r3, r5
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d038      	beq.n	8006b46 <_malloc_r+0xf6>
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	42a2      	cmp	r2, r4
 8006ad8:	d12b      	bne.n	8006b32 <_malloc_r+0xe2>
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
 8006ade:	e00f      	b.n	8006b00 <_malloc_r+0xb0>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	1b52      	subs	r2, r2, r5
 8006ae4:	d41f      	bmi.n	8006b26 <_malloc_r+0xd6>
 8006ae6:	2a0b      	cmp	r2, #11
 8006ae8:	d917      	bls.n	8006b1a <_malloc_r+0xca>
 8006aea:	1961      	adds	r1, r4, r5
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	6025      	str	r5, [r4, #0]
 8006af0:	bf18      	it	ne
 8006af2:	6059      	strne	r1, [r3, #4]
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	bf08      	it	eq
 8006af8:	f8c8 1000 	streq.w	r1, [r8]
 8006afc:	5162      	str	r2, [r4, r5]
 8006afe:	604b      	str	r3, [r1, #4]
 8006b00:	4638      	mov	r0, r7
 8006b02:	f104 060b 	add.w	r6, r4, #11
 8006b06:	f000 f829 	bl	8006b5c <__malloc_unlock>
 8006b0a:	f026 0607 	bic.w	r6, r6, #7
 8006b0e:	1d23      	adds	r3, r4, #4
 8006b10:	1af2      	subs	r2, r6, r3
 8006b12:	d0ae      	beq.n	8006a72 <_malloc_r+0x22>
 8006b14:	1b9b      	subs	r3, r3, r6
 8006b16:	50a3      	str	r3, [r4, r2]
 8006b18:	e7ab      	b.n	8006a72 <_malloc_r+0x22>
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	6862      	ldr	r2, [r4, #4]
 8006b1e:	d1dd      	bne.n	8006adc <_malloc_r+0x8c>
 8006b20:	f8c8 2000 	str.w	r2, [r8]
 8006b24:	e7ec      	b.n	8006b00 <_malloc_r+0xb0>
 8006b26:	4623      	mov	r3, r4
 8006b28:	6864      	ldr	r4, [r4, #4]
 8006b2a:	e7ac      	b.n	8006a86 <_malloc_r+0x36>
 8006b2c:	4634      	mov	r4, r6
 8006b2e:	6876      	ldr	r6, [r6, #4]
 8006b30:	e7b4      	b.n	8006a9c <_malloc_r+0x4c>
 8006b32:	4613      	mov	r3, r2
 8006b34:	e7cc      	b.n	8006ad0 <_malloc_r+0x80>
 8006b36:	230c      	movs	r3, #12
 8006b38:	4638      	mov	r0, r7
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	f000 f80e 	bl	8006b5c <__malloc_unlock>
 8006b40:	e797      	b.n	8006a72 <_malloc_r+0x22>
 8006b42:	6025      	str	r5, [r4, #0]
 8006b44:	e7dc      	b.n	8006b00 <_malloc_r+0xb0>
 8006b46:	605b      	str	r3, [r3, #4]
 8006b48:	deff      	udf	#255	; 0xff
 8006b4a:	bf00      	nop
 8006b4c:	20000548 	.word	0x20000548

08006b50 <__malloc_lock>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__malloc_lock+0x8>)
 8006b52:	f7ff b88e 	b.w	8005c72 <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	20000544 	.word	0x20000544

08006b5c <__malloc_unlock>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__malloc_unlock+0x8>)
 8006b5e:	f7ff b889 	b.w	8005c74 <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	20000544 	.word	0x20000544

08006b68 <_Balloc>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	69c6      	ldr	r6, [r0, #28]
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	460d      	mov	r5, r1
 8006b70:	b976      	cbnz	r6, 8006b90 <_Balloc+0x28>
 8006b72:	2010      	movs	r0, #16
 8006b74:	f7ff ff44 	bl	8006a00 <malloc>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	61e0      	str	r0, [r4, #28]
 8006b7c:	b920      	cbnz	r0, 8006b88 <_Balloc+0x20>
 8006b7e:	216b      	movs	r1, #107	; 0x6b
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <_Balloc+0x78>)
 8006b82:	4818      	ldr	r0, [pc, #96]	; (8006be4 <_Balloc+0x7c>)
 8006b84:	f000 fc30 	bl	80073e8 <__assert_func>
 8006b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b8c:	6006      	str	r6, [r0, #0]
 8006b8e:	60c6      	str	r6, [r0, #12]
 8006b90:	69e6      	ldr	r6, [r4, #28]
 8006b92:	68f3      	ldr	r3, [r6, #12]
 8006b94:	b183      	cbz	r3, 8006bb8 <_Balloc+0x50>
 8006b96:	69e3      	ldr	r3, [r4, #28]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b9e:	b9b8      	cbnz	r0, 8006bd0 <_Balloc+0x68>
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ba6:	1d72      	adds	r2, r6, #5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	0092      	lsls	r2, r2, #2
 8006bac:	f000 fc3a 	bl	8007424 <_calloc_r>
 8006bb0:	b160      	cbz	r0, 8006bcc <_Balloc+0x64>
 8006bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bb6:	e00e      	b.n	8006bd6 <_Balloc+0x6e>
 8006bb8:	2221      	movs	r2, #33	; 0x21
 8006bba:	2104      	movs	r1, #4
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fc31 	bl	8007424 <_calloc_r>
 8006bc2:	69e3      	ldr	r3, [r4, #28]
 8006bc4:	60f0      	str	r0, [r6, #12]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e4      	bne.n	8006b96 <_Balloc+0x2e>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	6802      	ldr	r2, [r0, #0]
 8006bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bdc:	e7f7      	b.n	8006bce <_Balloc+0x66>
 8006bde:	bf00      	nop
 8006be0:	08007a97 	.word	0x08007a97
 8006be4:	08007b17 	.word	0x08007b17

08006be8 <_Bfree>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	69c6      	ldr	r6, [r0, #28]
 8006bec:	4605      	mov	r5, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	b976      	cbnz	r6, 8006c10 <_Bfree+0x28>
 8006bf2:	2010      	movs	r0, #16
 8006bf4:	f7ff ff04 	bl	8006a00 <malloc>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	61e8      	str	r0, [r5, #28]
 8006bfc:	b920      	cbnz	r0, 8006c08 <_Bfree+0x20>
 8006bfe:	218f      	movs	r1, #143	; 0x8f
 8006c00:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <_Bfree+0x3c>)
 8006c02:	4809      	ldr	r0, [pc, #36]	; (8006c28 <_Bfree+0x40>)
 8006c04:	f000 fbf0 	bl	80073e8 <__assert_func>
 8006c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c0c:	6006      	str	r6, [r0, #0]
 8006c0e:	60c6      	str	r6, [r0, #12]
 8006c10:	b13c      	cbz	r4, 8006c22 <_Bfree+0x3a>
 8006c12:	69eb      	ldr	r3, [r5, #28]
 8006c14:	6862      	ldr	r2, [r4, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c1c:	6021      	str	r1, [r4, #0]
 8006c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	08007a97 	.word	0x08007a97
 8006c28:	08007b17 	.word	0x08007b17

08006c2c <__multadd>:
 8006c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	4607      	mov	r7, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	461e      	mov	r6, r3
 8006c36:	2000      	movs	r0, #0
 8006c38:	690d      	ldr	r5, [r1, #16]
 8006c3a:	f101 0c14 	add.w	ip, r1, #20
 8006c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c42:	3001      	adds	r0, #1
 8006c44:	b299      	uxth	r1, r3
 8006c46:	fb02 6101 	mla	r1, r2, r1, r6
 8006c4a:	0c1e      	lsrs	r6, r3, #16
 8006c4c:	0c0b      	lsrs	r3, r1, #16
 8006c4e:	fb02 3306 	mla	r3, r2, r6, r3
 8006c52:	b289      	uxth	r1, r1
 8006c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c58:	4285      	cmp	r5, r0
 8006c5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c5e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c62:	dcec      	bgt.n	8006c3e <__multadd+0x12>
 8006c64:	b30e      	cbz	r6, 8006caa <__multadd+0x7e>
 8006c66:	68a3      	ldr	r3, [r4, #8]
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	dc19      	bgt.n	8006ca0 <__multadd+0x74>
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	4638      	mov	r0, r7
 8006c70:	3101      	adds	r1, #1
 8006c72:	f7ff ff79 	bl	8006b68 <_Balloc>
 8006c76:	4680      	mov	r8, r0
 8006c78:	b928      	cbnz	r0, 8006c86 <__multadd+0x5a>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	21ba      	movs	r1, #186	; 0xba
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <__multadd+0x84>)
 8006c80:	480c      	ldr	r0, [pc, #48]	; (8006cb4 <__multadd+0x88>)
 8006c82:	f000 fbb1 	bl	80073e8 <__assert_func>
 8006c86:	6922      	ldr	r2, [r4, #16]
 8006c88:	f104 010c 	add.w	r1, r4, #12
 8006c8c:	3202      	adds	r2, #2
 8006c8e:	0092      	lsls	r2, r2, #2
 8006c90:	300c      	adds	r0, #12
 8006c92:	f000 fb9b 	bl	80073cc <memcpy>
 8006c96:	4621      	mov	r1, r4
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff ffa5 	bl	8006be8 <_Bfree>
 8006c9e:	4644      	mov	r4, r8
 8006ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ca4:	3501      	adds	r5, #1
 8006ca6:	615e      	str	r6, [r3, #20]
 8006ca8:	6125      	str	r5, [r4, #16]
 8006caa:	4620      	mov	r0, r4
 8006cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb0:	08007b06 	.word	0x08007b06
 8006cb4:	08007b17 	.word	0x08007b17

08006cb8 <__hi0bits>:
 8006cb8:	0c02      	lsrs	r2, r0, #16
 8006cba:	0412      	lsls	r2, r2, #16
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	b9ca      	cbnz	r2, 8006cf4 <__hi0bits+0x3c>
 8006cc0:	0403      	lsls	r3, r0, #16
 8006cc2:	2010      	movs	r0, #16
 8006cc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cc8:	bf04      	itt	eq
 8006cca:	021b      	lsleq	r3, r3, #8
 8006ccc:	3008      	addeq	r0, #8
 8006cce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006cd2:	bf04      	itt	eq
 8006cd4:	011b      	lsleq	r3, r3, #4
 8006cd6:	3004      	addeq	r0, #4
 8006cd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cdc:	bf04      	itt	eq
 8006cde:	009b      	lsleq	r3, r3, #2
 8006ce0:	3002      	addeq	r0, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	db05      	blt.n	8006cf2 <__hi0bits+0x3a>
 8006ce6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006cea:	f100 0001 	add.w	r0, r0, #1
 8006cee:	bf08      	it	eq
 8006cf0:	2020      	moveq	r0, #32
 8006cf2:	4770      	bx	lr
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e7e5      	b.n	8006cc4 <__hi0bits+0xc>

08006cf8 <__lo0bits>:
 8006cf8:	6803      	ldr	r3, [r0, #0]
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	f013 0007 	ands.w	r0, r3, #7
 8006d00:	d00b      	beq.n	8006d1a <__lo0bits+0x22>
 8006d02:	07d9      	lsls	r1, r3, #31
 8006d04:	d421      	bmi.n	8006d4a <__lo0bits+0x52>
 8006d06:	0798      	lsls	r0, r3, #30
 8006d08:	bf49      	itett	mi
 8006d0a:	085b      	lsrmi	r3, r3, #1
 8006d0c:	089b      	lsrpl	r3, r3, #2
 8006d0e:	2001      	movmi	r0, #1
 8006d10:	6013      	strmi	r3, [r2, #0]
 8006d12:	bf5c      	itt	pl
 8006d14:	2002      	movpl	r0, #2
 8006d16:	6013      	strpl	r3, [r2, #0]
 8006d18:	4770      	bx	lr
 8006d1a:	b299      	uxth	r1, r3
 8006d1c:	b909      	cbnz	r1, 8006d22 <__lo0bits+0x2a>
 8006d1e:	2010      	movs	r0, #16
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	b2d9      	uxtb	r1, r3
 8006d24:	b909      	cbnz	r1, 8006d2a <__lo0bits+0x32>
 8006d26:	3008      	adds	r0, #8
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	0719      	lsls	r1, r3, #28
 8006d2c:	bf04      	itt	eq
 8006d2e:	091b      	lsreq	r3, r3, #4
 8006d30:	3004      	addeq	r0, #4
 8006d32:	0799      	lsls	r1, r3, #30
 8006d34:	bf04      	itt	eq
 8006d36:	089b      	lsreq	r3, r3, #2
 8006d38:	3002      	addeq	r0, #2
 8006d3a:	07d9      	lsls	r1, r3, #31
 8006d3c:	d403      	bmi.n	8006d46 <__lo0bits+0x4e>
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	f100 0001 	add.w	r0, r0, #1
 8006d44:	d003      	beq.n	8006d4e <__lo0bits+0x56>
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	4770      	bx	lr
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	4770      	bx	lr
 8006d4e:	2020      	movs	r0, #32
 8006d50:	4770      	bx	lr
	...

08006d54 <__i2b>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	460c      	mov	r4, r1
 8006d58:	2101      	movs	r1, #1
 8006d5a:	f7ff ff05 	bl	8006b68 <_Balloc>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	b928      	cbnz	r0, 8006d6e <__i2b+0x1a>
 8006d62:	f240 1145 	movw	r1, #325	; 0x145
 8006d66:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <__i2b+0x24>)
 8006d68:	4804      	ldr	r0, [pc, #16]	; (8006d7c <__i2b+0x28>)
 8006d6a:	f000 fb3d 	bl	80073e8 <__assert_func>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	6144      	str	r4, [r0, #20]
 8006d72:	6103      	str	r3, [r0, #16]
 8006d74:	bd10      	pop	{r4, pc}
 8006d76:	bf00      	nop
 8006d78:	08007b06 	.word	0x08007b06
 8006d7c:	08007b17 	.word	0x08007b17

08006d80 <__multiply>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	4691      	mov	r9, r2
 8006d86:	690a      	ldr	r2, [r1, #16]
 8006d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	bfbe      	ittt	lt
 8006d92:	460b      	movlt	r3, r1
 8006d94:	464c      	movlt	r4, r9
 8006d96:	4699      	movlt	r9, r3
 8006d98:	6927      	ldr	r7, [r4, #16]
 8006d9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	eb07 060a 	add.w	r6, r7, sl
 8006da6:	42b3      	cmp	r3, r6
 8006da8:	b085      	sub	sp, #20
 8006daa:	bfb8      	it	lt
 8006dac:	3101      	addlt	r1, #1
 8006dae:	f7ff fedb 	bl	8006b68 <_Balloc>
 8006db2:	b930      	cbnz	r0, 8006dc2 <__multiply+0x42>
 8006db4:	4602      	mov	r2, r0
 8006db6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006dba:	4b43      	ldr	r3, [pc, #268]	; (8006ec8 <__multiply+0x148>)
 8006dbc:	4843      	ldr	r0, [pc, #268]	; (8006ecc <__multiply+0x14c>)
 8006dbe:	f000 fb13 	bl	80073e8 <__assert_func>
 8006dc2:	f100 0514 	add.w	r5, r0, #20
 8006dc6:	462b      	mov	r3, r5
 8006dc8:	2200      	movs	r2, #0
 8006dca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dce:	4543      	cmp	r3, r8
 8006dd0:	d321      	bcc.n	8006e16 <__multiply+0x96>
 8006dd2:	f104 0314 	add.w	r3, r4, #20
 8006dd6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dda:	f109 0314 	add.w	r3, r9, #20
 8006dde:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006de2:	9202      	str	r2, [sp, #8]
 8006de4:	1b3a      	subs	r2, r7, r4
 8006de6:	3a15      	subs	r2, #21
 8006de8:	f022 0203 	bic.w	r2, r2, #3
 8006dec:	3204      	adds	r2, #4
 8006dee:	f104 0115 	add.w	r1, r4, #21
 8006df2:	428f      	cmp	r7, r1
 8006df4:	bf38      	it	cc
 8006df6:	2204      	movcc	r2, #4
 8006df8:	9201      	str	r2, [sp, #4]
 8006dfa:	9a02      	ldr	r2, [sp, #8]
 8006dfc:	9303      	str	r3, [sp, #12]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d80c      	bhi.n	8006e1c <__multiply+0x9c>
 8006e02:	2e00      	cmp	r6, #0
 8006e04:	dd03      	ble.n	8006e0e <__multiply+0x8e>
 8006e06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d05a      	beq.n	8006ec4 <__multiply+0x144>
 8006e0e:	6106      	str	r6, [r0, #16]
 8006e10:	b005      	add	sp, #20
 8006e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	f843 2b04 	str.w	r2, [r3], #4
 8006e1a:	e7d8      	b.n	8006dce <__multiply+0x4e>
 8006e1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e20:	f1ba 0f00 	cmp.w	sl, #0
 8006e24:	d023      	beq.n	8006e6e <__multiply+0xee>
 8006e26:	46a9      	mov	r9, r5
 8006e28:	f04f 0c00 	mov.w	ip, #0
 8006e2c:	f104 0e14 	add.w	lr, r4, #20
 8006e30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e34:	f8d9 1000 	ldr.w	r1, [r9]
 8006e38:	fa1f fb82 	uxth.w	fp, r2
 8006e3c:	b289      	uxth	r1, r1
 8006e3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e42:	4461      	add	r1, ip
 8006e44:	f8d9 c000 	ldr.w	ip, [r9]
 8006e48:	0c12      	lsrs	r2, r2, #16
 8006e4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e4e:	fb0a c202 	mla	r2, sl, r2, ip
 8006e52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e56:	b289      	uxth	r1, r1
 8006e58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e5c:	4577      	cmp	r7, lr
 8006e5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e62:	f849 1b04 	str.w	r1, [r9], #4
 8006e66:	d8e3      	bhi.n	8006e30 <__multiply+0xb0>
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	f845 c002 	str.w	ip, [r5, r2]
 8006e6e:	9a03      	ldr	r2, [sp, #12]
 8006e70:	3304      	adds	r3, #4
 8006e72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e76:	f1b9 0f00 	cmp.w	r9, #0
 8006e7a:	d021      	beq.n	8006ec0 <__multiply+0x140>
 8006e7c:	46ae      	mov	lr, r5
 8006e7e:	f04f 0a00 	mov.w	sl, #0
 8006e82:	6829      	ldr	r1, [r5, #0]
 8006e84:	f104 0c14 	add.w	ip, r4, #20
 8006e88:	f8bc b000 	ldrh.w	fp, [ip]
 8006e8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e90:	b289      	uxth	r1, r1
 8006e92:	fb09 220b 	mla	r2, r9, fp, r2
 8006e96:	4452      	add	r2, sl
 8006e98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e9c:	f84e 1b04 	str.w	r1, [lr], #4
 8006ea0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ea4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ea8:	f8be 1000 	ldrh.w	r1, [lr]
 8006eac:	4567      	cmp	r7, ip
 8006eae:	fb09 110a 	mla	r1, r9, sl, r1
 8006eb2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006eb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006eba:	d8e5      	bhi.n	8006e88 <__multiply+0x108>
 8006ebc:	9a01      	ldr	r2, [sp, #4]
 8006ebe:	50a9      	str	r1, [r5, r2]
 8006ec0:	3504      	adds	r5, #4
 8006ec2:	e79a      	b.n	8006dfa <__multiply+0x7a>
 8006ec4:	3e01      	subs	r6, #1
 8006ec6:	e79c      	b.n	8006e02 <__multiply+0x82>
 8006ec8:	08007b06 	.word	0x08007b06
 8006ecc:	08007b17 	.word	0x08007b17

08006ed0 <__pow5mult>:
 8006ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	4615      	mov	r5, r2
 8006ed6:	f012 0203 	ands.w	r2, r2, #3
 8006eda:	4606      	mov	r6, r0
 8006edc:	460f      	mov	r7, r1
 8006ede:	d007      	beq.n	8006ef0 <__pow5mult+0x20>
 8006ee0:	4c25      	ldr	r4, [pc, #148]	; (8006f78 <__pow5mult+0xa8>)
 8006ee2:	3a01      	subs	r2, #1
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eea:	f7ff fe9f 	bl	8006c2c <__multadd>
 8006eee:	4607      	mov	r7, r0
 8006ef0:	10ad      	asrs	r5, r5, #2
 8006ef2:	d03d      	beq.n	8006f70 <__pow5mult+0xa0>
 8006ef4:	69f4      	ldr	r4, [r6, #28]
 8006ef6:	b97c      	cbnz	r4, 8006f18 <__pow5mult+0x48>
 8006ef8:	2010      	movs	r0, #16
 8006efa:	f7ff fd81 	bl	8006a00 <malloc>
 8006efe:	4602      	mov	r2, r0
 8006f00:	61f0      	str	r0, [r6, #28]
 8006f02:	b928      	cbnz	r0, 8006f10 <__pow5mult+0x40>
 8006f04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f08:	4b1c      	ldr	r3, [pc, #112]	; (8006f7c <__pow5mult+0xac>)
 8006f0a:	481d      	ldr	r0, [pc, #116]	; (8006f80 <__pow5mult+0xb0>)
 8006f0c:	f000 fa6c 	bl	80073e8 <__assert_func>
 8006f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f14:	6004      	str	r4, [r0, #0]
 8006f16:	60c4      	str	r4, [r0, #12]
 8006f18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f20:	b94c      	cbnz	r4, 8006f36 <__pow5mult+0x66>
 8006f22:	f240 2171 	movw	r1, #625	; 0x271
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ff14 	bl	8006d54 <__i2b>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	f04f 0900 	mov.w	r9, #0
 8006f3a:	07eb      	lsls	r3, r5, #31
 8006f3c:	d50a      	bpl.n	8006f54 <__pow5mult+0x84>
 8006f3e:	4639      	mov	r1, r7
 8006f40:	4622      	mov	r2, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7ff ff1c 	bl	8006d80 <__multiply>
 8006f48:	4680      	mov	r8, r0
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff fe4b 	bl	8006be8 <_Bfree>
 8006f52:	4647      	mov	r7, r8
 8006f54:	106d      	asrs	r5, r5, #1
 8006f56:	d00b      	beq.n	8006f70 <__pow5mult+0xa0>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	b938      	cbnz	r0, 8006f6c <__pow5mult+0x9c>
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff ff0d 	bl	8006d80 <__multiply>
 8006f66:	6020      	str	r0, [r4, #0]
 8006f68:	f8c0 9000 	str.w	r9, [r0]
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	e7e4      	b.n	8006f3a <__pow5mult+0x6a>
 8006f70:	4638      	mov	r0, r7
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	bf00      	nop
 8006f78:	08007c60 	.word	0x08007c60
 8006f7c:	08007a97 	.word	0x08007a97
 8006f80:	08007b17 	.word	0x08007b17

08006f84 <__lshift>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	460c      	mov	r4, r1
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	4691      	mov	r9, r2
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	6849      	ldr	r1, [r1, #4]
 8006f92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f9c:	f108 0601 	add.w	r6, r8, #1
 8006fa0:	42b3      	cmp	r3, r6
 8006fa2:	db0b      	blt.n	8006fbc <__lshift+0x38>
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	f7ff fddf 	bl	8006b68 <_Balloc>
 8006faa:	4605      	mov	r5, r0
 8006fac:	b948      	cbnz	r0, 8006fc2 <__lshift+0x3e>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006fb4:	4b27      	ldr	r3, [pc, #156]	; (8007054 <__lshift+0xd0>)
 8006fb6:	4828      	ldr	r0, [pc, #160]	; (8007058 <__lshift+0xd4>)
 8006fb8:	f000 fa16 	bl	80073e8 <__assert_func>
 8006fbc:	3101      	adds	r1, #1
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	e7ee      	b.n	8006fa0 <__lshift+0x1c>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f100 0114 	add.w	r1, r0, #20
 8006fc8:	f100 0210 	add.w	r2, r0, #16
 8006fcc:	4618      	mov	r0, r3
 8006fce:	4553      	cmp	r3, sl
 8006fd0:	db33      	blt.n	800703a <__lshift+0xb6>
 8006fd2:	6920      	ldr	r0, [r4, #16]
 8006fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fd8:	f104 0314 	add.w	r3, r4, #20
 8006fdc:	f019 091f 	ands.w	r9, r9, #31
 8006fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fe8:	d02b      	beq.n	8007042 <__lshift+0xbe>
 8006fea:	468a      	mov	sl, r1
 8006fec:	2200      	movs	r2, #0
 8006fee:	f1c9 0e20 	rsb	lr, r9, #32
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	fa00 f009 	lsl.w	r0, r0, r9
 8006ff8:	4310      	orrs	r0, r2
 8006ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8006ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007002:	459c      	cmp	ip, r3
 8007004:	fa22 f20e 	lsr.w	r2, r2, lr
 8007008:	d8f3      	bhi.n	8006ff2 <__lshift+0x6e>
 800700a:	ebac 0304 	sub.w	r3, ip, r4
 800700e:	3b15      	subs	r3, #21
 8007010:	f023 0303 	bic.w	r3, r3, #3
 8007014:	3304      	adds	r3, #4
 8007016:	f104 0015 	add.w	r0, r4, #21
 800701a:	4584      	cmp	ip, r0
 800701c:	bf38      	it	cc
 800701e:	2304      	movcc	r3, #4
 8007020:	50ca      	str	r2, [r1, r3]
 8007022:	b10a      	cbz	r2, 8007028 <__lshift+0xa4>
 8007024:	f108 0602 	add.w	r6, r8, #2
 8007028:	3e01      	subs	r6, #1
 800702a:	4638      	mov	r0, r7
 800702c:	4621      	mov	r1, r4
 800702e:	612e      	str	r6, [r5, #16]
 8007030:	f7ff fdda 	bl	8006be8 <_Bfree>
 8007034:	4628      	mov	r0, r5
 8007036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703a:	f842 0f04 	str.w	r0, [r2, #4]!
 800703e:	3301      	adds	r3, #1
 8007040:	e7c5      	b.n	8006fce <__lshift+0x4a>
 8007042:	3904      	subs	r1, #4
 8007044:	f853 2b04 	ldr.w	r2, [r3], #4
 8007048:	459c      	cmp	ip, r3
 800704a:	f841 2f04 	str.w	r2, [r1, #4]!
 800704e:	d8f9      	bhi.n	8007044 <__lshift+0xc0>
 8007050:	e7ea      	b.n	8007028 <__lshift+0xa4>
 8007052:	bf00      	nop
 8007054:	08007b06 	.word	0x08007b06
 8007058:	08007b17 	.word	0x08007b17

0800705c <__mcmp>:
 800705c:	4603      	mov	r3, r0
 800705e:	690a      	ldr	r2, [r1, #16]
 8007060:	6900      	ldr	r0, [r0, #16]
 8007062:	b530      	push	{r4, r5, lr}
 8007064:	1a80      	subs	r0, r0, r2
 8007066:	d10d      	bne.n	8007084 <__mcmp+0x28>
 8007068:	3314      	adds	r3, #20
 800706a:	3114      	adds	r1, #20
 800706c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800707c:	4295      	cmp	r5, r2
 800707e:	d002      	beq.n	8007086 <__mcmp+0x2a>
 8007080:	d304      	bcc.n	800708c <__mcmp+0x30>
 8007082:	2001      	movs	r0, #1
 8007084:	bd30      	pop	{r4, r5, pc}
 8007086:	42a3      	cmp	r3, r4
 8007088:	d3f4      	bcc.n	8007074 <__mcmp+0x18>
 800708a:	e7fb      	b.n	8007084 <__mcmp+0x28>
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	e7f8      	b.n	8007084 <__mcmp+0x28>
	...

08007094 <__mdiff>:
 8007094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	460d      	mov	r5, r1
 800709a:	4607      	mov	r7, r0
 800709c:	4611      	mov	r1, r2
 800709e:	4628      	mov	r0, r5
 80070a0:	4614      	mov	r4, r2
 80070a2:	f7ff ffdb 	bl	800705c <__mcmp>
 80070a6:	1e06      	subs	r6, r0, #0
 80070a8:	d111      	bne.n	80070ce <__mdiff+0x3a>
 80070aa:	4631      	mov	r1, r6
 80070ac:	4638      	mov	r0, r7
 80070ae:	f7ff fd5b 	bl	8006b68 <_Balloc>
 80070b2:	4602      	mov	r2, r0
 80070b4:	b928      	cbnz	r0, 80070c2 <__mdiff+0x2e>
 80070b6:	f240 2137 	movw	r1, #567	; 0x237
 80070ba:	4b3a      	ldr	r3, [pc, #232]	; (80071a4 <__mdiff+0x110>)
 80070bc:	483a      	ldr	r0, [pc, #232]	; (80071a8 <__mdiff+0x114>)
 80070be:	f000 f993 	bl	80073e8 <__assert_func>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070c8:	4610      	mov	r0, r2
 80070ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	bfa4      	itt	ge
 80070d0:	4623      	movge	r3, r4
 80070d2:	462c      	movge	r4, r5
 80070d4:	4638      	mov	r0, r7
 80070d6:	6861      	ldr	r1, [r4, #4]
 80070d8:	bfa6      	itte	ge
 80070da:	461d      	movge	r5, r3
 80070dc:	2600      	movge	r6, #0
 80070de:	2601      	movlt	r6, #1
 80070e0:	f7ff fd42 	bl	8006b68 <_Balloc>
 80070e4:	4602      	mov	r2, r0
 80070e6:	b918      	cbnz	r0, 80070f0 <__mdiff+0x5c>
 80070e8:	f240 2145 	movw	r1, #581	; 0x245
 80070ec:	4b2d      	ldr	r3, [pc, #180]	; (80071a4 <__mdiff+0x110>)
 80070ee:	e7e5      	b.n	80070bc <__mdiff+0x28>
 80070f0:	f102 0814 	add.w	r8, r2, #20
 80070f4:	46c2      	mov	sl, r8
 80070f6:	f04f 0c00 	mov.w	ip, #0
 80070fa:	6927      	ldr	r7, [r4, #16]
 80070fc:	60c6      	str	r6, [r0, #12]
 80070fe:	692e      	ldr	r6, [r5, #16]
 8007100:	f104 0014 	add.w	r0, r4, #20
 8007104:	f105 0914 	add.w	r9, r5, #20
 8007108:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800710c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007110:	3410      	adds	r4, #16
 8007112:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007116:	f859 3b04 	ldr.w	r3, [r9], #4
 800711a:	fa1f f18b 	uxth.w	r1, fp
 800711e:	4461      	add	r1, ip
 8007120:	fa1f fc83 	uxth.w	ip, r3
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	eba1 010c 	sub.w	r1, r1, ip
 800712a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800712e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007132:	b289      	uxth	r1, r1
 8007134:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007138:	454e      	cmp	r6, r9
 800713a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800713e:	f84a 1b04 	str.w	r1, [sl], #4
 8007142:	d8e6      	bhi.n	8007112 <__mdiff+0x7e>
 8007144:	1b73      	subs	r3, r6, r5
 8007146:	3b15      	subs	r3, #21
 8007148:	f023 0303 	bic.w	r3, r3, #3
 800714c:	3515      	adds	r5, #21
 800714e:	3304      	adds	r3, #4
 8007150:	42ae      	cmp	r6, r5
 8007152:	bf38      	it	cc
 8007154:	2304      	movcc	r3, #4
 8007156:	4418      	add	r0, r3
 8007158:	4443      	add	r3, r8
 800715a:	461e      	mov	r6, r3
 800715c:	4605      	mov	r5, r0
 800715e:	4575      	cmp	r5, lr
 8007160:	d30e      	bcc.n	8007180 <__mdiff+0xec>
 8007162:	f10e 0103 	add.w	r1, lr, #3
 8007166:	1a09      	subs	r1, r1, r0
 8007168:	f021 0103 	bic.w	r1, r1, #3
 800716c:	3803      	subs	r0, #3
 800716e:	4586      	cmp	lr, r0
 8007170:	bf38      	it	cc
 8007172:	2100      	movcc	r1, #0
 8007174:	440b      	add	r3, r1
 8007176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800717a:	b189      	cbz	r1, 80071a0 <__mdiff+0x10c>
 800717c:	6117      	str	r7, [r2, #16]
 800717e:	e7a3      	b.n	80070c8 <__mdiff+0x34>
 8007180:	f855 8b04 	ldr.w	r8, [r5], #4
 8007184:	fa1f f188 	uxth.w	r1, r8
 8007188:	4461      	add	r1, ip
 800718a:	140c      	asrs	r4, r1, #16
 800718c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007190:	b289      	uxth	r1, r1
 8007192:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007196:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800719a:	f846 1b04 	str.w	r1, [r6], #4
 800719e:	e7de      	b.n	800715e <__mdiff+0xca>
 80071a0:	3f01      	subs	r7, #1
 80071a2:	e7e8      	b.n	8007176 <__mdiff+0xe2>
 80071a4:	08007b06 	.word	0x08007b06
 80071a8:	08007b17 	.word	0x08007b17

080071ac <__d2b>:
 80071ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ae:	2101      	movs	r1, #1
 80071b0:	4617      	mov	r7, r2
 80071b2:	461c      	mov	r4, r3
 80071b4:	9e08      	ldr	r6, [sp, #32]
 80071b6:	f7ff fcd7 	bl	8006b68 <_Balloc>
 80071ba:	4605      	mov	r5, r0
 80071bc:	b930      	cbnz	r0, 80071cc <__d2b+0x20>
 80071be:	4602      	mov	r2, r0
 80071c0:	f240 310f 	movw	r1, #783	; 0x30f
 80071c4:	4b22      	ldr	r3, [pc, #136]	; (8007250 <__d2b+0xa4>)
 80071c6:	4823      	ldr	r0, [pc, #140]	; (8007254 <__d2b+0xa8>)
 80071c8:	f000 f90e 	bl	80073e8 <__assert_func>
 80071cc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80071d0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80071d4:	bb24      	cbnz	r4, 8007220 <__d2b+0x74>
 80071d6:	2f00      	cmp	r7, #0
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	d026      	beq.n	800722a <__d2b+0x7e>
 80071dc:	4668      	mov	r0, sp
 80071de:	9700      	str	r7, [sp, #0]
 80071e0:	f7ff fd8a 	bl	8006cf8 <__lo0bits>
 80071e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071e8:	b1e8      	cbz	r0, 8007226 <__d2b+0x7a>
 80071ea:	f1c0 0320 	rsb	r3, r0, #32
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	430b      	orrs	r3, r1
 80071f4:	40c2      	lsrs	r2, r0
 80071f6:	616b      	str	r3, [r5, #20]
 80071f8:	9201      	str	r2, [sp, #4]
 80071fa:	9b01      	ldr	r3, [sp, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf14      	ite	ne
 8007200:	2102      	movne	r1, #2
 8007202:	2101      	moveq	r1, #1
 8007204:	61ab      	str	r3, [r5, #24]
 8007206:	6129      	str	r1, [r5, #16]
 8007208:	b1bc      	cbz	r4, 800723a <__d2b+0x8e>
 800720a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800720e:	4404      	add	r4, r0
 8007210:	6034      	str	r4, [r6, #0]
 8007212:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007218:	6018      	str	r0, [r3, #0]
 800721a:	4628      	mov	r0, r5
 800721c:	b003      	add	sp, #12
 800721e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007224:	e7d7      	b.n	80071d6 <__d2b+0x2a>
 8007226:	6169      	str	r1, [r5, #20]
 8007228:	e7e7      	b.n	80071fa <__d2b+0x4e>
 800722a:	a801      	add	r0, sp, #4
 800722c:	f7ff fd64 	bl	8006cf8 <__lo0bits>
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	2101      	movs	r1, #1
 8007234:	616b      	str	r3, [r5, #20]
 8007236:	3020      	adds	r0, #32
 8007238:	e7e5      	b.n	8007206 <__d2b+0x5a>
 800723a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800723e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007242:	6030      	str	r0, [r6, #0]
 8007244:	6918      	ldr	r0, [r3, #16]
 8007246:	f7ff fd37 	bl	8006cb8 <__hi0bits>
 800724a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800724e:	e7e2      	b.n	8007216 <__d2b+0x6a>
 8007250:	08007b06 	.word	0x08007b06
 8007254:	08007b17 	.word	0x08007b17

08007258 <__sflush_r>:
 8007258:	898a      	ldrh	r2, [r1, #12]
 800725a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725c:	4605      	mov	r5, r0
 800725e:	0710      	lsls	r0, r2, #28
 8007260:	460c      	mov	r4, r1
 8007262:	d457      	bmi.n	8007314 <__sflush_r+0xbc>
 8007264:	684b      	ldr	r3, [r1, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	dc04      	bgt.n	8007274 <__sflush_r+0x1c>
 800726a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	dc01      	bgt.n	8007274 <__sflush_r+0x1c>
 8007270:	2000      	movs	r0, #0
 8007272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007276:	2e00      	cmp	r6, #0
 8007278:	d0fa      	beq.n	8007270 <__sflush_r+0x18>
 800727a:	2300      	movs	r3, #0
 800727c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007280:	682f      	ldr	r7, [r5, #0]
 8007282:	6a21      	ldr	r1, [r4, #32]
 8007284:	602b      	str	r3, [r5, #0]
 8007286:	d032      	beq.n	80072ee <__sflush_r+0x96>
 8007288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	075a      	lsls	r2, r3, #29
 800728e:	d505      	bpl.n	800729c <__sflush_r+0x44>
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	1ac0      	subs	r0, r0, r3
 8007294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007296:	b10b      	cbz	r3, 800729c <__sflush_r+0x44>
 8007298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800729a:	1ac0      	subs	r0, r0, r3
 800729c:	2300      	movs	r3, #0
 800729e:	4602      	mov	r2, r0
 80072a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a2:	4628      	mov	r0, r5
 80072a4:	6a21      	ldr	r1, [r4, #32]
 80072a6:	47b0      	blx	r6
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	d106      	bne.n	80072bc <__sflush_r+0x64>
 80072ae:	6829      	ldr	r1, [r5, #0]
 80072b0:	291d      	cmp	r1, #29
 80072b2:	d82b      	bhi.n	800730c <__sflush_r+0xb4>
 80072b4:	4a28      	ldr	r2, [pc, #160]	; (8007358 <__sflush_r+0x100>)
 80072b6:	410a      	asrs	r2, r1
 80072b8:	07d6      	lsls	r6, r2, #31
 80072ba:	d427      	bmi.n	800730c <__sflush_r+0xb4>
 80072bc:	2200      	movs	r2, #0
 80072be:	6062      	str	r2, [r4, #4]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	04d9      	lsls	r1, r3, #19
 80072c4:	6022      	str	r2, [r4, #0]
 80072c6:	d504      	bpl.n	80072d2 <__sflush_r+0x7a>
 80072c8:	1c42      	adds	r2, r0, #1
 80072ca:	d101      	bne.n	80072d0 <__sflush_r+0x78>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b903      	cbnz	r3, 80072d2 <__sflush_r+0x7a>
 80072d0:	6560      	str	r0, [r4, #84]	; 0x54
 80072d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072d4:	602f      	str	r7, [r5, #0]
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d0ca      	beq.n	8007270 <__sflush_r+0x18>
 80072da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072de:	4299      	cmp	r1, r3
 80072e0:	d002      	beq.n	80072e8 <__sflush_r+0x90>
 80072e2:	4628      	mov	r0, r5
 80072e4:	f7ff fb44 	bl	8006970 <_free_r>
 80072e8:	2000      	movs	r0, #0
 80072ea:	6360      	str	r0, [r4, #52]	; 0x34
 80072ec:	e7c1      	b.n	8007272 <__sflush_r+0x1a>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b0      	blx	r6
 80072f4:	1c41      	adds	r1, r0, #1
 80072f6:	d1c8      	bne.n	800728a <__sflush_r+0x32>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0c5      	beq.n	800728a <__sflush_r+0x32>
 80072fe:	2b1d      	cmp	r3, #29
 8007300:	d001      	beq.n	8007306 <__sflush_r+0xae>
 8007302:	2b16      	cmp	r3, #22
 8007304:	d101      	bne.n	800730a <__sflush_r+0xb2>
 8007306:	602f      	str	r7, [r5, #0]
 8007308:	e7b2      	b.n	8007270 <__sflush_r+0x18>
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	e7ae      	b.n	8007272 <__sflush_r+0x1a>
 8007314:	690f      	ldr	r7, [r1, #16]
 8007316:	2f00      	cmp	r7, #0
 8007318:	d0aa      	beq.n	8007270 <__sflush_r+0x18>
 800731a:	0793      	lsls	r3, r2, #30
 800731c:	bf18      	it	ne
 800731e:	2300      	movne	r3, #0
 8007320:	680e      	ldr	r6, [r1, #0]
 8007322:	bf08      	it	eq
 8007324:	694b      	ldreq	r3, [r1, #20]
 8007326:	1bf6      	subs	r6, r6, r7
 8007328:	600f      	str	r7, [r1, #0]
 800732a:	608b      	str	r3, [r1, #8]
 800732c:	2e00      	cmp	r6, #0
 800732e:	dd9f      	ble.n	8007270 <__sflush_r+0x18>
 8007330:	4633      	mov	r3, r6
 8007332:	463a      	mov	r2, r7
 8007334:	4628      	mov	r0, r5
 8007336:	6a21      	ldr	r1, [r4, #32]
 8007338:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800733c:	47e0      	blx	ip
 800733e:	2800      	cmp	r0, #0
 8007340:	dc06      	bgt.n	8007350 <__sflush_r+0xf8>
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	e790      	b.n	8007272 <__sflush_r+0x1a>
 8007350:	4407      	add	r7, r0
 8007352:	1a36      	subs	r6, r6, r0
 8007354:	e7ea      	b.n	800732c <__sflush_r+0xd4>
 8007356:	bf00      	nop
 8007358:	dfbffffe 	.word	0xdfbffffe

0800735c <_fflush_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	690b      	ldr	r3, [r1, #16]
 8007360:	4605      	mov	r5, r0
 8007362:	460c      	mov	r4, r1
 8007364:	b913      	cbnz	r3, 800736c <_fflush_r+0x10>
 8007366:	2500      	movs	r5, #0
 8007368:	4628      	mov	r0, r5
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	b118      	cbz	r0, 8007376 <_fflush_r+0x1a>
 800736e:	6a03      	ldr	r3, [r0, #32]
 8007370:	b90b      	cbnz	r3, 8007376 <_fflush_r+0x1a>
 8007372:	f7fe fb87 	bl	8005a84 <__sinit>
 8007376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f3      	beq.n	8007366 <_fflush_r+0xa>
 800737e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007380:	07d0      	lsls	r0, r2, #31
 8007382:	d404      	bmi.n	800738e <_fflush_r+0x32>
 8007384:	0599      	lsls	r1, r3, #22
 8007386:	d402      	bmi.n	800738e <_fflush_r+0x32>
 8007388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800738a:	f7fe fc72 	bl	8005c72 <__retarget_lock_acquire_recursive>
 800738e:	4628      	mov	r0, r5
 8007390:	4621      	mov	r1, r4
 8007392:	f7ff ff61 	bl	8007258 <__sflush_r>
 8007396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007398:	4605      	mov	r5, r0
 800739a:	07da      	lsls	r2, r3, #31
 800739c:	d4e4      	bmi.n	8007368 <_fflush_r+0xc>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	059b      	lsls	r3, r3, #22
 80073a2:	d4e1      	bmi.n	8007368 <_fflush_r+0xc>
 80073a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073a6:	f7fe fc65 	bl	8005c74 <__retarget_lock_release_recursive>
 80073aa:	e7dd      	b.n	8007368 <_fflush_r+0xc>

080073ac <_sbrk_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	2300      	movs	r3, #0
 80073b0:	4d05      	ldr	r5, [pc, #20]	; (80073c8 <_sbrk_r+0x1c>)
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7fb f8f2 	bl	80025a0 <_sbrk>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_sbrk_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_sbrk_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20000540 	.word	0x20000540

080073cc <memcpy>:
 80073cc:	440a      	add	r2, r1
 80073ce:	4291      	cmp	r1, r2
 80073d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073d4:	d100      	bne.n	80073d8 <memcpy+0xc>
 80073d6:	4770      	bx	lr
 80073d8:	b510      	push	{r4, lr}
 80073da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e4:	d1f9      	bne.n	80073da <memcpy+0xe>
 80073e6:	bd10      	pop	{r4, pc}

080073e8 <__assert_func>:
 80073e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ea:	4614      	mov	r4, r2
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <__assert_func+0x2c>)
 80073f0:	4605      	mov	r5, r0
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68d8      	ldr	r0, [r3, #12]
 80073f6:	b14c      	cbz	r4, 800740c <__assert_func+0x24>
 80073f8:	4b07      	ldr	r3, [pc, #28]	; (8007418 <__assert_func+0x30>)
 80073fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073fe:	9100      	str	r1, [sp, #0]
 8007400:	462b      	mov	r3, r5
 8007402:	4906      	ldr	r1, [pc, #24]	; (800741c <__assert_func+0x34>)
 8007404:	f000 f842 	bl	800748c <fiprintf>
 8007408:	f000 f852 	bl	80074b0 <abort>
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <__assert_func+0x38>)
 800740e:	461c      	mov	r4, r3
 8007410:	e7f3      	b.n	80073fa <__assert_func+0x12>
 8007412:	bf00      	nop
 8007414:	20000074 	.word	0x20000074
 8007418:	08007c76 	.word	0x08007c76
 800741c:	08007c83 	.word	0x08007c83
 8007420:	08007cb1 	.word	0x08007cb1

08007424 <_calloc_r>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	fba1 5402 	umull	r5, r4, r1, r2
 800742a:	b934      	cbnz	r4, 800743a <_calloc_r+0x16>
 800742c:	4629      	mov	r1, r5
 800742e:	f7ff fb0f 	bl	8006a50 <_malloc_r>
 8007432:	4606      	mov	r6, r0
 8007434:	b928      	cbnz	r0, 8007442 <_calloc_r+0x1e>
 8007436:	4630      	mov	r0, r6
 8007438:	bd70      	pop	{r4, r5, r6, pc}
 800743a:	220c      	movs	r2, #12
 800743c:	2600      	movs	r6, #0
 800743e:	6002      	str	r2, [r0, #0]
 8007440:	e7f9      	b.n	8007436 <_calloc_r+0x12>
 8007442:	462a      	mov	r2, r5
 8007444:	4621      	mov	r1, r4
 8007446:	f7fe fb96 	bl	8005b76 <memset>
 800744a:	e7f4      	b.n	8007436 <_calloc_r+0x12>

0800744c <__ascii_mbtowc>:
 800744c:	b082      	sub	sp, #8
 800744e:	b901      	cbnz	r1, 8007452 <__ascii_mbtowc+0x6>
 8007450:	a901      	add	r1, sp, #4
 8007452:	b142      	cbz	r2, 8007466 <__ascii_mbtowc+0x1a>
 8007454:	b14b      	cbz	r3, 800746a <__ascii_mbtowc+0x1e>
 8007456:	7813      	ldrb	r3, [r2, #0]
 8007458:	600b      	str	r3, [r1, #0]
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	1e10      	subs	r0, r2, #0
 800745e:	bf18      	it	ne
 8007460:	2001      	movne	r0, #1
 8007462:	b002      	add	sp, #8
 8007464:	4770      	bx	lr
 8007466:	4610      	mov	r0, r2
 8007468:	e7fb      	b.n	8007462 <__ascii_mbtowc+0x16>
 800746a:	f06f 0001 	mvn.w	r0, #1
 800746e:	e7f8      	b.n	8007462 <__ascii_mbtowc+0x16>

08007470 <__ascii_wctomb>:
 8007470:	4603      	mov	r3, r0
 8007472:	4608      	mov	r0, r1
 8007474:	b141      	cbz	r1, 8007488 <__ascii_wctomb+0x18>
 8007476:	2aff      	cmp	r2, #255	; 0xff
 8007478:	d904      	bls.n	8007484 <__ascii_wctomb+0x14>
 800747a:	228a      	movs	r2, #138	; 0x8a
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	4770      	bx	lr
 8007484:	2001      	movs	r0, #1
 8007486:	700a      	strb	r2, [r1, #0]
 8007488:	4770      	bx	lr
	...

0800748c <fiprintf>:
 800748c:	b40e      	push	{r1, r2, r3}
 800748e:	b503      	push	{r0, r1, lr}
 8007490:	4601      	mov	r1, r0
 8007492:	ab03      	add	r3, sp, #12
 8007494:	4805      	ldr	r0, [pc, #20]	; (80074ac <fiprintf+0x20>)
 8007496:	f853 2b04 	ldr.w	r2, [r3], #4
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	f000 f835 	bl	800750c <_vfiprintf_r>
 80074a2:	b002      	add	sp, #8
 80074a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a8:	b003      	add	sp, #12
 80074aa:	4770      	bx	lr
 80074ac:	20000074 	.word	0x20000074

080074b0 <abort>:
 80074b0:	2006      	movs	r0, #6
 80074b2:	b508      	push	{r3, lr}
 80074b4:	f000 fa02 	bl	80078bc <raise>
 80074b8:	2001      	movs	r0, #1
 80074ba:	f7fb f81a 	bl	80024f2 <_exit>

080074be <__sfputc_r>:
 80074be:	6893      	ldr	r3, [r2, #8]
 80074c0:	b410      	push	{r4}
 80074c2:	3b01      	subs	r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	6093      	str	r3, [r2, #8]
 80074c8:	da07      	bge.n	80074da <__sfputc_r+0x1c>
 80074ca:	6994      	ldr	r4, [r2, #24]
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	db01      	blt.n	80074d4 <__sfputc_r+0x16>
 80074d0:	290a      	cmp	r1, #10
 80074d2:	d102      	bne.n	80074da <__sfputc_r+0x1c>
 80074d4:	bc10      	pop	{r4}
 80074d6:	f000 b933 	b.w	8007740 <__swbuf_r>
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	1c58      	adds	r0, r3, #1
 80074de:	6010      	str	r0, [r2, #0]
 80074e0:	7019      	strb	r1, [r3, #0]
 80074e2:	4608      	mov	r0, r1
 80074e4:	bc10      	pop	{r4}
 80074e6:	4770      	bx	lr

080074e8 <__sfputs_r>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	4606      	mov	r6, r0
 80074ec:	460f      	mov	r7, r1
 80074ee:	4614      	mov	r4, r2
 80074f0:	18d5      	adds	r5, r2, r3
 80074f2:	42ac      	cmp	r4, r5
 80074f4:	d101      	bne.n	80074fa <__sfputs_r+0x12>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e007      	b.n	800750a <__sfputs_r+0x22>
 80074fa:	463a      	mov	r2, r7
 80074fc:	4630      	mov	r0, r6
 80074fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007502:	f7ff ffdc 	bl	80074be <__sfputc_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d1f3      	bne.n	80074f2 <__sfputs_r+0xa>
 800750a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800750c <_vfiprintf_r>:
 800750c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	460d      	mov	r5, r1
 8007512:	4614      	mov	r4, r2
 8007514:	4698      	mov	r8, r3
 8007516:	4606      	mov	r6, r0
 8007518:	b09d      	sub	sp, #116	; 0x74
 800751a:	b118      	cbz	r0, 8007524 <_vfiprintf_r+0x18>
 800751c:	6a03      	ldr	r3, [r0, #32]
 800751e:	b90b      	cbnz	r3, 8007524 <_vfiprintf_r+0x18>
 8007520:	f7fe fab0 	bl	8005a84 <__sinit>
 8007524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007526:	07d9      	lsls	r1, r3, #31
 8007528:	d405      	bmi.n	8007536 <_vfiprintf_r+0x2a>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	059a      	lsls	r2, r3, #22
 800752e:	d402      	bmi.n	8007536 <_vfiprintf_r+0x2a>
 8007530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007532:	f7fe fb9e 	bl	8005c72 <__retarget_lock_acquire_recursive>
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	071b      	lsls	r3, r3, #28
 800753a:	d501      	bpl.n	8007540 <_vfiprintf_r+0x34>
 800753c:	692b      	ldr	r3, [r5, #16]
 800753e:	b99b      	cbnz	r3, 8007568 <_vfiprintf_r+0x5c>
 8007540:	4629      	mov	r1, r5
 8007542:	4630      	mov	r0, r6
 8007544:	f000 f93a 	bl	80077bc <__swsetup_r>
 8007548:	b170      	cbz	r0, 8007568 <_vfiprintf_r+0x5c>
 800754a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800754c:	07dc      	lsls	r4, r3, #31
 800754e:	d504      	bpl.n	800755a <_vfiprintf_r+0x4e>
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	b01d      	add	sp, #116	; 0x74
 8007556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755a:	89ab      	ldrh	r3, [r5, #12]
 800755c:	0598      	lsls	r0, r3, #22
 800755e:	d4f7      	bmi.n	8007550 <_vfiprintf_r+0x44>
 8007560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007562:	f7fe fb87 	bl	8005c74 <__retarget_lock_release_recursive>
 8007566:	e7f3      	b.n	8007550 <_vfiprintf_r+0x44>
 8007568:	2300      	movs	r3, #0
 800756a:	9309      	str	r3, [sp, #36]	; 0x24
 800756c:	2320      	movs	r3, #32
 800756e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007572:	2330      	movs	r3, #48	; 0x30
 8007574:	f04f 0901 	mov.w	r9, #1
 8007578:	f8cd 800c 	str.w	r8, [sp, #12]
 800757c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800772c <_vfiprintf_r+0x220>
 8007580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007584:	4623      	mov	r3, r4
 8007586:	469a      	mov	sl, r3
 8007588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800758c:	b10a      	cbz	r2, 8007592 <_vfiprintf_r+0x86>
 800758e:	2a25      	cmp	r2, #37	; 0x25
 8007590:	d1f9      	bne.n	8007586 <_vfiprintf_r+0x7a>
 8007592:	ebba 0b04 	subs.w	fp, sl, r4
 8007596:	d00b      	beq.n	80075b0 <_vfiprintf_r+0xa4>
 8007598:	465b      	mov	r3, fp
 800759a:	4622      	mov	r2, r4
 800759c:	4629      	mov	r1, r5
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff ffa2 	bl	80074e8 <__sfputs_r>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f000 80a9 	beq.w	80076fc <_vfiprintf_r+0x1f0>
 80075aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ac:	445a      	add	r2, fp
 80075ae:	9209      	str	r2, [sp, #36]	; 0x24
 80075b0:	f89a 3000 	ldrb.w	r3, [sl]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80a1 	beq.w	80076fc <_vfiprintf_r+0x1f0>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075c4:	f10a 0a01 	add.w	sl, sl, #1
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	9307      	str	r3, [sp, #28]
 80075cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075d0:	931a      	str	r3, [sp, #104]	; 0x68
 80075d2:	4654      	mov	r4, sl
 80075d4:	2205      	movs	r2, #5
 80075d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075da:	4854      	ldr	r0, [pc, #336]	; (800772c <_vfiprintf_r+0x220>)
 80075dc:	f7fe fb4b 	bl	8005c76 <memchr>
 80075e0:	9a04      	ldr	r2, [sp, #16]
 80075e2:	b9d8      	cbnz	r0, 800761c <_vfiprintf_r+0x110>
 80075e4:	06d1      	lsls	r1, r2, #27
 80075e6:	bf44      	itt	mi
 80075e8:	2320      	movmi	r3, #32
 80075ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ee:	0713      	lsls	r3, r2, #28
 80075f0:	bf44      	itt	mi
 80075f2:	232b      	movmi	r3, #43	; 0x2b
 80075f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f8:	f89a 3000 	ldrb.w	r3, [sl]
 80075fc:	2b2a      	cmp	r3, #42	; 0x2a
 80075fe:	d015      	beq.n	800762c <_vfiprintf_r+0x120>
 8007600:	4654      	mov	r4, sl
 8007602:	2000      	movs	r0, #0
 8007604:	f04f 0c0a 	mov.w	ip, #10
 8007608:	9a07      	ldr	r2, [sp, #28]
 800760a:	4621      	mov	r1, r4
 800760c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007610:	3b30      	subs	r3, #48	; 0x30
 8007612:	2b09      	cmp	r3, #9
 8007614:	d94d      	bls.n	80076b2 <_vfiprintf_r+0x1a6>
 8007616:	b1b0      	cbz	r0, 8007646 <_vfiprintf_r+0x13a>
 8007618:	9207      	str	r2, [sp, #28]
 800761a:	e014      	b.n	8007646 <_vfiprintf_r+0x13a>
 800761c:	eba0 0308 	sub.w	r3, r0, r8
 8007620:	fa09 f303 	lsl.w	r3, r9, r3
 8007624:	4313      	orrs	r3, r2
 8007626:	46a2      	mov	sl, r4
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	e7d2      	b.n	80075d2 <_vfiprintf_r+0xc6>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1d19      	adds	r1, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	9103      	str	r1, [sp, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfbb      	ittet	lt
 8007638:	425b      	neglt	r3, r3
 800763a:	f042 0202 	orrlt.w	r2, r2, #2
 800763e:	9307      	strge	r3, [sp, #28]
 8007640:	9307      	strlt	r3, [sp, #28]
 8007642:	bfb8      	it	lt
 8007644:	9204      	strlt	r2, [sp, #16]
 8007646:	7823      	ldrb	r3, [r4, #0]
 8007648:	2b2e      	cmp	r3, #46	; 0x2e
 800764a:	d10c      	bne.n	8007666 <_vfiprintf_r+0x15a>
 800764c:	7863      	ldrb	r3, [r4, #1]
 800764e:	2b2a      	cmp	r3, #42	; 0x2a
 8007650:	d134      	bne.n	80076bc <_vfiprintf_r+0x1b0>
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	3402      	adds	r4, #2
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	9203      	str	r2, [sp, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	bfb8      	it	lt
 8007660:	f04f 33ff 	movlt.w	r3, #4294967295
 8007664:	9305      	str	r3, [sp, #20]
 8007666:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007730 <_vfiprintf_r+0x224>
 800766a:	2203      	movs	r2, #3
 800766c:	4650      	mov	r0, sl
 800766e:	7821      	ldrb	r1, [r4, #0]
 8007670:	f7fe fb01 	bl	8005c76 <memchr>
 8007674:	b138      	cbz	r0, 8007686 <_vfiprintf_r+0x17a>
 8007676:	2240      	movs	r2, #64	; 0x40
 8007678:	9b04      	ldr	r3, [sp, #16]
 800767a:	eba0 000a 	sub.w	r0, r0, sl
 800767e:	4082      	lsls	r2, r0
 8007680:	4313      	orrs	r3, r2
 8007682:	3401      	adds	r4, #1
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800768a:	2206      	movs	r2, #6
 800768c:	4829      	ldr	r0, [pc, #164]	; (8007734 <_vfiprintf_r+0x228>)
 800768e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007692:	f7fe faf0 	bl	8005c76 <memchr>
 8007696:	2800      	cmp	r0, #0
 8007698:	d03f      	beq.n	800771a <_vfiprintf_r+0x20e>
 800769a:	4b27      	ldr	r3, [pc, #156]	; (8007738 <_vfiprintf_r+0x22c>)
 800769c:	bb1b      	cbnz	r3, 80076e6 <_vfiprintf_r+0x1da>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	3307      	adds	r3, #7
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	3308      	adds	r3, #8
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ac:	443b      	add	r3, r7
 80076ae:	9309      	str	r3, [sp, #36]	; 0x24
 80076b0:	e768      	b.n	8007584 <_vfiprintf_r+0x78>
 80076b2:	460c      	mov	r4, r1
 80076b4:	2001      	movs	r0, #1
 80076b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ba:	e7a6      	b.n	800760a <_vfiprintf_r+0xfe>
 80076bc:	2300      	movs	r3, #0
 80076be:	f04f 0c0a 	mov.w	ip, #10
 80076c2:	4619      	mov	r1, r3
 80076c4:	3401      	adds	r4, #1
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	4620      	mov	r0, r4
 80076ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ce:	3a30      	subs	r2, #48	; 0x30
 80076d0:	2a09      	cmp	r2, #9
 80076d2:	d903      	bls.n	80076dc <_vfiprintf_r+0x1d0>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0c6      	beq.n	8007666 <_vfiprintf_r+0x15a>
 80076d8:	9105      	str	r1, [sp, #20]
 80076da:	e7c4      	b.n	8007666 <_vfiprintf_r+0x15a>
 80076dc:	4604      	mov	r4, r0
 80076de:	2301      	movs	r3, #1
 80076e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e4:	e7f0      	b.n	80076c8 <_vfiprintf_r+0x1bc>
 80076e6:	ab03      	add	r3, sp, #12
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	462a      	mov	r2, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <_vfiprintf_r+0x230>)
 80076f0:	a904      	add	r1, sp, #16
 80076f2:	f7fd fd79 	bl	80051e8 <_printf_float>
 80076f6:	4607      	mov	r7, r0
 80076f8:	1c78      	adds	r0, r7, #1
 80076fa:	d1d6      	bne.n	80076aa <_vfiprintf_r+0x19e>
 80076fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076fe:	07d9      	lsls	r1, r3, #31
 8007700:	d405      	bmi.n	800770e <_vfiprintf_r+0x202>
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	059a      	lsls	r2, r3, #22
 8007706:	d402      	bmi.n	800770e <_vfiprintf_r+0x202>
 8007708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800770a:	f7fe fab3 	bl	8005c74 <__retarget_lock_release_recursive>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	065b      	lsls	r3, r3, #25
 8007712:	f53f af1d 	bmi.w	8007550 <_vfiprintf_r+0x44>
 8007716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007718:	e71c      	b.n	8007554 <_vfiprintf_r+0x48>
 800771a:	ab03      	add	r3, sp, #12
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	462a      	mov	r2, r5
 8007720:	4630      	mov	r0, r6
 8007722:	4b06      	ldr	r3, [pc, #24]	; (800773c <_vfiprintf_r+0x230>)
 8007724:	a904      	add	r1, sp, #16
 8007726:	f7fd ffff 	bl	8005728 <_printf_i>
 800772a:	e7e4      	b.n	80076f6 <_vfiprintf_r+0x1ea>
 800772c:	08007db3 	.word	0x08007db3
 8007730:	08007db9 	.word	0x08007db9
 8007734:	08007dbd 	.word	0x08007dbd
 8007738:	080051e9 	.word	0x080051e9
 800773c:	080074e9 	.word	0x080074e9

08007740 <__swbuf_r>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	460e      	mov	r6, r1
 8007744:	4614      	mov	r4, r2
 8007746:	4605      	mov	r5, r0
 8007748:	b118      	cbz	r0, 8007752 <__swbuf_r+0x12>
 800774a:	6a03      	ldr	r3, [r0, #32]
 800774c:	b90b      	cbnz	r3, 8007752 <__swbuf_r+0x12>
 800774e:	f7fe f999 	bl	8005a84 <__sinit>
 8007752:	69a3      	ldr	r3, [r4, #24]
 8007754:	60a3      	str	r3, [r4, #8]
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	071a      	lsls	r2, r3, #28
 800775a:	d525      	bpl.n	80077a8 <__swbuf_r+0x68>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	b31b      	cbz	r3, 80077a8 <__swbuf_r+0x68>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	6922      	ldr	r2, [r4, #16]
 8007764:	b2f6      	uxtb	r6, r6
 8007766:	1a98      	subs	r0, r3, r2
 8007768:	6963      	ldr	r3, [r4, #20]
 800776a:	4637      	mov	r7, r6
 800776c:	4283      	cmp	r3, r0
 800776e:	dc04      	bgt.n	800777a <__swbuf_r+0x3a>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f7ff fdf2 	bl	800735c <_fflush_r>
 8007778:	b9e0      	cbnz	r0, 80077b4 <__swbuf_r+0x74>
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	3b01      	subs	r3, #1
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	701e      	strb	r6, [r3, #0]
 8007788:	6962      	ldr	r2, [r4, #20]
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	429a      	cmp	r2, r3
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x5a>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d506      	bpl.n	80077a4 <__swbuf_r+0x64>
 8007796:	2e0a      	cmp	r6, #10
 8007798:	d104      	bne.n	80077a4 <__swbuf_r+0x64>
 800779a:	4621      	mov	r1, r4
 800779c:	4628      	mov	r0, r5
 800779e:	f7ff fddd 	bl	800735c <_fflush_r>
 80077a2:	b938      	cbnz	r0, 80077b4 <__swbuf_r+0x74>
 80077a4:	4638      	mov	r0, r7
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a8:	4621      	mov	r1, r4
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 f806 	bl	80077bc <__swsetup_r>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0d5      	beq.n	8007760 <__swbuf_r+0x20>
 80077b4:	f04f 37ff 	mov.w	r7, #4294967295
 80077b8:	e7f4      	b.n	80077a4 <__swbuf_r+0x64>
	...

080077bc <__swsetup_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4b2a      	ldr	r3, [pc, #168]	; (8007868 <__swsetup_r+0xac>)
 80077c0:	4605      	mov	r5, r0
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	460c      	mov	r4, r1
 80077c6:	b118      	cbz	r0, 80077d0 <__swsetup_r+0x14>
 80077c8:	6a03      	ldr	r3, [r0, #32]
 80077ca:	b90b      	cbnz	r3, 80077d0 <__swsetup_r+0x14>
 80077cc:	f7fe f95a 	bl	8005a84 <__sinit>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077d6:	0718      	lsls	r0, r3, #28
 80077d8:	d422      	bmi.n	8007820 <__swsetup_r+0x64>
 80077da:	06d9      	lsls	r1, r3, #27
 80077dc:	d407      	bmi.n	80077ee <__swsetup_r+0x32>
 80077de:	2309      	movs	r3, #9
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077e6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	e034      	b.n	8007858 <__swsetup_r+0x9c>
 80077ee:	0758      	lsls	r0, r3, #29
 80077f0:	d512      	bpl.n	8007818 <__swsetup_r+0x5c>
 80077f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f4:	b141      	cbz	r1, 8007808 <__swsetup_r+0x4c>
 80077f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077fa:	4299      	cmp	r1, r3
 80077fc:	d002      	beq.n	8007804 <__swsetup_r+0x48>
 80077fe:	4628      	mov	r0, r5
 8007800:	f7ff f8b6 	bl	8006970 <_free_r>
 8007804:	2300      	movs	r3, #0
 8007806:	6363      	str	r3, [r4, #52]	; 0x34
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	2300      	movs	r3, #0
 8007812:	6063      	str	r3, [r4, #4]
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f043 0308 	orr.w	r3, r3, #8
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	b94b      	cbnz	r3, 8007838 <__swsetup_r+0x7c>
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800782a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782e:	d003      	beq.n	8007838 <__swsetup_r+0x7c>
 8007830:	4621      	mov	r1, r4
 8007832:	4628      	mov	r0, r5
 8007834:	f000 f883 	bl	800793e <__smakebuf_r>
 8007838:	89a0      	ldrh	r0, [r4, #12]
 800783a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800783e:	f010 0301 	ands.w	r3, r0, #1
 8007842:	d00a      	beq.n	800785a <__swsetup_r+0x9e>
 8007844:	2300      	movs	r3, #0
 8007846:	60a3      	str	r3, [r4, #8]
 8007848:	6963      	ldr	r3, [r4, #20]
 800784a:	425b      	negs	r3, r3
 800784c:	61a3      	str	r3, [r4, #24]
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	b943      	cbnz	r3, 8007864 <__swsetup_r+0xa8>
 8007852:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007856:	d1c4      	bne.n	80077e2 <__swsetup_r+0x26>
 8007858:	bd38      	pop	{r3, r4, r5, pc}
 800785a:	0781      	lsls	r1, r0, #30
 800785c:	bf58      	it	pl
 800785e:	6963      	ldrpl	r3, [r4, #20]
 8007860:	60a3      	str	r3, [r4, #8]
 8007862:	e7f4      	b.n	800784e <__swsetup_r+0x92>
 8007864:	2000      	movs	r0, #0
 8007866:	e7f7      	b.n	8007858 <__swsetup_r+0x9c>
 8007868:	20000074 	.word	0x20000074

0800786c <_raise_r>:
 800786c:	291f      	cmp	r1, #31
 800786e:	b538      	push	{r3, r4, r5, lr}
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	d904      	bls.n	8007880 <_raise_r+0x14>
 8007876:	2316      	movs	r3, #22
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007882:	b112      	cbz	r2, 800788a <_raise_r+0x1e>
 8007884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007888:	b94b      	cbnz	r3, 800789e <_raise_r+0x32>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f830 	bl	80078f0 <_getpid_r>
 8007890:	462a      	mov	r2, r5
 8007892:	4601      	mov	r1, r0
 8007894:	4620      	mov	r0, r4
 8007896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789a:	f000 b817 	b.w	80078cc <_kill_r>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d00a      	beq.n	80078b8 <_raise_r+0x4c>
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	d103      	bne.n	80078ae <_raise_r+0x42>
 80078a6:	2316      	movs	r3, #22
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	2001      	movs	r0, #1
 80078ac:	e7e7      	b.n	800787e <_raise_r+0x12>
 80078ae:	2400      	movs	r4, #0
 80078b0:	4628      	mov	r0, r5
 80078b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b6:	4798      	blx	r3
 80078b8:	2000      	movs	r0, #0
 80078ba:	e7e0      	b.n	800787e <_raise_r+0x12>

080078bc <raise>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <raise+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f7ff bfd3 	b.w	800786c <_raise_r>
 80078c6:	bf00      	nop
 80078c8:	20000074 	.word	0x20000074

080078cc <_kill_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	2300      	movs	r3, #0
 80078d0:	4d06      	ldr	r5, [pc, #24]	; (80078ec <_kill_r+0x20>)
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f7fa fdfa 	bl	80024d2 <_kill>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d102      	bne.n	80078e8 <_kill_r+0x1c>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	b103      	cbz	r3, 80078e8 <_kill_r+0x1c>
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	bf00      	nop
 80078ec:	20000540 	.word	0x20000540

080078f0 <_getpid_r>:
 80078f0:	f7fa bde8 	b.w	80024c4 <_getpid>

080078f4 <__swhatbuf_r>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	4615      	mov	r5, r2
 80078fe:	2900      	cmp	r1, #0
 8007900:	461e      	mov	r6, r3
 8007902:	b096      	sub	sp, #88	; 0x58
 8007904:	da0c      	bge.n	8007920 <__swhatbuf_r+0x2c>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	2100      	movs	r1, #0
 800790a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800790e:	bf0c      	ite	eq
 8007910:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007914:	2340      	movne	r3, #64	; 0x40
 8007916:	2000      	movs	r0, #0
 8007918:	6031      	str	r1, [r6, #0]
 800791a:	602b      	str	r3, [r5, #0]
 800791c:	b016      	add	sp, #88	; 0x58
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	466a      	mov	r2, sp
 8007922:	f000 f849 	bl	80079b8 <_fstat_r>
 8007926:	2800      	cmp	r0, #0
 8007928:	dbed      	blt.n	8007906 <__swhatbuf_r+0x12>
 800792a:	9901      	ldr	r1, [sp, #4]
 800792c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007930:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007934:	4259      	negs	r1, r3
 8007936:	4159      	adcs	r1, r3
 8007938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793c:	e7eb      	b.n	8007916 <__swhatbuf_r+0x22>

0800793e <__smakebuf_r>:
 800793e:	898b      	ldrh	r3, [r1, #12]
 8007940:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007942:	079d      	lsls	r5, r3, #30
 8007944:	4606      	mov	r6, r0
 8007946:	460c      	mov	r4, r1
 8007948:	d507      	bpl.n	800795a <__smakebuf_r+0x1c>
 800794a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	2301      	movs	r3, #1
 8007954:	6163      	str	r3, [r4, #20]
 8007956:	b002      	add	sp, #8
 8007958:	bd70      	pop	{r4, r5, r6, pc}
 800795a:	466a      	mov	r2, sp
 800795c:	ab01      	add	r3, sp, #4
 800795e:	f7ff ffc9 	bl	80078f4 <__swhatbuf_r>
 8007962:	9900      	ldr	r1, [sp, #0]
 8007964:	4605      	mov	r5, r0
 8007966:	4630      	mov	r0, r6
 8007968:	f7ff f872 	bl	8006a50 <_malloc_r>
 800796c:	b948      	cbnz	r0, 8007982 <__smakebuf_r+0x44>
 800796e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007972:	059a      	lsls	r2, r3, #22
 8007974:	d4ef      	bmi.n	8007956 <__smakebuf_r+0x18>
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	f043 0302 	orr.w	r3, r3, #2
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	e7e3      	b.n	800794a <__smakebuf_r+0xc>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	6020      	str	r0, [r4, #0]
 8007986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	9b00      	ldr	r3, [sp, #0]
 800798e:	6120      	str	r0, [r4, #16]
 8007990:	6163      	str	r3, [r4, #20]
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	b15b      	cbz	r3, 80079ae <__smakebuf_r+0x70>
 8007996:	4630      	mov	r0, r6
 8007998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800799c:	f000 f81e 	bl	80079dc <_isatty_r>
 80079a0:	b128      	cbz	r0, 80079ae <__smakebuf_r+0x70>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f023 0303 	bic.w	r3, r3, #3
 80079a8:	f043 0301 	orr.w	r3, r3, #1
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	431d      	orrs	r5, r3
 80079b2:	81a5      	strh	r5, [r4, #12]
 80079b4:	e7cf      	b.n	8007956 <__smakebuf_r+0x18>
	...

080079b8 <_fstat_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	2300      	movs	r3, #0
 80079bc:	4d06      	ldr	r5, [pc, #24]	; (80079d8 <_fstat_r+0x20>)
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	602b      	str	r3, [r5, #0]
 80079c6:	f7fa fdc6 	bl	8002556 <_fstat>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d102      	bne.n	80079d4 <_fstat_r+0x1c>
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	b103      	cbz	r3, 80079d4 <_fstat_r+0x1c>
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	bd38      	pop	{r3, r4, r5, pc}
 80079d6:	bf00      	nop
 80079d8:	20000540 	.word	0x20000540

080079dc <_isatty_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	2300      	movs	r3, #0
 80079e0:	4d05      	ldr	r5, [pc, #20]	; (80079f8 <_isatty_r+0x1c>)
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	602b      	str	r3, [r5, #0]
 80079e8:	f7fa fdc4 	bl	8002574 <_isatty>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_isatty_r+0x1a>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_isatty_r+0x1a>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	20000540 	.word	0x20000540

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
